/*
 * Automatically generated, do not edit this file directly
 */

using System;
using System.Runtime.InteropServices;

namespace Mono {
	public static partial class NativeMethods
	{
		/* moonplugin methods */
	
	
		/* libmoon methods */
	
		[DllImport ("moon")]
		// int collection_add (Collection *instance, Value *value);
		public extern static int collection_add (IntPtr instance, ref Value value);

		[DllImport ("moon")]
		// void collection_clear (Collection *instance);
		public extern static void collection_clear (IntPtr instance);

		[DllImport ("moon")]
		// bool collection_contains (Collection *instance, Value *value);
		public extern static bool collection_contains (IntPtr instance, ref Value value);

		[DllImport ("moon")]
		// int collection_get_count (Collection *instance);
		public extern static int collection_get_count (IntPtr instance);

		[DllImport ("moon", EntryPoint="collection_get_value_at_with_error")]
		// Value *collection_get_value_at_with_error (Collection *instance, int index, MoonError *error);
		private extern static IntPtr collection_get_value_at_with_error_ (IntPtr instance, int index, out MoonError error);
		public static IntPtr collection_get_value_at (IntPtr instance, int index)
		{
			IntPtr result;
			MoonError error;
			result = collection_get_value_at_with_error_ (instance, index, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		[DllImport ("moon")]
		// int collection_index_of (Collection *instance, Value *value);
		public extern static int collection_index_of (IntPtr instance, ref Value value);

		[DllImport ("moon")]
		// bool collection_insert (Collection *instance, int index, Value *value);
		public extern static bool collection_insert (IntPtr instance, int index, ref Value value);

		[DllImport ("moon")]
		// bool collection_remove (Collection *instance, Value *value);
		public extern static bool collection_remove (IntPtr instance, ref Value value);

		[DllImport ("moon", EntryPoint="collection_remove_at_with_error")]
		// bool collection_remove_at_with_error (Collection *instance, int index, MoonError *error);
		private extern static bool collection_remove_at_with_error_ (IntPtr instance, int index, out MoonError error);
		public static bool collection_remove_at (IntPtr instance, int index)
		{
			bool result;
			MoonError error;
			result = collection_remove_at_with_error_ (instance, index, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		[DllImport ("moon", EntryPoint="collection_set_value_at_with_error")]
		// bool collection_set_value_at_with_error (Collection *instance, int index, Value *value, MoonError *error);
		private extern static bool collection_set_value_at_with_error_ (IntPtr instance, int index, ref Value value, out MoonError error);
		public static bool collection_set_value_at (IntPtr instance, int index, ref Value value)
		{
			bool result;
			MoonError error;
			result = collection_set_value_at_with_error_ (instance, index, ref value, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		[DllImport ("moon")]
		// DeepZoomImageTileSource *deep_zoom_image_tile_source_new ();
		public extern static IntPtr deep_zoom_image_tile_source_new ();

		[DllImport ("moon", EntryPoint="dependency_object_get_default_value_with_error")]
		// Value *dependency_object_get_default_value_with_error (DependencyObject *instance, Types *additional_types, DependencyProperty *property, MoonError *error);
		private extern static IntPtr dependency_object_get_default_value_with_error_ (IntPtr instance, IntPtr additional_types, IntPtr property, out MoonError error);
		public static IntPtr dependency_object_get_default_value (IntPtr instance, IntPtr property)
		{
			IntPtr result;
			MoonError error;
			result = dependency_object_get_default_value_with_error_ (instance, Mono.Types.Native, property, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		// This method is already defined manually in NativeMethods.cs. Remove the import from there, and regenerate.
		// [DllImport ("moon", EntryPoint="dependency_object_get_name")]
		// const char *dependency_object_get_name (DependencyObject *instance);
		// private extern static IntPtr dependency_object_get_name_ (IntPtr instance);
		// public static string dependency_object_get_name (IntPtr instance)
		// {
		// 	IntPtr result;
		// 	result = dependency_object_get_name_ (instance);
		// 	return (result == IntPtr.Zero) ? null : Marshal.PtrToStringAnsi (result);
		// }

		[DllImport ("moon", EntryPoint="dependency_object_get_value_no_default_with_error")]
		// Value *dependency_object_get_value_no_default_with_error (DependencyObject *instance, Types *additional_types, DependencyProperty *property, MoonError *error);
		private extern static IntPtr dependency_object_get_value_no_default_with_error_ (IntPtr instance, IntPtr additional_types, IntPtr property, out MoonError error);
		public static IntPtr dependency_object_get_value_no_default (IntPtr instance, IntPtr property)
		{
			IntPtr result;
			MoonError error;
			result = dependency_object_get_value_no_default_with_error_ (instance, Mono.Types.Native, property, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		[DllImport ("moon", EntryPoint="dependency_object_get_value_with_error")]
		// Value *dependency_object_get_value_with_error (DependencyObject *instance, Types *additional_types, Type::Kind whatami, DependencyProperty *property, MoonError *error);
		private extern static IntPtr dependency_object_get_value_with_error_ (IntPtr instance, IntPtr additional_types, Kind whatami, IntPtr property, out MoonError error);
		public static IntPtr dependency_object_get_value (IntPtr instance, Kind whatami, IntPtr property)
		{
			IntPtr result;
			MoonError error;
			result = dependency_object_get_value_with_error_ (instance, Mono.Types.Native, whatami, property, out error);
			if (error.Number != 0)
				throw CreateManagedException (error);
			return result;
		}

		[DllImport ("moon")]
		// DependencyProperty *dependency_property_get_dependency_property (Type::Kind type, const char *name);
		public extern static IntPtr dependency_property_get_dependency_property (Kind type, string name);

		[DllImport ("moon", EntryPoint="dependency_property_get_name")]
		// const char *dependency_property_get_name (DependencyProperty *instance);
		private extern static IntPtr dependency_property_get_name_ (IntPtr instance);
		public static string dependency_property_get_name (IntPtr instance)
		{
			IntPtr result;
			result = dependency_property_get_name_ (instance);
			return (result == IntPtr.Zero) ? null : Marshal.PtrToStringAnsi (result);
		}

		[DllImport ("moon")]
		// Type::Kind dependency_property_get_property_type (DependencyProperty *instance);
		public extern static Kind dependency_property_get_property_type (IntPtr instance);

		[DllImport ("moon")]
		// bool dependency_property_is_nullable (DependencyProperty *instance);
		public extern static bool dependency_property_is_nullable (IntPtr instance);

		[DllImport ("moon", EntryPoint="dependency_property_register_full")]
		// DependencyProperty *dependency_property_register_full (Types *additional_types, Type::Kind type, const char *name, Value *default_value, Type::Kind vtype, bool attached, bool read_only, bool always_change, NativePropertyChangedHandler *changed_callback);
		private extern static IntPtr dependency_property_register_full_ (IntPtr additional_types, Kind type, string name, ref Value default_value, Kind vtype, bool attached, bool read_only, bool always_change, Mono.NativePropertyChangedHandler changed_callback);
		public static IntPtr dependency_property_register_full (Kind type, string name, ref Value default_value, Kind vtype, bool attached, bool read_only, bool always_change, Mono.NativePropertyChangedHandler changed_callback)
		{
			IntPtr result;
			result = dependency_property_register_full_ (Mono.Types.Native, type, name, ref default_value, vtype, attached, read_only, always_change, changed_callback);
			return result;
		}

		[DllImport ("moon", EntryPoint="dependency_property_register_managed_property")]
		// DependencyProperty *dependency_property_register_managed_property (Types *additional_types, const char *name, Type::Kind property_type, Type::Kind owner_type, bool attached, NativePropertyChangedHandler *callback);
		private extern static IntPtr dependency_property_register_managed_property_ (IntPtr additional_types, string name, Kind property_type, Kind owner_type, bool attached, Mono.NativePropertyChangedHandler callback);
		public static IntPtr dependency_property_register_managed_property (string name, Kind property_type, Kind owner_type, bool attached, Mono.NativePropertyChangedHandler callback)
		{
			IntPtr result;
			result = dependency_property_register_managed_property_ (Mono.Types.Native, name, property_type, owner_type, attached, callback);
			return result;
		}

		[DllImport ("moon")]
		// DiscreteObjectKeyFrame *discrete_object_key_frame_new ();
		public extern static IntPtr discrete_object_key_frame_new ();

		[DllImport ("moon")]
		// MultiScaleTileSource *multi_scale_tile_source_new ();
		public extern static IntPtr multi_scale_tile_source_new ();

		[DllImport ("moon")]
		// ObjectAnimationUsingKeyFrames *object_animation_using_key_frames_new ();
		public extern static IntPtr object_animation_using_key_frames_new ();

		[DllImport ("moon")]
		// ObjectKeyFrame *object_key_frame_new ();
		public extern static IntPtr object_key_frame_new ();

		[DllImport ("moon")]
		// ObjectKeyFrameCollection *object_key_frame_collection_new ();
		public extern static IntPtr object_key_frame_collection_new ();

		[DllImport ("moon")]
		// StackPanel *stack_panel_new ();
		public extern static IntPtr stack_panel_new ();

		[DllImport ("moon")]
		// void types_free (Types *instance);
		public extern static void types_free (IntPtr instance);

		[DllImport ("moon")]
		// Type *types_find (Types *instance, Type::Kind type);
		public extern static IntPtr types_find (IntPtr instance, Kind type);

		[DllImport ("moon")]
		// Type::Kind types_register_type (Types *instance, const char *name, void *gc_handle, Type::Kind parent);
		public extern static Kind types_register_type (IntPtr instance, string name, IntPtr gc_handle, Kind parent);

		[DllImport ("moon")]
		// Types *types_new ();
		public extern static IntPtr types_new ();

	}
}
