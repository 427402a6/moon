/*
 * Automatically generated, do not edit this file directly
 */

using Mono;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;

namespace System.Windows {
	partial class Application {
		public static readonly DependencyProperty ResourcesProperty = DependencyProperty.Lookup (Kind.APPLICATION, "Resources", typeof (ResourceDictionary));
	}

	partial class AssemblyPart {
		public static readonly DependencyProperty SourceProperty = DependencyProperty.Lookup (Kind.ASSEMBLYPART, "Source", typeof (string));
	}

	partial class DependencyObject {
		public static readonly DependencyProperty NameProperty = DependencyProperty.Lookup (Kind.DEPENDENCY_OBJECT, "Name", typeof (string));
	}

	partial class Deployment {
		public static readonly DependencyProperty EntryPointAssemblyProperty = DependencyProperty.Lookup (Kind.DEPLOYMENT, "EntryPointAssembly", typeof (string));
		public static readonly DependencyProperty EntryPointTypeProperty = DependencyProperty.Lookup (Kind.DEPLOYMENT, "EntryPointType", typeof (string));
		public static readonly DependencyProperty ExternalCallersFromCrossDomainProperty = DependencyProperty.Lookup (Kind.DEPLOYMENT, "ExternalCallersFromCrossDomain", typeof (CrossDomainAccess));
		public static readonly DependencyProperty PartsProperty = DependencyProperty.Lookup (Kind.DEPLOYMENT, "Parts", typeof (AssemblyPartCollection));
		public static readonly DependencyProperty RuntimeVersionProperty = DependencyProperty.Lookup (Kind.DEPLOYMENT, "RuntimeVersion", typeof (string));
	}

	partial class EventTrigger {
		public static readonly DependencyProperty ActionsProperty = DependencyProperty.Lookup (Kind.EVENTTRIGGER, "Actions", typeof (TriggerActionCollection));
		public static readonly DependencyProperty RoutedEventProperty = DependencyProperty.Lookup (Kind.EVENTTRIGGER, "RoutedEvent", typeof (string));
	}

	partial class FrameworkElement {
		public static readonly DependencyProperty ActualHeightProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "ActualHeight", typeof (double));
		public static readonly DependencyProperty ActualWidthProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "ActualWidth", typeof (double));
		public static readonly DependencyProperty CursorProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Cursor", typeof (Cursor));
		public static readonly DependencyProperty DataContextProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "DataContext", typeof (object));
		public static readonly DependencyProperty HeightProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "Height", typeof (double));
		public static readonly DependencyProperty HorizontalAlignmentProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "HorizontalAlignment", typeof (HorizontalAlignment));
		public static readonly DependencyProperty LanguageProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "Language", typeof (XmlLanguage));
		public static readonly DependencyProperty MarginProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "Margin", typeof (Thickness));
		public static readonly DependencyProperty MaxHeightProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "MaxHeight", typeof (double));
		public static readonly DependencyProperty MaxWidthProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "MaxWidth", typeof (double));
		public static readonly DependencyProperty MinHeightProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "MinHeight", typeof (double));
		public static readonly DependencyProperty MinWidthProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "MinWidth", typeof (double));
		public static readonly DependencyProperty ResourcesProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Resources", typeof (ResourceDictionary));
		public static readonly DependencyProperty TagProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Tag", typeof (object));
		public static readonly DependencyProperty TriggersProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Triggers", typeof (TriggerCollection));
		public static readonly DependencyProperty VerticalAlignmentProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "VerticalAlignment", typeof (VerticalAlignment));
		public static readonly DependencyProperty WidthProperty = DependencyProperty.Lookup (Kind.FRAMEWORKELEMENT, "Width", typeof (double));
	}

	partial class Setter {
		public static readonly DependencyProperty PropertyProperty = DependencyProperty.Lookup (Kind.SETTER, "Property", typeof (DependencyProperty));
		public static readonly DependencyProperty ValueProperty = DependencyProperty.Lookup (Kind.SETTER, "Value", typeof (object));
	}

	partial class Style {
		private static readonly DependencyProperty SettersProperty = DependencyProperty.Lookup (Kind.STYLE, "Setters", typeof (SetterBaseCollection));
		private static readonly DependencyProperty TargetTypeProperty = DependencyProperty.Lookup (Kind.STYLE, "TargetType", typeof (System.Type));
	}

	partial class UIElement {
		public static readonly DependencyProperty ClipProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Clip", typeof (Geometry));
		public static readonly DependencyProperty IsHitTestVisibleProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "IsHitTestVisible", typeof (bool));
		public static readonly DependencyProperty OpacityMaskProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "OpacityMask", typeof (Brush));
		public static readonly DependencyProperty OpacityProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Opacity", typeof (double));
		public static readonly DependencyProperty RenderTransformOriginProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "RenderTransformOrigin", typeof (Point));
		public static readonly DependencyProperty RenderTransformProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "RenderTransform", typeof (Transform));
		public static readonly DependencyProperty VisibilityProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "Visibility", typeof (Visibility));
		public static readonly DependencyProperty ZIndexProperty = DependencyProperty.Lookup (Kind.UIELEMENT, "ZIndex", typeof (int));
	}
}

namespace System.Windows.Controls {
	partial class Canvas {
		public static readonly DependencyProperty LeftProperty = DependencyProperty.Lookup (Kind.CANVAS, "Left", typeof (double));
		public static readonly DependencyProperty TopProperty = DependencyProperty.Lookup (Kind.CANVAS, "Top", typeof (double));
	}

	partial class ColumnDefinition {
		public static readonly DependencyProperty MaxWidthProperty = DependencyProperty.Lookup (Kind.COLUMNDEFINITION, "MaxWidth", typeof (double));
		public static readonly DependencyProperty MinWidthProperty = DependencyProperty.Lookup (Kind.COLUMNDEFINITION, "MinWidth", typeof (double));
		public static readonly DependencyProperty WidthProperty = DependencyProperty.Lookup (Kind.COLUMNDEFINITION, "Width", typeof (GridLength));
	}

	partial class Control {
		public static readonly DependencyProperty BackgroundProperty = DependencyProperty.Lookup (Kind.CONTROL, "Background", typeof (Brush));
		public static readonly DependencyProperty BorderBrushProperty = DependencyProperty.Lookup (Kind.CONTROL, "BorderBrush", typeof (Brush));
		public static readonly DependencyProperty BorderThicknessProperty = DependencyProperty.Lookup (Kind.CONTROL, "BorderThickness", typeof (Thickness));
		public static readonly DependencyProperty FontFamilyProperty = DependencyProperty.Lookup (Kind.CONTROL, "FontFamily", typeof (string));
		public static readonly DependencyProperty FontSizeProperty = DependencyProperty.Lookup (Kind.CONTROL, "FontSize", typeof (double));
		public static readonly DependencyProperty FontStretchProperty = DependencyProperty.Lookup (Kind.CONTROL, "FontStretch", typeof (FontStretch));
		public static readonly DependencyProperty FontStyleProperty = DependencyProperty.Lookup (Kind.CONTROL, "FontStyle", typeof (FontStyle));
		public static readonly DependencyProperty FontWeightProperty = DependencyProperty.Lookup (Kind.CONTROL, "FontWeight", typeof (FontWeight));
		public static readonly DependencyProperty ForegroundProperty = DependencyProperty.Lookup (Kind.CONTROL, "Foreground", typeof (Brush));
		public static readonly DependencyProperty HorizontalContentAlignmentProperty = DependencyProperty.Lookup (Kind.CONTROL, "HorizontalContentAlignment", typeof (HorizontalAlignment));
		public static readonly DependencyProperty IsTabStopProperty = DependencyProperty.Lookup (Kind.CONTROL, "IsTabStop", typeof (bool));
		public static readonly DependencyProperty PaddingProperty = DependencyProperty.Lookup (Kind.CONTROL, "Padding", typeof (Thickness));
		public static readonly DependencyProperty StyleProperty = DependencyProperty.Lookup (Kind.CONTROL, "Style", typeof (Style));
		public static readonly DependencyProperty TabIndexProperty = DependencyProperty.Lookup (Kind.CONTROL, "TabIndex", typeof (int));
		public static readonly DependencyProperty TabNavigationProperty = DependencyProperty.Lookup (Kind.CONTROL, "TabNavigation", typeof (KeyboardNavigationMode));
		public static readonly DependencyProperty TemplateProperty = DependencyProperty.Lookup (Kind.CONTROL, "Template", typeof (ControlTemplate));
		public static readonly DependencyProperty VerticalContentAlignmentProperty = DependencyProperty.Lookup (Kind.CONTROL, "VerticalContentAlignment", typeof (VerticalAlignment));
	}

	partial class Grid {
		private static readonly DependencyProperty ColumnDefinitionsProperty = DependencyProperty.Lookup (Kind.GRID, "ColumnDefinitions", typeof (ColumnDefinitionCollection));
		public static readonly DependencyProperty ColumnProperty = DependencyProperty.Lookup (Kind.GRID, "Column", typeof (int));
		public static readonly DependencyProperty ColumnSpanProperty = DependencyProperty.Lookup (Kind.GRID, "ColumnSpan", typeof (int));
		private static readonly DependencyProperty RowDefinitionsProperty = DependencyProperty.Lookup (Kind.GRID, "RowDefinitions", typeof (RowDefinitionCollection));
		public static readonly DependencyProperty RowProperty = DependencyProperty.Lookup (Kind.GRID, "Row", typeof (int));
		public static readonly DependencyProperty RowSpanProperty = DependencyProperty.Lookup (Kind.GRID, "RowSpan", typeof (int));
		public static readonly DependencyProperty ShowGridLinesProperty = DependencyProperty.Lookup (Kind.GRID, "ShowGridLines", typeof (bool));
	}

	partial class InkPresenter {
		public static readonly DependencyProperty StrokesProperty = DependencyProperty.Lookup (Kind.INKPRESENTER, "Strokes", typeof (StrokeCollection));
	}

	partial class MediaElement {
		public static readonly DependencyProperty AttributesProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "Attributes", typeof (Dictionary<string,string>));
		public static readonly DependencyProperty AudioStreamCountProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "AudioStreamCount", typeof (int));
		public static readonly DependencyProperty AudioStreamIndexProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "AudioStreamIndex", typeof (int));
		public static readonly DependencyProperty AutoPlayProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "AutoPlay", typeof (bool));
		public static readonly DependencyProperty BalanceProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "Balance", typeof (double));
		public static readonly DependencyProperty BufferingProgressProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "BufferingProgress", typeof (double));
		public static readonly DependencyProperty BufferingTimeProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "BufferingTime", typeof (TimeSpan));
		public static readonly DependencyProperty CanPauseProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "CanPause", typeof (bool));
		public static readonly DependencyProperty CanSeekProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "CanSeek", typeof (bool));
		public static readonly DependencyProperty CurrentStateProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "CurrentState", typeof (MediaElementState));
		public static readonly DependencyProperty IsMutedProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "IsMuted", typeof (bool));
		public static readonly DependencyProperty MarkersProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "Markers", typeof (TimelineMarkerCollection));
		public static readonly DependencyProperty NaturalDurationProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "NaturalDuration", typeof (Duration));
		public static readonly DependencyProperty NaturalVideoHeightProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "NaturalVideoHeight", typeof (double));
		public static readonly DependencyProperty NaturalVideoWidthProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "NaturalVideoWidth", typeof (double));
		public static readonly DependencyProperty PositionProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "Position", typeof (TimeSpan));
		public static readonly DependencyProperty VolumeProperty = DependencyProperty.Lookup (Kind.MEDIAELEMENT, "Volume", typeof (double));
	}

	partial class Panel {
		public static readonly DependencyProperty BackgroundProperty = DependencyProperty.Lookup (Kind.PANEL, "Background", typeof (Brush));
		public static readonly DependencyProperty ChildrenProperty = DependencyProperty.Lookup (Kind.PANEL, "Children", typeof (UIElementCollection));
	}

	partial class RowDefinition {
		public static readonly DependencyProperty HeightProperty = DependencyProperty.Lookup (Kind.ROWDEFINITION, "Height", typeof (GridLength));
		public static readonly DependencyProperty MaxHeightProperty = DependencyProperty.Lookup (Kind.ROWDEFINITION, "MaxHeight", typeof (double));
		public static readonly DependencyProperty MinHeightProperty = DependencyProperty.Lookup (Kind.ROWDEFINITION, "MinHeight", typeof (double));
	}

	partial class TextBlock {
		public static readonly DependencyProperty ActualHeightProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "ActualHeight", typeof (double));
		public static readonly DependencyProperty ActualWidthProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "ActualWidth", typeof (double));
		public static readonly DependencyProperty FontFamilyProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "FontFamily", typeof (string));
		public static readonly DependencyProperty FontSizeProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "FontSize", typeof (double));
		public static readonly DependencyProperty FontStretchProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "FontStretch", typeof (FontStretch));
		public static readonly DependencyProperty FontStyleProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "FontStyle", typeof (FontStyle));
		public static readonly DependencyProperty FontWeightProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "FontWeight", typeof (FontWeight));
		public static readonly DependencyProperty ForegroundProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "Foreground", typeof (Brush));
		public static readonly DependencyProperty InlinesProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "Inlines", typeof (InlineCollection));
		public static readonly DependencyProperty TextDecorationsProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "TextDecorations", typeof (TextDecorations));
		public static readonly DependencyProperty TextProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "Text", typeof (string));
		public static readonly DependencyProperty TextWrappingProperty = DependencyProperty.Lookup (Kind.TEXTBLOCK, "TextWrapping", typeof (TextWrapping));
	}

	partial class UserControl {
		public static readonly DependencyProperty ContentProperty = DependencyProperty.Lookup (Kind.USERCONTROL, "Content", typeof (UIElement));
	}
}

namespace System.Windows.Documents {
	partial class Glyphs {
		public static readonly DependencyProperty FillProperty = DependencyProperty.Lookup (Kind.GLYPHS, "Fill", typeof (Brush));
		public static readonly DependencyProperty FontRenderingEmSizeProperty = DependencyProperty.Lookup (Kind.GLYPHS, "FontRenderingEmSize", typeof (double));
		public static readonly DependencyProperty FontUriProperty = DependencyProperty.Lookup (Kind.GLYPHS, "FontUri", typeof (Uri));
		public static readonly DependencyProperty IndicesProperty = DependencyProperty.Lookup (Kind.GLYPHS, "Indices", typeof (string));
		public static readonly DependencyProperty OriginXProperty = DependencyProperty.Lookup (Kind.GLYPHS, "OriginX", typeof (double));
		public static readonly DependencyProperty OriginYProperty = DependencyProperty.Lookup (Kind.GLYPHS, "OriginY", typeof (double));
		public static readonly DependencyProperty StyleSimulationsProperty = DependencyProperty.Lookup (Kind.GLYPHS, "StyleSimulations", typeof (StyleSimulations));
		public static readonly DependencyProperty UnicodeStringProperty = DependencyProperty.Lookup (Kind.GLYPHS, "UnicodeString", typeof (string));
	}

	partial class Inline {
		public static readonly DependencyProperty FontFamilyProperty = DependencyProperty.Lookup (Kind.INLINE, "FontFamily", typeof (string));
		public static readonly DependencyProperty FontSizeProperty = DependencyProperty.Lookup (Kind.INLINE, "FontSize", typeof (double));
		public static readonly DependencyProperty FontStretchProperty = DependencyProperty.Lookup (Kind.INLINE, "FontStretch", typeof (FontStretch));
		public static readonly DependencyProperty FontStyleProperty = DependencyProperty.Lookup (Kind.INLINE, "FontStyle", typeof (FontStyle));
		public static readonly DependencyProperty FontWeightProperty = DependencyProperty.Lookup (Kind.INLINE, "FontWeight", typeof (FontWeight));
		public static readonly DependencyProperty ForegroundProperty = DependencyProperty.Lookup (Kind.INLINE, "Foreground", typeof (Brush));
		public static readonly DependencyProperty LanguageProperty = DependencyProperty.Lookup (Kind.INLINE, "Language", typeof (XmlLanguage));
		public static readonly DependencyProperty TextDecorationsProperty = DependencyProperty.Lookup (Kind.INLINE, "TextDecorations", typeof (TextDecorations));
	}

	partial class Run {
		public static readonly DependencyProperty TextProperty = DependencyProperty.Lookup (Kind.RUN, "Text", typeof (string));
	}
}

namespace System.Windows.Ink {
	partial class DrawingAttributes {
		public static readonly DependencyProperty ColorProperty = DependencyProperty.Lookup (Kind.DRAWINGATTRIBUTES, "Color", typeof (Color));
		public static readonly DependencyProperty HeightProperty = DependencyProperty.Lookup (Kind.DRAWINGATTRIBUTES, "Height", typeof (double));
		public static readonly DependencyProperty OutlineColorProperty = DependencyProperty.Lookup (Kind.DRAWINGATTRIBUTES, "OutlineColor", typeof (Color));
		public static readonly DependencyProperty WidthProperty = DependencyProperty.Lookup (Kind.DRAWINGATTRIBUTES, "Width", typeof (double));
	}

	partial class Stroke {
		public static readonly DependencyProperty DrawingAttributesProperty = DependencyProperty.Lookup (Kind.STROKE, "DrawingAttributes", typeof (DrawingAttributes));
		public static readonly DependencyProperty StylusPointsProperty = DependencyProperty.Lookup (Kind.STROKE, "StylusPoints", typeof (StylusPointCollection));
	}
}

namespace System.Windows.Input {
	partial class StylusInfo {
		public static readonly DependencyProperty DeviceTypeProperty = DependencyProperty.Lookup (Kind.STYLUSINFO, "DeviceType", typeof (TabletDeviceType));
		public static readonly DependencyProperty IsInvertedProperty = DependencyProperty.Lookup (Kind.STYLUSINFO, "IsInverted", typeof (bool));
	}
}

namespace System.Windows.Media {
	partial class ArcSegment {
		public static readonly DependencyProperty IsLargeArcProperty = DependencyProperty.Lookup (Kind.ARCSEGMENT, "IsLargeArc", typeof (bool));
		public static readonly DependencyProperty PointProperty = DependencyProperty.Lookup (Kind.ARCSEGMENT, "Point", typeof (Point));
		public static readonly DependencyProperty RotationAngleProperty = DependencyProperty.Lookup (Kind.ARCSEGMENT, "RotationAngle", typeof (double));
		public static readonly DependencyProperty SizeProperty = DependencyProperty.Lookup (Kind.ARCSEGMENT, "Size", typeof (Point));
		public static readonly DependencyProperty SweepDirectionProperty = DependencyProperty.Lookup (Kind.ARCSEGMENT, "SweepDirection", typeof (SweepDirection));
	}

	partial class BezierSegment {
		public static readonly DependencyProperty Point1Property = DependencyProperty.Lookup (Kind.BEZIERSEGMENT, "Point1", typeof (Point));
		public static readonly DependencyProperty Point2Property = DependencyProperty.Lookup (Kind.BEZIERSEGMENT, "Point2", typeof (Point));
		public static readonly DependencyProperty Point3Property = DependencyProperty.Lookup (Kind.BEZIERSEGMENT, "Point3", typeof (Point));
	}

	partial class Brush {
		private static readonly DependencyProperty ChangedProperty = DependencyProperty.Lookup (Kind.BRUSH, "Changed", typeof (bool));
		public static readonly DependencyProperty OpacityProperty = DependencyProperty.Lookup (Kind.BRUSH, "Opacity", typeof (double));
		public static readonly DependencyProperty RelativeTransformProperty = DependencyProperty.Lookup (Kind.BRUSH, "RelativeTransform", typeof (Transform));
		public static readonly DependencyProperty TransformProperty = DependencyProperty.Lookup (Kind.BRUSH, "Transform", typeof (Transform));
	}

	partial class EllipseGeometry {
		public static readonly DependencyProperty CenterProperty = DependencyProperty.Lookup (Kind.ELLIPSEGEOMETRY, "Center", typeof (Point));
		public static readonly DependencyProperty RadiusXProperty = DependencyProperty.Lookup (Kind.ELLIPSEGEOMETRY, "RadiusX", typeof (double));
		public static readonly DependencyProperty RadiusYProperty = DependencyProperty.Lookup (Kind.ELLIPSEGEOMETRY, "RadiusY", typeof (double));
	}

	partial class Geometry {
		public static readonly DependencyProperty FillRuleProperty = DependencyProperty.Lookup (Kind.GEOMETRY, "FillRule", typeof (FillRule));
		public static readonly DependencyProperty TransformProperty = DependencyProperty.Lookup (Kind.GEOMETRY, "Transform", typeof (Transform));
	}

	partial class GeometryGroup {
		public static readonly DependencyProperty ChildrenProperty = DependencyProperty.Lookup (Kind.GEOMETRYGROUP, "Children", typeof (GeometryCollection));
	}

	partial class GradientBrush {
		public static readonly DependencyProperty ColorInterpolationModeProperty = DependencyProperty.Lookup (Kind.GRADIENTBRUSH, "ColorInterpolationMode", typeof (ColorInterpolationMode));
		public static readonly DependencyProperty GradientStopsProperty = DependencyProperty.Lookup (Kind.GRADIENTBRUSH, "GradientStops", typeof (GradientStopCollection));
		public static readonly DependencyProperty MappingModeProperty = DependencyProperty.Lookup (Kind.GRADIENTBRUSH, "MappingMode", typeof (BrushMappingMode));
		public static readonly DependencyProperty SpreadMethodProperty = DependencyProperty.Lookup (Kind.GRADIENTBRUSH, "SpreadMethod", typeof (GradientSpreadMethod));
	}

	partial class GradientStop {
		public static readonly DependencyProperty ColorProperty = DependencyProperty.Lookup (Kind.GRADIENTSTOP, "Color", typeof (Color));
		public static readonly DependencyProperty OffsetProperty = DependencyProperty.Lookup (Kind.GRADIENTSTOP, "Offset", typeof (double));
	}

	partial class ImageBrush {
		public static readonly DependencyProperty DownloadProgressProperty = DependencyProperty.Lookup (Kind.IMAGEBRUSH, "DownloadProgress", typeof (double));
		public static readonly DependencyProperty ImageSourceProperty = DependencyProperty.Lookup (Kind.IMAGEBRUSH, "ImageSource", typeof (string));
	}

	partial class LinearGradientBrush {
		public static readonly DependencyProperty EndPointProperty = DependencyProperty.Lookup (Kind.LINEARGRADIENTBRUSH, "EndPoint", typeof (Point));
		public static readonly DependencyProperty StartPointProperty = DependencyProperty.Lookup (Kind.LINEARGRADIENTBRUSH, "StartPoint", typeof (Point));
	}

	partial class LineGeometry {
		public static readonly DependencyProperty EndPointProperty = DependencyProperty.Lookup (Kind.LINEGEOMETRY, "EndPoint", typeof (Point));
		public static readonly DependencyProperty StartPointProperty = DependencyProperty.Lookup (Kind.LINEGEOMETRY, "StartPoint", typeof (Point));
	}

	partial class LineSegment {
		public static readonly DependencyProperty PointProperty = DependencyProperty.Lookup (Kind.LINESEGMENT, "Point", typeof (Point));
	}

	partial class MatrixTransform {
		public static readonly DependencyProperty MatrixProperty = DependencyProperty.Lookup (Kind.MATRIXTRANSFORM, "Matrix", typeof (Matrix));
	}

	partial class PathFigure {
		public static readonly DependencyProperty IsClosedProperty = DependencyProperty.Lookup (Kind.PATHFIGURE, "IsClosed", typeof (bool));
		public static readonly DependencyProperty SegmentsProperty = DependencyProperty.Lookup (Kind.PATHFIGURE, "Segments", typeof (PathSegmentCollection));
		public static readonly DependencyProperty StartPointProperty = DependencyProperty.Lookup (Kind.PATHFIGURE, "StartPoint", typeof (Point));
	}

	partial class PathGeometry {
		public static readonly DependencyProperty FiguresProperty = DependencyProperty.Lookup (Kind.PATHGEOMETRY, "Figures", typeof (PathFigureCollection));
	}

	partial class PolyBezierSegment {
		public static readonly DependencyProperty PointsProperty = DependencyProperty.Lookup (Kind.POLYBEZIERSEGMENT, "Points", typeof (PointCollection));
	}

	partial class PolyLineSegment {
		public static readonly DependencyProperty PointsProperty = DependencyProperty.Lookup (Kind.POLYLINESEGMENT, "Points", typeof (PointCollection));
	}

	partial class PolyQuadraticBezierSegment {
		public static readonly DependencyProperty PointsProperty = DependencyProperty.Lookup (Kind.POLYQUADRATICBEZIERSEGMENT, "Points", typeof (PointCollection));
	}

	partial class QuadraticBezierSegment {
		public static readonly DependencyProperty Point1Property = DependencyProperty.Lookup (Kind.QUADRATICBEZIERSEGMENT, "Point1", typeof (Point));
		public static readonly DependencyProperty Point2Property = DependencyProperty.Lookup (Kind.QUADRATICBEZIERSEGMENT, "Point2", typeof (Point));
	}

	partial class RadialGradientBrush {
		public static readonly DependencyProperty CenterProperty = DependencyProperty.Lookup (Kind.RADIALGRADIENTBRUSH, "Center", typeof (Point));
		public static readonly DependencyProperty GradientOriginProperty = DependencyProperty.Lookup (Kind.RADIALGRADIENTBRUSH, "GradientOrigin", typeof (Point));
		public static readonly DependencyProperty RadiusXProperty = DependencyProperty.Lookup (Kind.RADIALGRADIENTBRUSH, "RadiusX", typeof (double));
		public static readonly DependencyProperty RadiusYProperty = DependencyProperty.Lookup (Kind.RADIALGRADIENTBRUSH, "RadiusY", typeof (double));
	}

	partial class RectangleGeometry {
		public static readonly DependencyProperty RadiusXProperty = DependencyProperty.Lookup (Kind.RECTANGLEGEOMETRY, "RadiusX", typeof (double));
		public static readonly DependencyProperty RadiusYProperty = DependencyProperty.Lookup (Kind.RECTANGLEGEOMETRY, "RadiusY", typeof (double));
		public static readonly DependencyProperty RectProperty = DependencyProperty.Lookup (Kind.RECTANGLEGEOMETRY, "Rect", typeof (Rect));
	}

	partial class RotateTransform {
		public static readonly DependencyProperty AngleProperty = DependencyProperty.Lookup (Kind.ROTATETRANSFORM, "Angle", typeof (double));
		public static readonly DependencyProperty CenterXProperty = DependencyProperty.Lookup (Kind.ROTATETRANSFORM, "CenterX", typeof (double));
		public static readonly DependencyProperty CenterYProperty = DependencyProperty.Lookup (Kind.ROTATETRANSFORM, "CenterY", typeof (double));
	}

	partial class ScaleTransform {
		public static readonly DependencyProperty CenterXProperty = DependencyProperty.Lookup (Kind.SCALETRANSFORM, "CenterX", typeof (double));
		public static readonly DependencyProperty CenterYProperty = DependencyProperty.Lookup (Kind.SCALETRANSFORM, "CenterY", typeof (double));
		public static readonly DependencyProperty ScaleXProperty = DependencyProperty.Lookup (Kind.SCALETRANSFORM, "ScaleX", typeof (double));
		public static readonly DependencyProperty ScaleYProperty = DependencyProperty.Lookup (Kind.SCALETRANSFORM, "ScaleY", typeof (double));
	}

	partial class SkewTransform {
		public static readonly DependencyProperty AngleXProperty = DependencyProperty.Lookup (Kind.SKEWTRANSFORM, "AngleX", typeof (double));
		public static readonly DependencyProperty AngleYProperty = DependencyProperty.Lookup (Kind.SKEWTRANSFORM, "AngleY", typeof (double));
		public static readonly DependencyProperty CenterXProperty = DependencyProperty.Lookup (Kind.SKEWTRANSFORM, "CenterX", typeof (double));
		public static readonly DependencyProperty CenterYProperty = DependencyProperty.Lookup (Kind.SKEWTRANSFORM, "CenterY", typeof (double));
	}

	partial class SolidColorBrush {
		public static readonly DependencyProperty ColorProperty = DependencyProperty.Lookup (Kind.SOLIDCOLORBRUSH, "Color", typeof (Color));
	}

	partial class TileBrush {
		public static readonly DependencyProperty AlignmentXProperty = DependencyProperty.Lookup (Kind.TILEBRUSH, "AlignmentX", typeof (AlignmentX));
		public static readonly DependencyProperty AlignmentYProperty = DependencyProperty.Lookup (Kind.TILEBRUSH, "AlignmentY", typeof (AlignmentY));
		public static readonly DependencyProperty StretchProperty = DependencyProperty.Lookup (Kind.TILEBRUSH, "Stretch", typeof (Stretch));
	}

	partial class TimelineMarker {
		public static readonly DependencyProperty TextProperty = DependencyProperty.Lookup (Kind.TIMELINEMARKER, "Text", typeof (string));
		public static readonly DependencyProperty TimeProperty = DependencyProperty.Lookup (Kind.TIMELINEMARKER, "Time", typeof (TimeSpan));
		public static readonly DependencyProperty TypeProperty = DependencyProperty.Lookup (Kind.TIMELINEMARKER, "Type", typeof (string));
	}

	partial class TransformGroup {
		public static readonly DependencyProperty ChildrenProperty = DependencyProperty.Lookup (Kind.TRANSFORMGROUP, "Children", typeof (TransformCollection));
	}

	partial class TranslateTransform {
		public static readonly DependencyProperty XProperty = DependencyProperty.Lookup (Kind.TRANSLATETRANSFORM, "X", typeof (double));
		public static readonly DependencyProperty YProperty = DependencyProperty.Lookup (Kind.TRANSLATETRANSFORM, "Y", typeof (double));
	}

	partial class VideoBrush {
		public static readonly DependencyProperty SourceNameProperty = DependencyProperty.Lookup (Kind.VIDEOBRUSH, "SourceName", typeof (string));
	}
}

namespace System.Windows.Media.Animation {
	partial class BeginStoryboard {
		public static readonly DependencyProperty StoryboardProperty = DependencyProperty.Lookup (Kind.BEGINSTORYBOARD, "Storyboard", typeof (Storyboard));
	}

	partial class ColorAnimation {
		public static readonly DependencyProperty ByProperty = DependencyProperty.Lookup (Kind.COLORANIMATION, "By", typeof (Nullable<Color>));
		public static readonly DependencyProperty FromProperty = DependencyProperty.Lookup (Kind.COLORANIMATION, "From", typeof (Nullable<Color>));
		public static readonly DependencyProperty ToProperty = DependencyProperty.Lookup (Kind.COLORANIMATION, "To", typeof (Nullable<Color>));
	}

	partial class ColorAnimationUsingKeyFrames {
		public static readonly DependencyProperty KeyFramesProperty = DependencyProperty.Lookup (Kind.COLORANIMATIONUSINGKEYFRAMES, "KeyFrames", typeof (ColorKeyFrameCollection));
	}

	partial class ColorKeyFrame {
		public static readonly DependencyProperty ValueProperty = DependencyProperty.Lookup (Kind.COLORKEYFRAME, "Value", typeof (Nullable<Color>));
	}

	partial class DoubleAnimation {
		public static readonly DependencyProperty ByProperty = DependencyProperty.Lookup (Kind.DOUBLEANIMATION, "By", typeof (Nullable<double>));
		public static readonly DependencyProperty FromProperty = DependencyProperty.Lookup (Kind.DOUBLEANIMATION, "From", typeof (Nullable<double>));
		public static readonly DependencyProperty ToProperty = DependencyProperty.Lookup (Kind.DOUBLEANIMATION, "To", typeof (Nullable<double>));
	}

	partial class DoubleAnimationUsingKeyFrames {
		public static readonly DependencyProperty KeyFramesProperty = DependencyProperty.Lookup (Kind.DOUBLEANIMATIONUSINGKEYFRAMES, "KeyFrames", typeof (DoubleKeyFrameCollection));
	}

	partial class DoubleKeyFrame {
		public static readonly DependencyProperty ValueProperty = DependencyProperty.Lookup (Kind.DOUBLEKEYFRAME, "Value", typeof (Nullable<double>));
	}

	partial class KeyFrame {
		public static readonly DependencyProperty KeyTimeProperty = DependencyProperty.Lookup (Kind.KEYFRAME, "KeyTime", typeof (Nullable<KeyTime>));
	}

	partial class PointAnimation {
		public static readonly DependencyProperty ByProperty = DependencyProperty.Lookup (Kind.POINTANIMATION, "By", typeof (Nullable<Point>));
		public static readonly DependencyProperty FromProperty = DependencyProperty.Lookup (Kind.POINTANIMATION, "From", typeof (Nullable<Point>));
		public static readonly DependencyProperty ToProperty = DependencyProperty.Lookup (Kind.POINTANIMATION, "To", typeof (Nullable<Point>));
	}

	partial class PointAnimationUsingKeyFrames {
		public static readonly DependencyProperty KeyFramesProperty = DependencyProperty.Lookup (Kind.POINTANIMATIONUSINGKEYFRAMES, "KeyFrames", typeof (PointKeyFrameCollection));
	}

	partial class PointKeyFrame {
		public static readonly DependencyProperty ValueProperty = DependencyProperty.Lookup (Kind.POINTKEYFRAME, "Value", typeof (Nullable<Point>));
	}

	partial class SplineColorKeyFrame {
		public static readonly DependencyProperty KeySplineProperty = DependencyProperty.Lookup (Kind.SPLINECOLORKEYFRAME, "KeySpline", typeof (KeySpline));
	}

	partial class SplineDoubleKeyFrame {
		public static readonly DependencyProperty KeySplineProperty = DependencyProperty.Lookup (Kind.SPLINEDOUBLEKEYFRAME, "KeySpline", typeof (KeySpline));
	}

	partial class SplinePointKeyFrame {
		public static readonly DependencyProperty KeySplineProperty = DependencyProperty.Lookup (Kind.SPLINEPOINTKEYFRAME, "KeySpline", typeof (KeySpline));
	}

	partial class Storyboard {
		public static readonly DependencyProperty TargetNameProperty = DependencyProperty.Lookup (Kind.STORYBOARD, "TargetName", typeof (string));
		public static readonly DependencyProperty TargetPropertyProperty = DependencyProperty.Lookup (Kind.STORYBOARD, "TargetProperty", typeof (string));
	}

	partial class Timeline {
		public static readonly DependencyProperty AutoReverseProperty = DependencyProperty.Lookup (Kind.TIMELINE, "AutoReverse", typeof (bool));
		public static readonly DependencyProperty BeginTimeProperty = DependencyProperty.Lookup (Kind.TIMELINE, "BeginTime", typeof (Nullable<TimeSpan>));
		public static readonly DependencyProperty DurationProperty = DependencyProperty.Lookup (Kind.TIMELINE, "Duration", typeof (Duration));
		public static readonly DependencyProperty FillBehaviorProperty = DependencyProperty.Lookup (Kind.TIMELINE, "FillBehavior", typeof (FillBehavior));
		public static readonly DependencyProperty RepeatBehaviorProperty = DependencyProperty.Lookup (Kind.TIMELINE, "RepeatBehavior", typeof (RepeatBehavior));
		public static readonly DependencyProperty SpeedRatioProperty = DependencyProperty.Lookup (Kind.TIMELINE, "SpeedRatio", typeof (double));
	}

	partial class TimelineGroup {
		public static readonly DependencyProperty ChildrenProperty = DependencyProperty.Lookup (Kind.TIMELINEGROUP, "Children", typeof (TimelineCollection));
	}
}

namespace System.Windows.Shapes {
	partial class Line {
		public static readonly DependencyProperty X1Property = DependencyProperty.Lookup (Kind.LINE, "X1", typeof (double));
		public static readonly DependencyProperty X2Property = DependencyProperty.Lookup (Kind.LINE, "X2", typeof (double));
		public static readonly DependencyProperty Y1Property = DependencyProperty.Lookup (Kind.LINE, "Y1", typeof (double));
		public static readonly DependencyProperty Y2Property = DependencyProperty.Lookup (Kind.LINE, "Y2", typeof (double));
	}

	partial class Path {
		public static readonly DependencyProperty DataProperty = DependencyProperty.Lookup (Kind.PATH, "Data", typeof (Geometry));
	}

	partial class Polygon {
		public static readonly DependencyProperty FillRuleProperty = DependencyProperty.Lookup (Kind.POLYGON, "FillRule", typeof (FillRule));
		public static readonly DependencyProperty PointsProperty = DependencyProperty.Lookup (Kind.POLYGON, "Points", typeof (PointCollection));
	}

	partial class Polyline {
		public static readonly DependencyProperty FillRuleProperty = DependencyProperty.Lookup (Kind.POLYLINE, "FillRule", typeof (FillRule));
		public static readonly DependencyProperty PointsProperty = DependencyProperty.Lookup (Kind.POLYLINE, "Points", typeof (PointCollection));
	}

	partial class Rectangle {
		public static readonly DependencyProperty RadiusXProperty = DependencyProperty.Lookup (Kind.RECTANGLE, "RadiusX", typeof (double));
		public static readonly DependencyProperty RadiusYProperty = DependencyProperty.Lookup (Kind.RECTANGLE, "RadiusY", typeof (double));
	}

	partial class Shape {
		public static readonly DependencyProperty FillProperty = DependencyProperty.Lookup (Kind.SHAPE, "Fill", typeof (Brush));
		public static readonly DependencyProperty StretchProperty = DependencyProperty.Lookup (Kind.SHAPE, "Stretch", typeof (Stretch));
		public static readonly DependencyProperty StrokeDashArrayProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeDashArray", typeof (DoubleCollection));
		public static readonly DependencyProperty StrokeDashCapProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeDashCap", typeof (PenLineCap));
		public static readonly DependencyProperty StrokeDashOffsetProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeDashOffset", typeof (double));
		public static readonly DependencyProperty StrokeEndLineCapProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeEndLineCap", typeof (PenLineCap));
		public static readonly DependencyProperty StrokeLineJoinProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeLineJoin", typeof (PenLineJoin));
		public static readonly DependencyProperty StrokeMiterLimitProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeMiterLimit", typeof (double));
		public static readonly DependencyProperty StrokeProperty = DependencyProperty.Lookup (Kind.SHAPE, "Stroke", typeof (Brush));
		public static readonly DependencyProperty StrokeStartLineCapProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeStartLineCap", typeof (PenLineCap));
		public static readonly DependencyProperty StrokeThicknessProperty = DependencyProperty.Lookup (Kind.SHAPE, "StrokeThickness", typeof (double));
	}
}
