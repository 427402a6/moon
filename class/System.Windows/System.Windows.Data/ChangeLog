2010-03-01  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Remove two FIXMEs which have been
	  dealt with.

2010-03-01  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathParser.cs: Fix the test so it passes on SL and
	  then make our code throw the right exception.

2010-02-25  Alan McGovern  <amcgovern@novell.com>

	* BindingOperations.cs: Add some tests for the
	  BindingOperations class and fix the implementation
	  accordingly.

2010-02-25  Alan McGovern  <amcgovern@novell.com>

	* BindingOperations.cs: Add an initial implementation of
	  BindingOperations to get some sites going.

2010-02-19  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* PropertyNodeType.cs:
	* IPropertyPathNode.cs:
	* PropertyPathWalker.cs:
	* PropertyPathParser.cs:
	* IndexedPropertyPathNode.cs:
	* StandardPropertyPathNode.cs: Add a separate
	  PropertyPathParser class so that PropertyPaths can be parsed
	  into their component pieces and also throw exceptions in the
	  right places. 

2010-02-19  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* IndexedPropertyPathNode.cs: Add missing license header to
	  two files.

2010-02-19  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathWalker.cs:
	* StandardPropertyPathNode.cs: Add support for binding to
	  attached DPs. The error handling isn't correct yet, but
	  valid bindings should parse fine.

2010-02-19  Alan McGovern  <amcgovern@novell.com>

	* StandardPropertyPathNode.cs: Refactor DP.Lookup so that we
	  can have a TryLookup method which doesn't throw exceptions.
	  This removes a lot of annoying spew when databinding CLR
	  properties which don't have a backing DP.

2010-02-15  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Merge
	  TemplateBindingExpression.UpdatingTarget and
	  BindingExpressionBase.UpdatingSource into
	  Expression.Updating. The variables mean the same thing and
	  it simplifies some of our logic.

2010-02-15  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: BindingExpressions shouldn't do
	  setup in their constructor as they can be detached from one
	  FrameworkElement and attached to another and they should
	  still work. 

2010-02-10  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Unregress drt 508 by disconnecting
	  the property path listener when the binding is destroyed.

2010-02-09  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs:
	* IndexedPropertyPathNode.cs:
	* StandardPropertyPathNode.cs: When we set a binding like:
	  fe.SetBinding (SomeClass.SomeProperty, binding), we only
	  listen for property changed notifications on 'SomeProperty'
	  if it's a user registered DP. Otherwise we do the usual
	  thing and only update the source of the binding inside
	  FrameworkElement.SetValueImpl.

2010-02-09  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* CollectionViewSource.cs: Fix compiler warnings.

2010-02-08  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* StandardPropertyPathNode.cs: Add better support for
	  databinding to a DP directly or via its string name.

2010-02-04  Alan McGovern  <amcgovern@novell.com>

	* StandardPropertyPathNode.cs: Make StandardPropertyPath look
	  for a DependencyProperty rather than just a PropertyInfo so
	  that it can listen for property changed events. This fixes
	  the volume control slider in olympics.

2010-02-04  Alan McGovern  <amcgovern@novell.com>

	* StandardPropertyPathNode.cs: Remove duplicate code.

2010-02-01  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* IPropertyPathNode.cs:
	* PropertyPathWalker.cs:
	* IndexedPropertyPathNode.cs:
	* StandardPropertyPathNode.cs: Make the new classes internal
	  and also put them in the right namespace.

2010-02-01  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* IPropertyPathNode.cs:
	* PropertyPathWalker.cs:
	* BindingExpressionBase.cs:
	* IndexedPropertyPathNode.cs:
	* StandardPropertyPathNode.cs: Split PropertyPathNode into
	  StandardPropertyPathNode and IndexedPropertyPathNode. This
	  way a path like "List[0].Name" is split into three nodes:
	  "List" "[0]" and "Name". This simplifies the logic required
	  to update the source in a two way binding. Indexed nodes
	  also need to hook into INotifyCollectionChanged if that
	  interface has been implemented.

2010-02-01  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Move code which requires elevated
	  security attributes out of an anonymous delegate so the sec.
	  attrs. dont get messed up.

2010-02-01  Alan McGovern  <amcgovern@novell.com>

	* PropertyPathNode.cs:
	* PropertyPathWalker.cs:
	* BindingExpressionBase.cs: Refactor the BindingExpression
	  code so that any objects which implement
	  INotifyPropertyChanged in the property path are monitored
	  for changes so that the BindingExpression can update when
	  the relevant properties are modified. This is implemented by
	  creating a linked list of PropertyPathNodes, each of which
	  represents a segment of the PropertyPath. Each node
	  hooks/unhooks from INotifyPropertyChanged and updates its
	  child nodes when a change is detected.

2010-01-29  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Add much better handling for
	  property paths which contain objects implementing
	  INotifyPropertyChanged. We can still fail for the case where
	  a property path contains objects with and without INPC as we
	  invalidate too aggressively. Fixes some issues in the
	  olympics player.

2010-01-29  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Add a testcase for when we
	  databind to a property like "A.B.C" and 'B' is an object
	  implementing INotifyPropertyChanged. In this case we need to
	  attach our INPC handlers to 'B' as opposed to the source
	  object (Binding.Source/DataContext etc) of the Binding.

2010-01-26  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: The method access check should be
	  done by the security system, not manually.

2010-01-14  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Get rid of some of the bonus API
	  points we've accumulated.

2010-01-12  Alan McGovern  <amcgovern@novell.com>

	* BindingExpression.cs:
	* BindingExpressionBase.cs: Implement support for explicitly
	  updated two way bindings and add tests to cover that.

2010-01-11  Alan McGovern  <amcgovern@novell.com>

	* BindingExpression.cs: Implement and add tests for the new
	  ParentBinding and DataItem properties in BindingExpression.

2010-01-07  Jeffrey Stedfast  <fejj@novell.com>

	* CollectionViewSource.cs, FilterEventArgs.cs,
	FilterEventHandler.cs: Added.

2009-12-31  Sebastien Pouliot  <sebastien@ximian.com>

	* BindingExpressionBase.cs: Use faster char overload when using
	LastIndexOf (gendarme)

2009-12-15  Jeffrey Stedfast  <fejj@novell.com>

	* Binding.cs: Added BindsDirectlyToSource property (not hooked up
	to anything).

	* BindingBase.cs: New source file.

2009-12-10  Chris Toshok  <toshok@ximian.com>

	* BindingExpressionBase.cs (ConvertToType): pass true for
	@doToStringConversion.

2009-12-02  Alan McGovern  <amcgovern@novell.com>

	* Binding.cs:
	* RelativeSource.cs:
	* BindingExpressionBase.cs: Implement support for
	  RelativeSource based bindings.

2009-12-02  Alan McGovern  <amcgovern@novell.com>

	* Binding.cs:
	* BindingExpressionBase.cs: Add provisional support for the
	  SL3 Binding.ElementName API.

2009-12-02  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: ContentPresenter copies its
	  Content to its DataContext whenever it isn't a UIElement,
	  therefore if we're databinding the Content property we need
	  to use the parent DataContext in order to get the correct
	  value.

2009-11-09  Chris Toshok  <toshok@ximian.com>

	* BindingExpression.cs: stub UpdateSource method.

	* Binding.cs: stub UpdateSourceTrigger property.

	r: rolf

2009-10-05  Jackson Harper  <jackson@ximian.com>

	* BindingExpression.cs: This is a public class in 3.0 (constructor
	is not though).

2009-09-29  Jackson Harper  <jackson@ximian.com>

	* BindingExpressionBase.cs: Implement indexed property paths. r: spouliot

2009-08-05  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: When a binding has been applied to
	  the DataContext property, we need to use the DataContext of
	  the parent element.

2009-07-29  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If a two way binding is attached
	  to TextBox.Text we should not update the source while the
	  textbox has focus.

2009-06-30  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: OneTime bindings can be
	  invalidated and they do reflect the new value.

2009-06-23  Alan McGovern  <amcgovern@novell.com>

	* Binding.cs: Don't null check value before using it, we
	  should throw a nullref if it's null.

2009-05-20  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: DataBinding and ManagedXamlLoader
	  use exactly the same type conversion as Styles and
	  ObjectKeyFrames - so merge both of them to use
	  MoonlightTypeConverter. This also fixes several
	  typeconversion related databinding issues.

2009-05-19  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Handle invalid values returned
	  from IValueConverters properly.

2009-05-15  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Properly handle exceptions when
	  updating the source in a 2 way binding. Raise the
	  BindingValidationError event in the right place.

2009-05-13  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If we have a property path like
	  "A.B.C" and the object 'B' is null, we should bail out with
	  failure.

2009-05-03  Chris Toshok  <toshok@ximian.com>

	* BindingExpressionBase.cs rename Updating/updating to
	UpdatingSource/updatingSource to better communicate what it means,
	and make a couple of properties internal instead of private (they
	weren't used anywhere else anyway.)
	(Dispose): make sure to unhook from the PropertyChanged event too
	so that we don't continue updating our target after we've been
	disposed.

	* BindingExpression.cs: remove all the commented out code.

2009-04-03  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Fix a few type converting issues
	  with two way bindings which are now revealed by the datagrid
	  tests.

2009-04-01  Alan McGovern  <amcgovern@novell.com>

	* BindingExpression.cs:
	* BindingExpressionBase.cs: TextBox only updates a two way
	  binding when it loses focus, so we need to hook into the
	  LostFocus event. Add an internal
	  BindingExpressionBase.Dispose method so that we can ensure
	  we detach from this event when the binding is removed.

2009-04-01  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If we're updating a two way
	  binding, don't invoke the setter if the old value is the
	  same as the new value.

2009-03-26  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If we can't convert the value to
	  the correct type, bail out without throwing an exception.

2009-03-26  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If the datasource in a two way
	  binding doesn't exist, just return immediately. Fixes
	  several datagrid issues.

2009-03-25  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Null check value before
	  referencing it. Allows a datagrid test to complete
	  successfully.

2009-03-25  Geoff Norton  <gnorton@novell.com>

	* Binding.cs: Bindings are 100% managed now, so we need some
	local managed members here to hold some of the values that
	used to live in native.

2009-03-24  Alan McGovern  <amcgovern@novell.com>

	* Binding.cs: Bindings cannot use PropertyPaths which are
	  instantiated with DependencyProperties, they must be
	  instantiated with a string.

2009-03-24  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: 1) When updating from an
	  INotifyPropertyChanged, mark the binding as 'Updating' so
	  that it doesn't get removed when calling
	  Target.SetValueImpl.
	2) If the target property doesn't exist (invalid binding or
	  source hasn't been set), then ignore the property changed
	  notification.

2009-02-26  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: Use Helper.DefaultCulture
	rather than declaring it here.

* BindingExpressionBase.cs: When updating from a two-way binding,
ensure we properly typeconvert from source type to dest type.

2009-03-13  Geoff Norton  <gnorton@novell.com>

	* Binding.cs: Ensure we ref, if we're going to unref

2009-02-26  Chris Toshok  <toshok@ximian.com>

	* BindingExpressionBase.cs (GetValue): mark this an override.

2009-02-26  Alan McGovern  <amcgovern@novell.com>

	* BindingExpressionBase.cs: If the property path is invalid,
	  we should bail out early and just return DP.DefaultValue.

2009-02-23  Jackson Harper  <jackson@ximian.com>

	* BindingExpressionBase.cs: If the user supplied ValueConverter
	doesn't work, try using our value converter.

2009-02-20  Jeffrey Stedfast  <fejj@novell.com>

	* Binding.cs: Throw ArgumentNullException if path is null.

2009-02-08  Chris Toshok  <toshok@ximian.com>

	* System.Windows.Data/BindingExpressionBase.cs: clean this up a
	bit, use the default value converter, rename Target <-> Source to
	match SL terminology, and remove a bunch of commented out code.
