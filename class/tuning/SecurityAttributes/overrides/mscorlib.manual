# manual override file for [SecurityCritical] and  [SecuritySafeCritical] attributes

# available on SL2 (even if it returns an IntPtr that cannot be cast back to a GCHandle)
-SC-M: System.IntPtr System.Runtime.InteropServices.GCHandle::op_Explicit(System.Runtime.InteropServices.GCHandle)
# but since it calls IntPtr::op_Explicit (SecurityCritical) we turn it into a SecuritySafeCritical
+SSC-M: System.IntPtr System.Runtime.InteropServices.GCHandle::op_Explicit(System.Runtime.InteropServices.GCHandle)

# use Activator.CreateInstance to create (inaccessible) GenericEqualityComparer<T>
+SSC-M: System.Void System.Collections.Generic.EqualityComparer`1::.cctor()

# corlib now use (internal)SafeFileHandle which inherits a SC type (SafeHandleZeroOrMinusOneIsInvalid)
+SC-T: Microsoft.Win32.SafeHandles.SafeFileHandle

# corlib calls System.Windows.Application.OnUnhandledException using reflection
+SSC-M: System.Void System.Threading.Thread::MoonlightUnhandledException(System.Exception)

# delegate checks are at creation, not invoke, time. this makes [Multicast]Delegate.DynamicInvoke [SecuritySafeCritical] methods
+SC-M: System.Object System.Delegate::DynamicInvokeImpl(System.Object[])

# deserializable between threads (e.g. CurrentCulture) requires reflection
+SSC-M: System.Void System.Runtime.Serialization.Formatters.Binary.ObjectReader::SetObjectValue(System.Object,System.String,System.Reflection.MemberInfo,System.Runtime.Serialization.SerializationInfo,System.Object,System.Type,System.Int32[])

# 5 Module methods depends on this icall - GetField[s], GetMethod[Impl][s]
-SC-M: System.Type System.Reflection.Module::GetGlobalType()
+SSC-M: System.Type System.Reflection.Module::GetGlobalType()

# types unavailable in ML2 but that we can't easily remove from Mono's mscorlib.dll
+SC-T: System.ArgIterator
+SC-T: System.Runtime.Remoting.Activation.ActivationServices
+SC-T: System.Runtime.Remoting.Activation.AppDomainLevelActivator
+SC-T: System.Runtime.Remoting.Activation.ConstructionLevelActivator
+SC-T: System.Runtime.Remoting.Activation.ContextLevelActivator
+SC-T: System.Runtime.Remoting.Activation.RemoteActivator
+SC-T: System.Runtime.Remoting.ChannelInfo
+SC-T: System.Runtime.Remoting.Channels.CADSerializer
+SC-T: System.Runtime.Remoting.Channels.ChannelServices
+SC-T: System.Runtime.Remoting.Channels.CrossAppDomainChannel
+SC-T: System.Runtime.Remoting.Channels.CrossAppDomainData
+SC-T: System.Runtime.Remoting.Channels.CrossAppDomainSink
+SC-T: System.Runtime.Remoting.ClientActivatedIdentity
+SC-T: System.Runtime.Remoting.ClientIdentity
+SC-T: System.Runtime.Remoting.ConfigHandler
+SC-T: System.Runtime.Remoting.Contexts.Context
+SC-T: System.Runtime.Remoting.Contexts.ContextAttribute
+SC-T: System.Runtime.Remoting.Contexts.CrossContextChannel
+SC-T: System.Runtime.Remoting.Contexts.SynchronizationAttribute
+SC-T: System.Runtime.Remoting.Contexts.SynchronizedClientContextSink
+SC-T: System.Runtime.Remoting.Contexts.SynchronizedContextReplySink
+SC-T: System.Runtime.Remoting.Contexts.SynchronizedServerContextSink
+SC-T: System.Runtime.Remoting.InternalRemotingServices
+SC-T: System.Runtime.Remoting.Lifetime.Lease
+SC-T: System.Runtime.Remoting.Lifetime.LeaseManager
+SC-T: System.Runtime.Remoting.Lifetime.LeaseSink
+SC-T: System.Runtime.Remoting.Lifetime.LifetimeServices
+SC-T: System.Runtime.Remoting.Messaging.CADMessageBase
+SC-T: System.Runtime.Remoting.Messaging.CADMethodCallMessage
+SC-T: System.Runtime.Remoting.Messaging.CADMethodReturnMessage
+SC-T: System.Runtime.Remoting.Messaging.CADObjRef
+SC-T: System.Runtime.Remoting.Messaging.ClientContextReplySink
+SC-T: System.Runtime.Remoting.Messaging.ClientContextTerminatorSink
+SC-T: System.Runtime.Remoting.Messaging.ConstructionCall
+SC-T: System.Runtime.Remoting.Messaging.ConstructionResponse
+SC-T: System.Runtime.Remoting.Messaging.EnvoyTerminatorSink
+SC-T: System.Runtime.Remoting.Messaging.MethodCall
+SC-T: System.Runtime.Remoting.Messaging.MethodResponse
+SC-T: System.Runtime.Remoting.Messaging.ObjRefSurrogate
+SC-T: System.Runtime.Remoting.Messaging.RemotingSurrogate
+SC-T: System.Runtime.Remoting.Messaging.RemotingSurrogateSelector
+SC-T: System.Runtime.Remoting.Messaging.ServerContextTerminatorSink
+SC-T: System.Runtime.Remoting.Messaging.ServerObjectTerminatorSink
+SC-T: System.Runtime.Remoting.Messaging.StackBuilderSink
+SC-T: System.Runtime.Remoting.Metadata.SoapMethodAttribute
+SC-T: System.Runtime.Remoting.Metadata.SoapTypeAttribute
+SC-T: System.Runtime.Remoting.ObjRef
+SC-T: System.Runtime.Remoting.Proxies.ProxyAttribute
+SC-T: System.Runtime.Remoting.Proxies.RealProxy
+SC-T: System.Runtime.Remoting.Proxies.RemotingProxy
+SC-T: System.Runtime.Remoting.RemotingConfiguration
+SC-T: System.Runtime.Remoting.RemotingServices
+SC-T: System.Runtime.Remoting.ServerIdentity
+SC-T: System.Runtime.Remoting.SingleCallIdentity
+SC-T: System.Runtime.Remoting.SingletonIdentity
+SC-T: System.Runtime.Remoting.SoapServices
+SC-T: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+SC-T: System.Runtime.Serialization.Formatters.Binary.CodeGenerator
+SC-T: System.Runtime.Serialization.Formatters.Binary.MemberTypeMetadata
+SC-T: System.Runtime.Serialization.Formatters.Binary.MessageFormatter
+SC-T: System.Runtime.Serialization.Formatters.Binary.SerializableTypeMetadata
+SC-T: System.Runtime.Serialization.FormatterServices
+SC-T: System.Runtime.Serialization.ObjectIDGenerator
+SC-T: System.Runtime.Serialization.ObjectIDGenerator/InstanceComparer
+SC-T: System.Threading.Mutex

# needed by smcs/SRE but not available in ML API
+SC-M: System.Boolean Mono.Security.StrongName::Sign(System.String)
+SC-T: System.Resources.ResourceReader
+SC-T: System.Resources.ResourceWriter
+SC-T: System.Resources.RuntimeResourceSet
+SC-M: System.Resources.IResourceWriter System.Reflection.Emit.AssemblyBuilder::DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::DefineUnmanagedResource(System.String)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::DefineIconResource(System.String)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::EmbedResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)
+SC-M: System.Reflection.Module System.Reflection.Emit.AssemblyBuilder::AddModule(System.String)
+SC-M: System.Resources.IResourceWriter System.Reflection.Emit.AssemblyBuilder::DefineResource(System.String,System.String,System.String)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::Save(System.String)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::check_name_and_filename(System.String,System.String,System.Boolean)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes,System.Boolean)
+SC-M: System.Void System.Reflection.Emit.AssemblyBuilder::EmbedResourceFile(System.String,System.String)
+SC-M: System.Resources.IResourceWriter System.Reflection.Emit.ModuleBuilder::DefineResource(System.String,System.String)
+SC-M: System.Resources.IResourceWriter System.Reflection.Emit.ModuleBuilder::DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)
+SC-M: System.IO.UnmanagedMemoryStream System.Resources.ResourceSet::GetStream(System.String,System.Boolean)
+SC-M: System.Void System.ModuleHandle::GetPEKind(System.Reflection.PortableExecutableKinds&,System.Reflection.ImageFileMachine&)
+SC-M: System.Void System.Reflection.Module::GetPEKind(System.Reflection.PortableExecutableKinds&,System.Reflection.ImageFileMachine&)

# extra, non-safe, non-visible methods
+SC-M: System.String System.AppDomainSetup::GetAppBase(System.String)
+SC-M: System.Void System.AppDomain::ProcessMessageInDomain(System.Byte[],System.Runtime.Remoting.Messaging.CADMethodCallMessage,System.Byte[]&,System.Runtime.Remoting.Messaging.CADMethodReturnMessage&)
+SC-M: System.Runtime.Remoting.Identity System.MarshalByRefObject::GetObjectIdentity(System.MarshalByRefObject,System.Boolean&)
+SC-M: System.Runtime.Remoting.ObjRef System.MarshalByRefObject::CreateObjRef(System.Type)
+SC-M: System.Object System.MarshalByRefObject::GetLifetimeService()
+SC-M: System.Object System.MarshalByRefObject::InitializeLifetimeService()
+SC-M: System.Boolean System.IO.MonoIO::Exists(System.String,System.IO.MonoIOError&)
+SC-M: System.Boolean System.IO.MonoIO::ExistsFile(System.String,System.IO.MonoIOError&)
+SC-M: System.Boolean System.IO.MonoIO::ExistsDirectory(System.String,System.IO.MonoIOError&)
+SC-M: System.Boolean System.IO.MonoIO::ExistsSymlink(System.String,System.IO.MonoIOError&)
+SC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::BuildTailoringTables(System.Globalization.CultureInfo,Mono.Globalization.Unicode.TailoringInfo,Mono.Globalization.Unicode.Contraction[]&,Mono.Globalization.Unicode.Level2Map[]&)
+SC-M: System.IntPtr Mono.Globalization.Unicode.MSCompatUnicodeTable::GetResource(System.String)
+SC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::FillCJKCore(System.String,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&,System.Byte*&,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&)
+SC-M: System.Globalization.SortKey Mono.Globalization.Unicode.SimpleCollator::GetSortKey(System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
+SC-M: System.Boolean Mono.Globalization.Unicode.SimpleCollator::IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
+SC-M: System.Boolean Mono.Globalization.Unicode.SimpleCollator::IsSuffix(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
+SC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::FillCJK(System.String,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&,System.Byte*&,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&)
+SC-M: System.Void Mono.Globalization.Unicode.SimpleCollator::.ctor(System.Globalization.CultureInfo)
+SC-M: System.Globalization.SortKey Mono.Globalization.Unicode.SimpleCollator::GetSortKey(System.String,System.Globalization.CompareOptions)
+SC-M: System.Boolean Mono.Globalization.Unicode.SimpleCollator::IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
+SC-M: System.Void Mono.Globalization.Unicode.SimpleCollator::SetCJKTable(System.Globalization.CultureInfo,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&,System.Byte*&,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&)
+SC-M: System.Int32 System.Runtime.Serialization.Formatters.Binary.ObjectWriter::RegisterAssembly(System.String,System.Boolean&)
+SC-M: System.IO.DirectoryInfo System.IO.Directory::CreateDirectoriesInternal(System.String)
+SC-M: System.Void System.IO.Directory::RecursiveDelete(System.String)
+SC-M: Microsoft.Win32.SafeHandles.SafeFileHandle System.IO.FileStream::get_SafeFileHandle()
+SC-M: System.Globalization.SortKey System.Globalization.CompareInfo::GetSortKey(System.String,System.Globalization.CompareOptions)
+SC-M: System.Globalization.SortKey System.Globalization.CompareInfo::GetSortKey(System.String)
+SC-M: System.Void System.IO.FileStream::Lock(System.Int64,System.Int64)
+SC-M: System.Void System.IO.FileStream::Unlock(System.Int64,System.Int64)
+SC-M: System.IO.FileAttributes System.IO.File::GetAttributes(System.String)
+SC-M: System.String System.Environment::get_CommandLine()
+SC-M: System.String System.Environment::get_UserDomainName()
+SC-M: System.String System.Environment::GetEnvironmentVariable(System.String)
+SC-M: System.Collections.Hashtable System.Environment::GetEnvironmentVariablesNoCase()
+SC-M: System.Collections.IDictionary System.Environment::GetEnvironmentVariables()
+SC-M: System.String[] System.Environment::GetLogicalDrives()
+SC-M: System.String System.Environment::ReadXdgUserDir(System.String,System.String,System.String,System.String)
+SC-M: System.String System.Environment::ExpandEnvironmentVariables(System.String)
+SC-M: System.String System.Environment::InternalGetFolderPath(System.Environment/SpecialFolder)
+SC-M: System.Void System.GC::Collect(System.Int32)
+SC-M: System.Void System.GC::Collect(System.Int32,System.GCCollectionMode)
+SC-M: System.Void System.GC::AddMemoryPressure(System.Int64)
+SC-M: System.Void System.GC::RemoveMemoryPressure(System.Int64)
+SC-M: System.Int32 System.GC::GetGeneration(System.WeakReference)
+SC-M: System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
+SC-M: System.Object System.Activator::CreateInstance(System.Type,System.Boolean)
+SC-M: System.Object System.Activator::CreateInstance(System.Type,System.Object[],System.Object[])
+SC-M: System.Object System.Activator::CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
+SC-M: System.Object System.Reflection.Assembly::CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::ReflectionOnlyLoadFrom(System.String)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::ReflectionOnlyLoad(System.Byte[])
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::ReflectionOnlyLoad(System.String)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadFrom(System.String,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadWithPartialName(System.String,System.Security.Policy.Evidence,System.Boolean)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadWithPartialName(System.String,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadWithPartialName(System.String)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::Load(System.String,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadFile(System.String,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::LoadFile(System.String)
+SC-M: System.Reflection.ManifestResourceInfo System.Reflection.Assembly::GetManifestResourceInfo(System.String)
+SC-M: System.Reflection.Assembly System.AppDomain::LoadSatellite(System.Reflection.AssemblyName)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.String,System.Security.Policy.Evidence,System.Boolean)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence,System.Boolean)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Reflection.AssemblyName)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.String)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.String,System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Byte[])
+SC-M: System.Reflection.Assembly System.AppDomain::Load(System.Byte[],System.Byte[])
+SC-M: System.Object System.AppDomain::InvokeInDomain(System.AppDomain,System.Reflection.MethodInfo,System.Object,System.Object[])
+SC-M: System.Object System.AppDomain::InvokeInDomainByID(System.Int32,System.Reflection.MethodInfo,System.Object,System.Object[])
+SC-M: System.Int32 System.AppDomain::ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])
+SC-M: System.Int32 System.AppDomain::ExecuteAssemblyInternal(System.Reflection.Assembly,System.String[])
+SC-M: System.Int32 System.AppDomain::ExecuteAssembly(System.String,System.Security.Policy.Evidence)
+SC-M: System.Int32 System.AppDomain::ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
+SC-M: System.Int32 System.AppDomain::ExecuteAssembly(System.String)
+SC-M: System.Reflection.Assembly[] System.AppDomain::GetAssemblies()
+SC-M: System.String System.Reflection.Assembly::GetCodeBase(System.Boolean)
+SC-M: System.Reflection.Assembly System.Reflection.Assembly::GetSatelliteAssemblyNoThrow(System.Globalization.CultureInfo,System.Version)
+SC-M: System.Reflection.AssemblyName System.Reflection.Assembly::UnprotectedGetName()
+SC-M: System.AppDomainSetup System.AppDomain::get_SetupInformationNoCopy()
+SC-M: System.AppDomainSetup System.AppDomain::get_SetupInformation()
+SC-M: System.AppDomain System.AppDomain::get_DefaultDomain()
+SC-M: System.String System.AppDomain::GetProcessGuid()
+SC-M: System.Boolean System.AppDomain::IsFinalizingForUnload()
+SC-M: System.Int32 System.AppDomain::getDomainID()
+SC-M: System.Void System.AppDomain::Unload(System.AppDomain)
+SC-M: System.Reflection.Assembly System.AppDomain::DoAssemblyResolve(System.String,System.Boolean)
+SC-M: System.Reflection.Assembly System.AppDomain::DoTypeResolve(System.Object)
+SC-M: System.Reflection.AssemblyName System.Reflection.Emit.AssemblyBuilder::UnprotectedGetName()
+SC-M: System.IO.Stream System.Console::OpenStandardError(System.Int32)
+SC-M: System.IO.Stream System.Console::OpenStandardError()
+SC-M: System.IO.Stream System.Console::OpenStandardInput(System.Int32)
+SC-M: System.IO.Stream System.Console::OpenStandardInput()
+SC-M: System.IO.Stream System.Console::OpenStandardOutput(System.Int32)
+SC-M: System.IO.Stream System.Console::OpenStandardOutput()
+SC-M: System.Boolean System.Globalization.CultureInfo::IsIDNeutralCulture(System.Int32)
+SC-M: System.String[] System.IO.Directory::GetFileSystemEntries(System.String,System.String,System.IO.FileAttributes,System.IO.FileAttributes)
+SC-M: System.Void System.IO.FileStream::.ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean,System.Boolean)
+SC-M: System.Type System.Reflection.Module::MonoDebugger_ResolveType(System.Reflection.Module,System.Int32)
+SC-M: System.String System.IO.Path::CanonicalizePath(System.String)
+SC-M: System.String System.IO.Path::WindowsDriveAdjustment(System.String)
+SC-M: System.String System.IO.Path::InsecureGetFullPath(System.String)
+SC-M: System.Void System.Globalization.RegionInfo::.ctor(System.Int32)
+SC-M: System.Boolean System.Globalization.RegionInfo::GetByTerritory(System.Globalization.CultureInfo)
+SC-M: System.Void System.Diagnostics.StackTrace::init_frames(System.Int32,System.Boolean)
+SC-M: System.Type System.Type::ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
+SC-M: System.Byte[] System.Security.Cryptography.X509Certificates.X509Certificate::Load(System.String)
+SC-M: System.IntPtr System.RuntimeMethodHandle::GetFunctionPointer()
+SC-M: System.Reflection.Emit.UnmanagedMarshal System.Reflection.FieldInfo::get_UMarshal()
+SC-M: System.Type[] System.Reflection.FieldInfo::GetOptionalCustomModifiers()
+SC-M: System.Type[] System.Reflection.FieldInfo::GetRequiredCustomModifiers()
+SC-M: System.Object[] System.Reflection.FieldInfo::GetPseudoCustomAttributes()
+SC-M: System.String System.Environment::get_StackTrace()
+SC-M: System.Int32 System.Reflection.Module::get_MDStreamVersion()
+SC-M: System.Reflection.FieldInfo System.Reflection.Module::ResolveField(System.Int32)
+SC-M: System.Reflection.FieldInfo System.Reflection.Module::ResolveField(System.Int32,System.Type[],System.Type[])
+SC-M: System.Reflection.MemberInfo System.Reflection.Module::ResolveMember(System.Int32)
+SC-M: System.Reflection.MemberInfo System.Reflection.Module::ResolveMember(System.Int32,System.Type[],System.Type[])
+SC-M: System.Byte[] System.Reflection.Module::ResolveSignature(System.Int32)
+SC-M: System.Guid System.Reflection.Module::GetModuleVersionId()
+SC-M: System.Guid System.Reflection.Module::get_MvId()
+SC-M: System.Guid System.Reflection.Module::get_ModuleVersionId()
+SC-M: System.Guid System.Reflection.Module::Mono_GetGuid(System.Reflection.Module)
+SC-M: System.Guid System.Reflection.Emit.ModuleBuilder::Mono_GetGuid(System.Reflection.Emit.ModuleBuilder)
+SC-M: System.Void System.Reflection.Emit.ModuleBuilder::Save()


