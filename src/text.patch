Index: text.h
===================================================================
--- text.h	(revision 86426)
+++ text.h	(working copy)
@@ -18,55 +18,9 @@
 
 #include "brush.h"
 #include "mango.h"
+#include "font.h"
 
-enum FontStretches {
-	FontStretchesUltraCondensed = 1,
-	FontStretchesExtraCondensed = 2,
-	FontStretchesCondensed      = 3,
-	FontStretchesSemiCondensed  = 4,
-	FontStretchesNormal         = 5,
-	FontStretchesMedium         = 5,
-	FontStretchesSemiExpanded   = 6,
-	FontStretchesExpanded       = 7,
-	FontStretchesExtraExpanded  = 8,
-	FontStretchesUltraExpanded  = 9
-};
 
-enum FontStyles {
-	FontStylesNormal,
-	FontStylesOblique,
-	FontStylesItalic
-};
-
-enum FontWeights {
-	FontWeightsThin       = 100,
-	FontWeightsExtraLight = 200,
-	FontWeightsLight      = 300,
-	FontWeightsNormal     = 400,
-	FontWeightsMedium     = 500,
-	FontWeightsSemiBold   = 600,
-	FontWeightsBold       = 700,
-	FontWeightsExtraBold  = 800,
-	FontWeightsBlack      = 900,
-	FontWeightsExtraBlack = 950,
-};
-
-enum StyleSimulations {
-	StyleSimulationsNone
-};
-
-enum TextDecorations {
-	TextDecorationsNone,
-	TextDecorationsUnderline
-};
-
-enum TextWrapping {
-	TextWrappingWrap,
-	TextWrappingNoWrap,
-	TextWrappingWrapWithOverflow
-};
-
-
 void text_init (void);
 void text_destroy (void);
 
@@ -86,7 +40,7 @@
 	virtual void OnPropertyChanged (DependencyProperty *prop);
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyProperty *subprop);
 
-	PangoFontDescription *font;
+	TextFontDescription *font;
 	Brush *foreground;
 };
 
@@ -137,6 +91,48 @@
 
 
 class TextBlock : public FrameworkElement {
+	TextFontDescription *font;
+	TextLayout *layout;
+	Brush *foreground;
+	
+	bool dirty_actual_values;
+	double actual_height;
+	double actual_width;
+	double bbox_height;
+	double bbox_width;
+	
+	void CalcActualWidthHeight (cairo_t *cr);
+	void Layout (cairo_t *cr);
+	void Paint (cairo_t *cr);
+	
+	double GetActualWidth ()
+	{
+		if (dirty_actual_values)
+			CalcActualWidthHeight (NULL);
+		return actual_width;
+	}
+	
+	double GetActualHeight ()
+	{
+		if (dirty_actual_values)
+			CalcActualWidthHeight (NULL);
+		return actual_height;
+	}
+	
+	double GetBoundingWidth ()
+	{
+		if (dirty_actual_values)
+			CalcActualWidthHeight (NULL);
+		return bbox_width;
+	}
+	
+	double GetBoundingHeight ()
+	{
+		if (dirty_actual_values)
+			CalcActualWidthHeight (NULL);
+		return bbox_height;
+	}
+	
 public:
 	static DependencyProperty *ActualHeightProperty;
 	static DependencyProperty *ActualWidthProperty;
@@ -172,34 +168,6 @@
 	virtual Value *GetValue (DependencyProperty *property);
 	virtual void SetValue (DependencyProperty *property, Value *value);
 	virtual void SetValue (DependencyProperty *property, Value value);
-	
-private:
-	PangoFontDescription *font;
-	MangoRenderer *renderer;
-	PangoLayout *layout;
-	Brush *foreground;
-	
-	bool dirty_actual_values;
-	double actual_height;
-	double actual_width;
-	
-	void CalcActualWidthHeight (cairo_t *cr);
-	void Layout (cairo_t *cr);
-	void Paint (cairo_t *cr);
-
-	double GetActualWidth ()
-	{
-		if (dirty_actual_values)
-			CalcActualWidthHeight (NULL);
-		return actual_width;
-	}
-
-	double GetActualHeight ()
-	{
-		if (dirty_actual_values)
-			CalcActualWidthHeight (NULL);
-		return actual_height;
-	}
 };
 
 TextBlock *text_block_new (void);
Index: text.cpp
===================================================================
--- text.cpp	(revision 86426)
+++ text.cpp	(working copy)
@@ -22,62 +22,8 @@
 #include "text.h"
 
 
-static PangoStretch
-font_stretch (FontStretches stretch)
-{
-	switch (stretch) {
-	case FontStretchesUltraCondensed:
-		return PANGO_STRETCH_ULTRA_CONDENSED;
-	case FontStretchesExtraCondensed:
-		return PANGO_STRETCH_EXTRA_CONDENSED;
-	case FontStretchesCondensed:
-		return PANGO_STRETCH_CONDENSED;
-	case FontStretchesSemiCondensed:
-		return PANGO_STRETCH_SEMI_CONDENSED;
-	case FontStretchesNormal: // FontStretchesMedium (alias)
-	default:
-		return PANGO_STRETCH_NORMAL;
-	case FontStretchesSemiExpanded:
-		return PANGO_STRETCH_SEMI_EXPANDED;
-	case FontStretchesExpanded:
-		return PANGO_STRETCH_EXPANDED;
-	case FontStretchesExtraExpanded:
-		return PANGO_STRETCH_EXTRA_EXPANDED;
-	case FontStretchesUltraExpanded:
-		return PANGO_STRETCH_ULTRA_EXPANDED;
-	}
-}
+static SolidColorBrush *default_foreground_brush = NULL;
 
-static PangoStyle
-font_style (FontStyles style)
-{
-	switch (style) {
-	case FontStylesNormal:
-	default:
-		return PANGO_STYLE_NORMAL;
-	case FontStylesOblique:
-		return PANGO_STYLE_OBLIQUE;
-	case FontStylesItalic:
-		return PANGO_STYLE_ITALIC;
-	}
-}
-
-static PangoWeight
-font_weight (FontWeights weight)
-{
-	// FontWeights and PangoWeight values map exactly
-	
-	if (weight > 900) {
-		// FontWeighs have values between 100-999, Pango only allows 100-900
-		return (PangoWeight) 900;
-	}
-	
-	return (PangoWeight) weight;
-}
-
-
-SolidColorBrush *default_foreground_brush = NULL;
-	
 static Brush *
 default_foreground (void)
 {
@@ -108,12 +54,12 @@
 	foreground = NULL;
 	
 	/* initialize the font description */
-	font = pango_font_description_new ();
+	font = new TextFontDescription ();
 }
 
 Inline::~Inline ()
 {
-	pango_font_description_free (font);
+	delete font;
 	
 	if (foreground != NULL) {
 		foreground->Detach (NULL, this);
@@ -128,22 +74,22 @@
 		DependencyObject::OnPropertyChanged (prop);
 		return;
 	}
-    
+	
 	if (prop == Inline::FontFamilyProperty) {
 		char *family = inline_get_font_family (this);
-		pango_font_description_set_family (font, family);
+		font->SetFamily (family);
 	} else if (prop == Inline::FontSizeProperty) {
 		double size = inline_get_font_size (this);
-		pango_font_description_set_absolute_size (font, size * PANGO_SCALE);
+		font->SetSize (size);
 	} else if (prop == Inline::FontStretchProperty) {
 		FontStretches stretch = inline_get_font_stretch (this);
-		pango_font_description_set_stretch (font, font_stretch (stretch));
+		font->SetStretch (stretch);
 	} else if (prop == Inline::FontStyleProperty) {
 		FontStyles style = inline_get_font_style (this);
-		pango_font_description_set_style (font, font_style (style));
+		font->SetStyle (style);
 	} else if (prop == Inline::FontWeightProperty) {
 		FontWeights weight = inline_get_font_weight (this);
-		pango_font_description_set_weight (font, font_weight (weight));
+		font->SetWeight (weight);
 	} else if (prop == Inline::ForegroundProperty) {
 		if (foreground != NULL) {
 			foreground->Detach (NULL, this);
@@ -321,31 +267,31 @@
 
 TextBlock::TextBlock ()
 {
-	renderer = (MangoRenderer *) mango_renderer_new ();
-	
 	foreground = NULL;
 	
-	layout = NULL;
+	layout = new TextLayout ();
 	
+	dirty_actual_values = true;
 	actual_height = 0.0;
 	actual_width = 0.0;
-	dirty_actual_values = true;
+	bbox_height = 0.0;
+	bbox_width = 0.0;
 	
 	/* initialize the font description */
-	font = pango_font_description_new ();
-	char *family = text_block_get_font_family (this);
-	pango_font_description_set_family (font, family);
-	double size = text_block_get_font_size (this);
-	pango_font_description_set_absolute_size (font, size * PANGO_SCALE);
-	FontStretches stretch = text_block_get_font_stretch (this);
-	pango_font_description_set_stretch (font, font_stretch (stretch));
-	FontStyles style = text_block_get_font_style (this);
-	pango_font_description_set_style (font, font_style (style));
+	font = new TextFontDescription ();
+ 	char *family = text_block_get_font_family (this);
+	font->SetFamily (family);
+ 	double size = text_block_get_font_size (this);
+	font->SetSize (size);
+ 	FontStretches stretch = text_block_get_font_stretch (this);
+	font->SetStretch (stretch);
+ 	FontStyles style = text_block_get_font_style (this);
+	font->SetStyle (style);
 	FontWeights weight = text_block_get_font_weight (this);
-	pango_font_description_set_weight (font, font_weight (weight));
-
-	text_block_set_text (this, (char*)"");
+	font->SetWeight (weight);
 	
+	text_block_set_text (this, (char *) "");
+	
 	// this has to come last, since in our OnPropertyChanged
 	// method we update our bounds.
 	Brush *brush = default_foreground ();
@@ -354,13 +300,10 @@
 
 TextBlock::~TextBlock ()
 {
-	pango_font_description_free (font);
+	delete font;
 	
-	if (layout)
-		g_object_unref (layout);
+	delete layout;
 	
-	g_object_unref (renderer);
-	
 	if (foreground != NULL) {
 		foreground->Detach (NULL, this);
 		foreground->unref ();
@@ -376,11 +319,6 @@
 void
 TextBlock::Render (cairo_t *cr, int x, int y, int width, int height)
 {
-	const char *text = pango_layout_get_text (layout);
-	
-	if (!text || !text[0])
-		return;
-	
 	cairo_save (cr);
 	cairo_set_matrix (cr, &absolute_xform);
 	Paint (cr);
@@ -390,7 +328,7 @@
 void 
 TextBlock::ComputeBounds ()
 {
-	bounds = bounding_rect_for_transformed_rect (&absolute_xform, Rect (0, 0, GetActualWidth (), GetActualHeight ()));
+	bounds = bounding_rect_for_transformed_rect (&absolute_xform, Rect (0, 0, GetBoundingWidth (), GetBoundingHeight ()));
 // no-op	bounds.GrowBy (1);
 }
 
@@ -398,20 +336,20 @@
 TextBlock::InsideObject (cairo_t *cr, double x, double y)
 {
 	bool ret = false;
-
+	
 	cairo_save (cr);
-
+	
 	double nx = x;
 	double ny = y;
-
+	
 	cairo_matrix_t inverse = absolute_xform;
 	cairo_matrix_invert (&inverse);
-
+	
 	cairo_matrix_transform_point (&inverse, &nx, &ny);
-
-	if (nx >= 0.0 && ny >= 0.0 && nx < GetActualWidth () && ny < GetActualHeight ())
+	
+	if (nx >= 0.0 && ny >= 0.0 && nx < GetBoundingWidth () && ny < GetBoundingHeight ())
 		ret = true;
-
+	
 	cairo_restore (cr);
 	return ret;
 }
@@ -421,7 +359,7 @@
 {
 	Point user_xform_origin = GetRenderTransformOrigin ();
 	
-	return Point (user_xform_origin.x * GetActualWidth (), user_xform_origin.y * GetActualHeight ());
+	return Point (user_xform_origin.x * GetBoundingWidth (), user_xform_origin.y * GetBoundingHeight ());
 }
 
 void
@@ -458,61 +396,40 @@
 void
 TextBlock::Layout (cairo_t *cr)
 {
-	PangoAttribute *uline_attr = NULL;
-	PangoAttribute *font_attr = NULL;
-	PangoAttribute *fg_attr = NULL;
-	PangoAttribute *attr = NULL;
 	TextDecorations decorations;
-	double clip_height, width;
-	PangoFontMask font_mask;
-	PangoAttrList *attrs;
-	size_t start, end;
-	bool clip = false;
-	GString *block;
+	TextWrapping wrapping;
+	double height, width;
+	uint8_t font_mask;
+	List *runs;
 	char *text;
 	Brush *fg;
-	int w, h;
 	
 	if (foreground == NULL)
 		fg = default_foreground ();
 	else
 		fg = foreground;
-
-	if (layout == NULL)
-		layout = pango_cairo_create_layout (cr);
 	
-	clip_height = framework_element_get_height (this);
-	switch (text_block_get_text_wrapping (this)) {
-	case TextWrappingWrap:
-		// same as w/ Overflow except we clip height (if defined)
-		if (clip_height > 0.0)
-			clip = true;
-	case TextWrappingWrapWithOverflow:
-		pango_layout_set_wrap (layout, PANGO_WRAP_WORD_CHAR);
-		
-		width = framework_element_get_width (this);
-		
-		if (width > 0.0)
-			pango_layout_set_width (layout, (int) width * PANGO_SCALE);
-		else
-			pango_layout_set_width (layout, -1);
-		break;
-	default:
-		pango_layout_set_width (layout, -1);
-		break;
-	}
+	wrapping = text_block_get_text_wrapping (this);
+	layout->SetWrapping (wrapping);
 	
-	block = g_string_new ("");
-	attrs = pango_attr_list_new ();
+	height = framework_element_get_height (this);
+	width = framework_element_get_width (this);
 	
-	font_mask = pango_font_description_get_set_fields (font);
+	if (width > 0.0f)
+		layout->SetMaxWidth (width);
+	else
+		layout->SetMaxWidth (-1.0);
+	
+	runs = new List ();
+	
 	decorations = text_block_get_text_decorations (this);
+	font_mask = font->GetFields ();
 	
 	Inlines *inlines = text_block_get_inlines (this);
 	
 	if (inlines != NULL) {
 		Collection::Node *node = (Collection::Node *) inlines->list->First ();
-		PangoFontMask run_mask, inherited_mask;
+		uint8_t run_mask, inherited_mask;
 		TextDecorations deco;
 		Value *value;
 		Inline *item;
@@ -521,129 +438,62 @@
 		while (node != NULL) {
 			item = (Inline *) node->obj;
 			
-			switch (item->GetObjectType ()) {
+			// Inlines inherit their parent TextBlock's font properties if
+			// they don't specify their own.
+			run_mask = item->font->GetFields ();
+			item->font->Merge (font, false);
+			
+			inherited_mask = (FontMask) (font_mask & ~run_mask);
+			
+			// Inherit the TextDecorations from the parent TextBlock if unset
+			value = item->GetValue (Inline::TextDecorationsProperty);
+			deco = value ? (TextDecorations) value->AsInt32 () : decorations;
+			
+ 			switch (item->GetObjectType ()) {
 			case Type::RUN:
 				run = (Run *) item;
 				
 				text = run_get_text (run);
 				
-				if (text == NULL || *text == '\0') {
-					// optimization
-					goto loop;
-				}
-				
-				start = block->len;
-				g_string_append (block, text);
-				end = block->len;
+				if (text && text[0]) {
+					if (item->foreground)
+						runs->Append (new TextRun (text, -1, deco, item->font, item->foreground));
+					else
+						runs->Append (new TextRun (text, -1, deco, item->font, fg));
+ 				}
 				break;
 			case Type::LINEBREAK:
-				start = block->len;
-				g_string_append_c (block, '\n');
-				end = block->len;
+				if (item->foreground)
+					runs->Append (new TextRun (deco, item->font, item->foreground));
+				else
+					runs->Append (new TextRun (deco, item->font, fg));
 				break;
 			default:
-				goto loop;
 				break;
 			}
 			
-			// Inlines inherit their parent TextBlock's font properties if
-			// they don't specify their own.
-			run_mask = pango_font_description_get_set_fields (item->font);
-			pango_font_description_merge (item->font, font, false);
-			inherited_mask = (PangoFontMask) (font_mask & ~run_mask);
-			
-			attr = pango_attr_font_desc_new (item->font);
-			attr->start_index = start;
-			attr->end_index = end;
-			
-			if (!font_attr || !pango_attribute_equal ((const PangoAttribute *) font_attr, (const PangoAttribute *) attr)) {
-				pango_attr_list_insert (attrs, attr);
-				font_attr = attr;
-			} else {
-				pango_attribute_destroy (attr);
-				font_attr->end_index = end;
-			}
-			
 			if (inherited_mask != 0)
-				pango_font_description_unset_fields (item->font, inherited_mask);
+				item->font->UnsetFields (inherited_mask);
 			
-			// Inherit the TextDecorations from the parent TextBlock if unset
-			value = item->GetValue (Inline::TextDecorationsProperty);
-			deco = value ? (TextDecorations) value->AsInt32 () : decorations;
-			if (deco == TextDecorationsUnderline) {
-				if (uline_attr == NULL) {
-					uline_attr = pango_attr_underline_new (PANGO_UNDERLINE_SINGLE);
-					uline_attr->start_index = start;
-					uline_attr->end_index = end;
-					
-					pango_attr_list_insert (attrs, uline_attr);
-				} else {
-					uline_attr->end_index = end;
-				}
-			} else {
-				uline_attr = NULL;
-			}
-			
-			// Inlines also inherit their Foreground property from their parent
-			// TextBlock if not set explicitly
-			if (item->foreground)
-				attr = mango_attr_foreground_new (this, item->foreground);
-			else
-				attr = mango_attr_foreground_new (this, fg);
-			attr->start_index = start;
-			attr->end_index = end;
-			
-			if (!fg_attr || !pango_attribute_equal ((const PangoAttribute *) fg_attr, (const PangoAttribute *) attr)) {
-				pango_attr_list_insert (attrs, attr);
-				fg_attr = attr;
-			} else {
-				pango_attribute_destroy (attr);
-				fg_attr->end_index = end;
-			}
-			
-		loop:
 			node = (Collection::Node *) node->next;
 		}
 	}
 	
-	// Now that we have our PangoAttrList setup, set it and the text on the PangoLayout
-	pango_layout_set_text (layout, block->str, block->len);
-	g_string_free (block, true);
+	layout->SetTextRuns (runs);
+	layout->Layout ();
 	
-	pango_layout_set_attributes (layout, attrs);
-	
-	pango_cairo_update_layout (cr, layout);
-	mango_renderer_set_cairo_context (renderer, cr);
-	mango_renderer_layout_path (renderer, layout);
-	pango_layout_get_pixel_size (layout, &w, &h);
-	pango_attr_list_unref (attrs);
-	
-	if (clip && (h > clip_height))
-		text_block_set_actual_height (this, (double) clip_height);
-	else
-		text_block_set_actual_height (this, (double) h);
-	text_block_set_actual_width (this, (double) w);
+	layout->GetActualExtents (&actual_width, &actual_height);
+	layout->GetLayoutExtents (&bbox_width, &bbox_height);
 	dirty_actual_values = false;
+	
+	text_block_set_actual_height (this, actual_height);
+	text_block_set_actual_width (this, actual_width);
 }
 
 void
 TextBlock::Paint (cairo_t *cr)
 {
-	TextWrapping wrapping = text_block_get_text_wrapping (this);
-	double h = GetActualHeight ();
-	double w = framework_element_get_width (this);
-
-	if (wrapping != TextWrappingWrapWithOverflow)
-		h = framework_element_get_height (this);
-	
-	if (w > 0.0 && h > 0.0) {
-		cairo_rectangle (cr, 0, 0, w, h);
-		cairo_clip (cr);
-	}
-	
-	pango_cairo_update_layout (cr, layout);
-	mango_renderer_set_cairo_context (renderer, cr);
-	mango_renderer_show_layout (renderer, layout);
+	layout->Render (cr, this, 0.0, 0.0);
 }
 
 void
@@ -659,19 +509,19 @@
 	
 	if (prop == TextBlock::FontFamilyProperty) {
 		char *family = text_block_get_font_family (this);
-		pango_font_description_set_family (font, family);
+		font->SetFamily (family);
 	} else if (prop == TextBlock::FontSizeProperty) {
 		double size = text_block_get_font_size (this);
-		pango_font_description_set_absolute_size (font, size * PANGO_SCALE);
+		font->SetSize (size);
 	} else if (prop == TextBlock::FontStretchProperty) {
 		FontStretches stretch = text_block_get_font_stretch (this);
-		pango_font_description_set_stretch (font, font_stretch (stretch));
+		font->SetStretch (stretch);
 	} else if (prop == TextBlock::FontStyleProperty) {
 		FontStyles style = text_block_get_font_style (this);
-		pango_font_description_set_style (font, font_style (style));
+		font->SetStyle (style);
 	} else if (prop == TextBlock::FontWeightProperty) {
 		FontWeights weight = text_block_get_font_weight (this);
-		pango_font_description_set_weight (font, font_weight (weight));
+		font->SetWeight (weight);
 	} else if (prop == TextBlock::TextProperty) {
 		// will be updated later in Layout()
 	} else if (prop == TextBlock::InlinesProperty) {
@@ -693,7 +543,9 @@
 			foreground->ref ();
 		}
 		
-		// This will force a call to Layout ()
+		// Note: Until we find a way to update fg brushes in
+		// the Layout when they change here and/or in the
+		// inlines, we have to re-layout (which sucks).
 		//recalc_actual = false;
 	} else if (prop == TextBlock::ActualHeightProperty) {
 		recalc_actual = false;
@@ -734,35 +586,33 @@
 {
 	if (dirty_actual_values && ((property == TextBlock::ActualHeightProperty) || (property == TextBlock::ActualWidthProperty)))
 		CalcActualWidthHeight (NULL);
-
+	
 	if (property == TextBlock::TextProperty) {
 		GString *block;
 		Value *res;
-
+		
 		// The Text property is a concatenation of the Inlines */
 		Inlines *inlines = text_block_get_inlines (this);
-	
+		
 		block = g_string_new ("");
-
+		
 		if (inlines != NULL) {
 			Collection::Node *node = (Collection::Node *) inlines->list->First ();
 			Inline *item;
-			Run *run;
 			char *text;
-		
+			Run *run;
+			
 			while (node != NULL) {
 				item = (Inline *) node->obj;
-			
+				
 				switch (item->GetObjectType ()) {
 				case Type::RUN:
 					run = (Run *) item;
-				
+					
 					text = run_get_text (run);
-				
-					if (text == NULL || *text == '\0') {
-					} else {
+					
+					if (text && text[0])
 						g_string_append (block, text);
-					}
 					break;
 				case Type::LINEBREAK:
 					g_string_append_c (block, '\n');
@@ -770,16 +620,16 @@
 				default:
 					break;
 				}
-
+				
 				node = (Collection::Node *) node->next;
 			}
 		}
-
+		
 		res = new Value (block->str);
 		g_string_free (block, true);
 		return res;
 	}
-
+	
 	return DependencyObject::GetValue (property);
 }
 
@@ -792,16 +642,16 @@
 		else if (property == TextBlock::ActualWidthProperty)
 			actual_width = value->AsDouble ();
 	}
-
+	
 	if (property == TextBlock::TextProperty) {
 		// Text is a virtual property and setting it deletes all current runs,
 		// creating a new run
 		Run *run = new Run ();
 		if (value)
 			run_set_text (run, value->AsString ());
-
+		
 		Inlines *inlines = text_block_get_inlines (this);
-
+		
 		if (!inlines) {
 			inlines = new Inlines ();
 			text_block_set_inlines (this, inlines);
@@ -811,7 +661,7 @@
 		inlines->Add (run);
 		return;
 	}
-
+	
 	return DependencyObject::SetValue (property, value);
 }
 
@@ -1187,6 +1037,8 @@
 void
 text_init (void)
 {
+	font_init ();
+	
 	// Inline
 	Inline::FontFamilyProperty = DependencyObject::Register (Type::INLINE, "FontFamily", Type::STRING);
 	Inline::FontSizeProperty = DependencyObject::Register (Type::INLINE, "FontSize", Type::DOUBLE);
@@ -1204,7 +1056,7 @@
 	// TextBlock
 	TextBlock::ActualHeightProperty = DependencyObject::Register (Type::TEXTBLOCK, "ActualHeight", Type::DOUBLE);
 	TextBlock::ActualWidthProperty = DependencyObject::Register (Type::TEXTBLOCK, "ActualWidth", Type::DOUBLE);
-	TextBlock::FontFamilyProperty = DependencyObject::Register (Type::TEXTBLOCK, "FontFamily", new Value ("Lucida Sans"));
+	TextBlock::FontFamilyProperty = DependencyObject::Register (Type::TEXTBLOCK, "FontFamily", new Value ("Lucida Sans Unicode, Lucida Sans"));
 	TextBlock::FontSizeProperty = DependencyObject::Register (Type::TEXTBLOCK, "FontSize", new Value (14.666));
 	TextBlock::FontStretchProperty = DependencyObject::Register (Type::TEXTBLOCK, "FontStretch", new Value (FontStretchesNormal));
 	TextBlock::FontStyleProperty = DependencyObject::Register (Type::TEXTBLOCK, "FontStyle", new Value (FontStylesNormal));
