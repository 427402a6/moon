2007-06-12  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Add parser for KeyTime structures.

2007-06-12  Chris Toshok  <toshok@ximian.com>

	* animation.cpp
	(ColorAnimationUsingKeyFrames::GetNaturalDurationCore): implement.
	(PointAnimationUsingKeyFrames::GetNaturalDurationCore): implement.
	(animation_init): make sure to initialize
	ColorKeyFrame::ValueProperty.

	* clock.cpp (Timeline::GetNaturalDuration): comment out some spew.

2007-06-12  Jackson Harper  <jackson@ximian.com>

	* animation.cpp|h: C style constructor for KeyFrameCollection.
	* xaml.cpp: Implement the KeyFrame types
	- Make the base types ghosts, despite what the docs say, they
	can't be used.

2007-06-12  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (NotifyParentOfPropertyChange): Stop propagating
	when we have reached someone that handles that property in the way
	up. 

2007-06-12  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Register the TriggerCollection so that
	TriggerCollections can be created using the explicit syntax.
	
2007-06-12  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: No longer need to special case EventTriggers. Remove
	some dead code (yippie!)
	* runtime.cpp: Unregister the target when removing from the
	collection.

2007-06-12  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h: Implement Inlines.
	* value.cpp, value.h, type.cpp: Updated.

2007-06-12  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp|h: Hook up the UIElement::Triggers and
	EventTrigger::Actions/RoutedEvent properly.
	* xaml.cpp: Remove some of the special casing for event triggers
	now that they are proper DependencyProperties.

2007-06-12  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* typegen.cs: Now checks if classes that inherits DependencyObject
	implement GetObjectType.
	* animation.h, runtime.h, text.h, geometry.h, shape.h: Implement
	missing GetObjectTypes and fix a few that were returning the wrong
	type.

2007-06-12  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp: 
	- (DependencyObject::SetValue): Allow assigning an object of a 
	  more derived type than the defined property type. Change the
	  attached_list code to handle NULL dependency_objects.
	- Delete types_init, it's generated now.
	- Delete Value:As[DependencyObjects], its generated now.
	* runtime.h: Added definitions for a few missing collection classes.
	* types.cpp[.in], value.cpp[.in], value.h.in: Added.
	* value.h: Update.
	* Makefile.am: Add types.cpp and value.cpp
	* typegen.cs, typegen.cs: Added, generates types.cpp, value.cpp, 
	value.h and Kind.cs from the headers.

2007-06-12  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: (DO/DP) Make all char*'s const.

2007-06-12  Chris Toshok  <toshok@ximian.com>

	* clock.h, clock.cpp, runtime.cpp, value.h: use a
	TimelineCollection to store child collections in TimelineGroup.

2007-06-12  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp (animation_init): remove the
	clock.cpp property registration.
	(DoubleAnimationUsingKeyFrames::GetNaturalDurationCore): initial
	attempt, calculate our timespan from our key frames.
	(Animation::GetNaturalDurationCore): return a 1 second duration,
	as doc'ed on msdn.
	(UpdatePropertyValue): plug leak.

	* runtime.cpp (runtime_init): call clock_init.

	* clock.h, clock.cpp: largish pass at implementing support for
	Duration::Automatic in ClockGroups (where they query their child
	timelines to see how long they should make themselves).  Also, add
	clock_init.

	* xaml.cpp (timespan_from_str): correct math.

2007-06-12  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Add a couple more of the animation elements.

2007-06-12  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp|h: There is no public Triggers property.

2007-06-12  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (DependencyObject::RegisterFull): Allow for
	properties to be flagged as attached, and only propagate the child
	notification to those those that care about it.

2007-06-12  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* Implement a mechanism to keep track of parents and notify
	parents of changes in attached properties.

2007-06-11  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Add content properties, and handle collections that
	are content properties, by implicitly adding items to the
	collections.

2007-06-11  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.cpp: Remove matrix initialization (to avoid double-inits in 
	most cases).
	* transform.cpp: Add matrix initialization in TransformGroup::
	GetTransform. Makes the API safer :)

2007-06-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* geometry.cpp: Implemented [Ploy]QuadraticBezierSegment::Draw.

2007-06-11  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Add drawing of [Poly]LinesSegment and 
	[Poly]BezierSegment. More than half of Sam Ruby's samples can work
	with this.

2007-06-11  Jeffrey Stedfast  <fejj@novell.com>

	* ffvideo.cpp: Attempt to get video to be in sync with audio by
	using the audio pts as the target_pts.

2007-06-11  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp: Register the collection types as derived from
	COLLECTION.

2007-06-11  Chris Toshok  <toshok@ximian.com>

	* xaml.cpp (timespan_from_str): fix reading off the end of digits
	array.

2007-06-11  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Implement some more collection loading. A lot of
	duplicate code here, so I should probably refactor things a bit,
	but will wait until I've seen how more collections are laid out.

2007-06-11  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp: use KeyFrameCollection's for the
	*AnimationUsingKeyFrames key frame stuff, instead of GLists.

	* value.h, runtime.cpp: add Value::AsKeyFrameCollection.

2007-06-11  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Make the parents of collections the Collection ghost
	element.  This is a first step in cleaning up collection creation
	a little.

2007-06-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* transform.cpp: remove dead code.
	* xaml.cpp: Partial collection support for geometry.

2007-06-11  Sebastien Pouliot  <sebastien@ximian.com>

	* transform.cpp: Multiply each matrix in a TransformGroup (fix the 
	open-clipart sample, at least the correct parts of the sample).
	* runtime.cpp: Always initialize the matrix in item_get_render_affine
	otherwise we'll end up with bad random results.

2007-06-11  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h, runtime.cpp: (DependencyObject) Add SetValue/GetValue 
	overloads that takes strings as well as DP, GetDependencyProperty where 
	it's possible to specify whether the parent type is searched for the
	property or not, and a HasProperty method

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Fix function names wrt type.
	* shape.cpp: Detect RenderTransform and RenderTransformOrigin changes
	and call update_xform. This fix the "atom" sample :)
	* transform.cpp: Fix Rotate and Scale around a center point.

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com> 

	* geometry.cpp: Add more precision to types.
	* runtime.cpp: Apply Canvas' RenderTransform and RenderTransformOrigin

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com> 

	* brush.cpp: Implement Opacity for SolidColorBrush.
	* runtime.cpp|h: Add an UIElement parameter to SetupBrush so we can 
	access it's properties (e.g. Opacity in this case). Add uielement_
	[g|s]et_opacity functions.
	* shape.cpp: Supply the UIElement when setting up brushes.

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp: Fix rounded rectangle when radius_[x|y] are larger than 
	half the width|height.

2007-06-10  Miguel de Icaza  <miguel@novell.com>

	* shape.cpp (OnPropertyChanged): Implement this property for most
	shapes: if the property is set, we need to invalidate and
	repaint. 

	* runtime.h (FullInvalidate): A method to perform a queue to
	redraw the underlying region, update the bounds and queue an
	update for the new region.

	* runtime.h (Base): make destructor virtual so that base_unref can
	call delete (Base *) p.   Exposed by the managed code when the
	first base_unref ran for the first time :-)

	I sense a leak!

	* runtime.cpp (surface_attach): invalidate the areas before and
	after, compute the bounds using item_update_bounds, not the
	getbounds method directly.

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com>

	* xaml.cpp: Add PathFigure[Collection]/Segments support.

2007-06-10  Sebastien Pouliot  <sebastien@ximian.com> 

	* brush.cpp: Fix Green definition, like GDI+ MS use a dark (0x80)
	green unlike other basic colors (red/blue at 0xFF).
	* xaml.cpp: Don't assert on an empty collection.

2007-06-10  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp, runtime.h (BasicArray): New base struct for
	PointArray and double array, puts the count field at the beginning
	and avoids an extra block to be allocated (count and values are
	now on a single contiguous block).

	Introduce a refcount for the arrays, so that we can release those
	properly.  Due to the nature of how we copied values before we
	had to leak the values, when the leak was plugged, we crashed.  

	The refcount is there just because it was easy, we could clone if
	we wanted, but also I would like to keep the refcount there to
	ensure that the array of doubles is aligned on an 8 byte
	boundary. 

	(double_array_new, point_array_new): New methods to create the
	structures. 

	(Value): Now free the arrays.
	

2007-06-09  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Add/complete PathFigureCollection and 
	PathSegmentCollection. Doesn't parse from xaml.
	* runtime.cpp, value.h: Add support for new classes.

2007-06-09  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Complete GeometryGroup with GeometryCollection.
	But color rending is not yet correct in demo files.
	* runtime.cpp, value.h: Add support for GeometryCollection
	* xaml.cpp: Add support for GeometryGroup

2007-06-09  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp, value.h, runtime.cpp: add
	ColorKeyFrame and it's linear/discrete subclasses, as well as
	ColorAnimationUsingKeyFrames.

2007-06-09  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp, value.h, runtime.cpp: add the
	Discrete keyframes for point and double.

2007-06-09  Chris Toshok  <toshok@ximian.com>

	* genkindcs.sh: new file, a script to generate
	olive/class/agclr/Mono/Kind.cs.

	* value.h: add marker comments so that genkindcs.sh works.  Also,
	remove the explicit value assignments to enum elements <
	DEPENDENCY_OBJECT.  there's no need for it.

2007-06-09  Chris Toshok  <toshok@ximian.com>

	* demo.cpp (main): add in another animation, this one using
	keyframes, that moves a square around in a square, while animating
	its background color the same way as the other rectangles.

	* value.h, runtime.cpp: add in the keyframe types.

	* runtime.cpp (DependencyObject::DependenceyObject): fix a
	valgrind error - we shouldn't be "free"ing Values, since they're
	"new"ed.  Add free_value and use that for the hash table value
	dtor, and delete them correctly.

	* animation.h, animation.cpp: add a lot of the keyframe animation
	stuff.  DoubleAnimationUsingKeyFrames + LinearDoubleKeyFrame is
	the only tested configuration, though.

	* clock.cpp (everywhere): guint64->TimeSpan fixing.
	(TimeUpdated): turns out that not only does the progress go from
	1.0 to 0.0 when reversed, but current_time actually goes backward
	as well.  this has the nice effect of actually simplifying this
	method substantially, since we can always compute progress as
	time/duration.

	* clock.h: typedef TimeSpan to gint64 (switching from guint64
	everywhere), and update the api to use this.

2007-06-09  Miguel de Icaza  <miguel@novell.com>

	* runtime.h (value_color_from_argb): Temporary hack until we
	figure out how to marshal Colors properly, we are using the uint32
	constructor, we should figure out if this is what we want, or if
	we should go down the route of using doubles (C++ stores thinks as
	Doubles our managed API as bytes).

2007-06-10  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Handle the TransformGroup default collection.
	- Add Value's to the collection

2007-06-09  Jackson Harper  <jackson@ximian.com>

	* transform.cpp|h: C style constructor for TransformGroup
	* xaml.cpp: Implement loading transform groups and transform
	collections

2007-06-09  Jackson Harper  <jackson@ximian.com>

	* value.h:
	* runtime.cpp:
	* transform.cpp|h: Impplement transform groups and transform
	collections.

2007-06-09  Jackson Harper  <jackson@ximian.com>

	* value.h:
	* runtime.cpp|h: Use the new collection classes for triggers and
	actions. These are unsettable, so don't register them as
	DependencyProperties.

2007-06-08  Everaldo Canuto  <ecanuto@novell.com>

	* runtime.cpp: In surface_destroy check for toplevel before unref
	it. 

2007-06-08  Chris Toshok  <toshok@ximian.com>

	* animation.h: remove the huge whitespace gap after KeyTime, and
	remove the ifdef'ed out Nullable<T> template.
	
	* animation.cpp: remove the unused point_animation C api, and use
	the overloaded + operator on Color and Point when initializing
	"end" in GetCurrentValue for those animations.  They're looking
	more and more similar.

2007-06-08  Chris Toshok  <toshok@ximian.com>

	* globally: move away from all uses of Value::u union.  switch
	everything to using Value::As* methods, which do typechecking and
	safe downcasting.
	
	* value.h: make the union private to catch anyone accessing it
	directly.

	* runtime.cpp (IsSubclassOf): return true if type == super.  Not
	strictly "subclass", but it makes this method a little more
	useful/efficient.  Add As* methods for string, point arrays, and
	double arrays, and add nullable As* methods for the types which
	don't return pointers already.

2007-06-09  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Parse time spans correctly.

2007-06-08  Miguel de Icaza  <miguel@novell.com>

	* runtime.h (UIElement): Remove user_xform_origin as a field, now
	we pull this from the DependencyObject as it should be. 

	* runtime.cpp (UIElement::OnSubPropertyChanged): Catch a bunch of
	other properties that would trigger an invalidate/bounds
	recomputation. 

	(item_init): initialize the other properties that the managed code
	needs. 
	
	* shape.cpp, ffvideo.cpp: updated to use the
	RenderTransformOriginProperty in the computation of the center for
	the transformation.

2007-06-08  Chris Toshok  <toshok@ximian.com>

	* Makefile.am (libmoon_la_SOURCES): add value.h

	* runtime.h, value.h: move the Value structure to value.h, since
	it (and its required forward decls) have grown huge.
	
	* runtime.cpp: add all the Value::As* methods, yay for CPP.

2007-06-08  Jeffrey Stedfast  <fejj@novell.com>

	* ffvideo.cpp (queue_data): Replaced the sound code with my newest
	implementation, seems to play sound correctly now.

2007-06-08  Chris Toshok  <toshok@ximian.com>

	* clock.h, clock.cpp: move all the TimeManager/Clock/Timeline
	stuff here, to help relieve some of the pressure building up in
	animation.h/animation.cpp.

2007-06-08  Chris Toshok  <toshok@ximian.com>

	* animation.cpp: add some skeleton code for point keyframe
	animations, and reduce all the Double/Point/Color Animation
	GetCurrentValue() methods to much the same, using LERP and the
	operators defined in runtime.h.

	* runtime.cpp (types_init): register the new keyframe types.

	* runtime.h: add some new animation types to Value, and add
	operators for +, -, and * (scalar) for Color and Point to make the
	animation code a little more concise.

	* animation.h: add some new classes/structs for use in keyframe
	animations.

2007-06-08  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp, runtime.h (Collection): Rework the collection to
	use abstract methods (gulp), 

	(VisualCollection): New collection, derives from Collection, does
	the collection thing.

	(Panel.OnPropertyChanged): If our children collection is updated,
	take care of it here.

	(DependencyObject): use free instead of g_free as we are
	allocating strings with strdup.
	
	(Value): drop constructor that specified type, type is not part of
	Value.
	
	* xaml.cpp, shape.cpp: Remove use of the old destructors now that we keep
	track of types correctly.

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com>

	* brush.cpp: Fix color formats argb and rgb (too dark).

2007-06-08  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h, runtime.cpp: Change Value::Kind to not have any holes
	in the integer ranges, and change Type's type hashtable to an array
	of types, indexed by Value::Kind. Also add Value::COLLECTION and 
	update Collection to use it.

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add Path::CanFill as it depends on the Geometry 
	object(s) being used.
	* geometry.cpp|h: Implemented Poly[Line|Bezier|QuadraticBezier]Segment
	Points properties and some basic draw stuff too.

2007-06-08  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h, runtime.cpp, shape.cpp, xaml.cpp:
	Remove the Value (DependencyObject, Kind) constructor,
	the type of the DependencyObject can be obtained directly 
	from the DependencyObject itself now, and update all uses
	to the Value (DependencyObject) constructor.

2007-06-08  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* *.h, *.cpp: Remove objectType and SetObjectType from 
	DependencyObject, make DependencyObject::GetObjectType virtual, 
	and update all inheritors of DependencyObject to not use 
	SetObjectType, but override GetObjectType.

2007-06-08  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Add some type checks to ensure we are setting child
	properties to legal types.
	- explicitly set properties value types, Value now requires this.
	- fix warning

2007-06-08  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp: Initialize the surface to NULL
	- use UIElement as the type for flags 

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.h: Don't waste time trying to fill lines.
	* shape.cpp: Fix dashes support. First reset between shapes and, 
	second, handle cairo dislike of a single dash value of 0.0.

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Some shapes, like polylines, don't supports Fill.

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Implement Polygon::Points aad Polyline:Points 
	properties as DependencyProperty. Adjust their Draw methods.
	* runtime.cpp: Implement point_array_from_str.

2007-06-08  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add DP support for StrokeDashArray (double*).
	* runtime.cpp|h: Add double* and Point* (array) support to Value.
	* xaml.cpp: Add DOUBLE_ARRAY and POINT_ARRAY support. Supply value 
	kind for brushes to avoid runtime warnings.

2007-06-08  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: Implemented a type system that tracks
	types' name and parent type.

2007-06-08  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (Panel): Make children a property of the panel so we
	can access it from the managed world.

	(Value): Add new constructor that takes a full type, need to
	discuss this with the team.

2007-06-08  Jackson Harper  <jackson@ximian.com>

	* animation.cpp|h: Implement BeginStoryboard
	* runtime.cpp|h: Implement event triggers
	- Fire a loaded event when we first render an element
	* xaml.cpp: Implement parsing and loading storyboard and begin
	storyboard as well as event triggers and some of the property
	types that go with these guys.
	
2007-06-08  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (runtime_init): Add panel_init

	(panel_init): Register Children property (must still create the
	collections, that will be a new fight).

2007-06-07  Miguel de Icaza  <miguel@novell.com>

	* xaml.cpp (start_element_handler): For the top element, track the
	type that we loaded, so we can return this to our caller (needed
	for the managed interface).

	(XamlParserInfo): track also the Value::Kind of the top_element. 

	(xaml_create_from_file, xaml_create_from_str): Both now can
	optionally return the type of the toplevel element.

	* runtime.cpp (Value): Switch Value to strdup/free.

	Use inited to prevent multiple initializations.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* demo.cpp (main): track more of the api axing.

	* animation.h, animation.cpp (Storyboard::Begin): return
	immediately if we've already got a root clock.
	(globally) continue axing unused C api.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* demo.cpp: track all the animation changes away from the C api,
	and also test out the from/by animation combination by making the
	X scaling only go From 1.0 By -0.5 (so it animates in the range of
	[1.0..0.5].
	
	* animation.h, animation.cpp: lots of changes - get rid of many of
	the animation/timeline C api calls, since they're unnecessary for
	the binding.  Implement the nullable property getter/setters as
	#defines since I didn't want to c&p all of them and make the
	obvious mistakes.  While I'm at it, implement the thing I needed
	nullable typed values for - "by" animation support.  Now you can
	specify any of the following combinations and get a usable
	animation: From+By, From+To, By, To.  You can actually just put
	From as well, but it won't animate (since both start end end will
	be the same).  The To property overrides the By property, if both
	are present.

	* runtime.h, runtime.cpp: add an overload of
	DependencyProperty::SetValue which takes a Value*, to enable
	nullable types to be set.  the existing SetValue method calls the
	new one with &value.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* brush.cpp: Fix comment.
	* shape.cpp: Reduce duplication.

2007-06-07  Miguel de Icaza  <miguel@novell.com>

	* runtime.h: Store Value.BOOL in an int32, simplifies my life. 

	* runtime.cpp (dependency_object_set_value,
	dependency_object_get_value): Add C# callable method calls to
	control the properties.

	(dependency_property_lookup): Add a way of find dependency
	properties.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* animation.cpp (TimeUpdated): comment out some spew.

	* runtime.cpp (SetValue): use the copy ctor, and fix != check for
	current_value and value.
	(Value::Value): add a copy ctor, which takes care of the g_strdup
	for us.

	* runtime.h: add copy ctor for Value.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* brush.cpp, geometry.cpp, shape.cpp: Protect against NULL properties.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com> 

	* geometry.cpp: #if-out transforms, it crash the xaml samples
	* runtime.h: Fix hierarchy. Panel inherits from FrameworkElement.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* animation.cpp: switch all the various linear interpolation
	expressions to using the LERP macro, and add the PointAnimation
	implementation.

	* animation.h: add PointAnimation.

	* runtime.h: add Value::POINTANIMATION.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* runtime.h (Value): add COLORANIMATION to the list of types.
	Also, add a Kind constructor so we can use that for nullable type
	default values in the ::RegisterProperty calls.  That is,
	initializing the default to Value(Value::COLOR) gives you a null
	default value with the COLOR type.

	* runtime.cpp (Value): new Kind ctor.

	* animation.cpp/.h: add ColorAnimation.

	* demo.cpp (main): add a color animation that interpolates between
	Red and Blue for the SolidColorBrush.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.cpp: Restore alpha support. Don't call cairo_set_operator
	without a cairo_save|restore pair (or without resetting it's original
	value). Anyway right now it works without any of that :)

2007-06-07  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp|h: add event triggers.
	* xaml.cpp: parse event triggers.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* animation.cpp/.h (Clock): initialize duration here.
	(TimeUpdated): instead of getting it every time through this
	function.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* animation.h: make Duration::FromSeconds return numbers of the
	same magnitude as get_now().

	* animation.cpp (Clock): fix UMR.

2007-06-07  Jackson Harper  <jackson@ximian.com>

	* xamp.cpp: Oops, not sure how that happened.  Set the property
	name correctly, not to the type name.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Apply transform. Fix default values.

2007-06-07  Miguel de Icaza  <miguel@novell.com>

	* animation.cpp (get_now): The time computation was wrong, there
	was an extra "10" in there that made all computations go astray
	and in particular cause the large values for ScaleY, which made
	getboundingbox ridiculously slow.

	For debugging purposes: ScaleY was being set to
	131472940552.95215, which came from
	DoubleAnimation:GetCurrentValue which was computing this value
	from a busted clock.

2007-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Add drawing for [Ellipse|Line|Rectangle] geometry.
	Add basic code for the other geometry types.
	* runtime.cpp|h: Add basic implementation for point_from_str and 
	rect_from_str 
	* shape.h: Export some cairo helpers.
	* shape.cpp: Refactor drawing to reuse the code from geometry.
	* xaml.cpp: Add Point and Rect parsing.

2007-06-07  Chris Toshok  <toshok@ximian.com>

	* demo.cpp: make all the animation stuff work declaratively, and
	test some of the different repeatbehavior and autoreverse
	settings.
	
	* animation.cpp: huge block of nasty code to determine our
	progress given the combinations of autoreverse and repeatbehavior.

	* animation.h: Add Duration stucture, add a few C api calls for
	getting/setting timeline properties.

	* runtime.h, runtime.cpp: add DURATION support to Value.
	
2007-06-07  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp|h: Some pieces of the triggers framework.

2007-06-07  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Handle repeat behaviors, lookup attached properties.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* animation.cpp, animation.h: add timeline_set_autoreverse.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* animation.h: add prototype for timeline_set_repeat_behavior.
	
	* animation.cpp (animation_init): register the RepeatBehavior
	property.
	(timeline_set_repeat_behavior): new function.

	* runtime.h: a better solution to enforcing types in the Value
	ctors - make Value (void*) private.  this gives compilation errors
	at all usage points where you're passing an unrecognized pointer
	type.  Also, add RepeatBehavior support to Value.

	* runtime.cpp: add repeatbehavior support to Value.
	
	* geometry.cpp: change all Value(pointer-to-struct) calls to
	Value(struct) calls.

	* transform.h: we need do define TransformGroup as a subclass of
	Transform, or the functions that SetValue a transformgroup fail to
	compile (since it's not a descendent of DependencyObject.)

2007-06-07  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Get object element property setting working.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* runtime.h, runtime.cpp: add a special void* ctor to value so
	pointers aren't silently converted to bool (bad c++, bad!), and
	have that ctor output a warning message to the console, along with
	the likely cause.

	* brush.cpp: need to deref the Color* in the Value ctor.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* animation.cpp: new dump of the animation stuff.  this is much
	closer in spirit and implementation to that of WPF's
	timing/animation system.  it's not perfect yet, but it's much,
	much closer.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* runtime.h: make the point/color/rect copy constructors take a
	ref, not a pointer.  also, make the value contructors for struct
	types by-value.

	* runtime.cpp: make the value constructors for struct types
	by-value.

	* brush.cpp (brush_init): pass the Color by value.

2007-06-06  Chris Toshok  <toshok@ximian.com>

	* runtime.h, runtime.cpp: move the Value implementation (for
	everything but the operators) to the .cpp file.

2007-06-06  Miguel de Icaza  <miguel@novell.com>

	* runtime.h, runtime.cpp: Surface is no longer derived from
	Canvas, it now instead hosts a canvas, should avoid having two
	nested canvases for loading XAML files.

	demo.cpp: update.

	Correct computation of the bounding box for shapes and videos.

	* shape.cpp: Do not pop the cairo state after draw and then call
	extents as the computation on extents is done with the current
	cairo context, not the cairo context that drew the data before
	popping (this would show up with thick brushes).

	* runtime.cpp: Add 2 instead of 1, as double to integer rounding
	can take two values (negative and positive).

	* cutil.cpp: Cut and paste cairo code here, it computes the proper
	bounding box from the extents using the current absolute matrix. 

	* ffvideo.cpp (queue_data): Memory leak gone.

2007-06-06  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Set brush attributes.

2007-06-06  Jackson Harper  <jackson@ximian.com>

	* runtime.h:
	* transform.h: Need to register this base DependencyObject for the
	xaml parser.
	* geometry.cpp: use correct value kind for registering properties
	* runtime.cpp: Don't be strict about the type with properties that
	derive from DependencyObject, we can't be too strict here, because
	of inheritance the registered type BRUSH could be set to
	SOLIDCOLORBRUSH
	- register some properties with the correct type
	
2007-06-06  Jackson Harper  <jackson@ximian.com>

	* animation.cpp|h:
	* runtime.h: Staring to add triggers
	* shape.cpp: Use brush as our property kind
	
2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.h: Add new types and SweepDirection enum.
	* geometry.cpp|h: Add PathFigure, ArcSegment, BezierSegment and 
	LineSegment classes and [g|s]etter functions.

2007-06-06  Miguel de Icaza  <miguel@novell.com>

	* runtime.h: Move all the types into the Value::Kind enumeration
	so that we can have a shared type system.

	* demo.cpp (main): Allow loading a XAML file from the command
	line, for your testing pleasure.

	* ffvideo.cpp (convert_to_rgb): We no longer need the loop to swap
	channels.

	Move to cairo to render to the screen the contents
	of the buffer.   ffmpeg and cairo do have the same RGBA format, it
	was actually the copy from this format to the screen using
	gdk_draw_pixbuf that failed: pixbuf expected the data in another
	format and there is no way to configure it.
	
	* runtime.cpp (surface_clear): use the cairo api as the surface is
	no longer living on the client buffer. 

	(surface_destroy): update

	(create_xlib, realized_callback, unrealized_callback): When the
	widget is realized, create a cairo context

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.h: Add Value support for Point and Rect
	* geometry.cpp: Implement [g|s]etters for Point and Rect properties

2007-06-06  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: Added DependencyObject::GetObjectType.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h, runtime.cpp|h: Remove the (now) useless 
	set_prop_from_str methods since everything they handled is now
	moved into DependencyProperty.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Use DependencyProperty for Shape Fill and Stroke 
	brushes. Add getter functions for fill and stroke.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.h: Call SetObjectType on Brush and SolidColorBrush

2007-06-06  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: Remove the default_values hashtable
	from DependencyObject, it's redundant since the default value
	is stored inside the DependencyProperty anyway.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* demo.cpp: Adapted to API changes.
	* brush.cpp: Add [g|s]etters for Brush and SolidColorBrush using
	DependencyProperty. Add brush initialization code.
	* runtime.cpp|h: Change Brush to inherit from DependencyObject. 
	Add Color support to Value. Call brush initialization.
	* shape.cpp: Add miter, pen join|cap and fill rule drawing support.
	* xaml.cpp: Adapted to API changes since SolidColorBrush now inherits
	from DependencyObject.

2007-06-06  Jeffrey Stedfast  <fejj@gnome.org>

	* ffvideo.cpp (convert_to_rgb): Make sure the frame->data is
	non-NULL before trying to scale.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* brush.cpp: Fix compiler warning.

2007-06-06  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp/h: initialize xaml
	- Add canvas C style constructor
	- Make SolidColorBrush's Color public
	* shape.cpp: Comment out the set_prop... stuff, this code won't be
	used anymore, now that the xaml parser is using dependency objects
	to set properties.
	* animation.cpp|h:
	* transform.cpp|h: Add some C style constructors
	* brush.cpp: Create colors from a string instead of solid brushes
	* xaml.cpp: Add in a known element tree, and move property setting
	into the xaml code, also added code for setting properties with
	property element syntax
	
2007-06-05  Miguel de Icaza  <miguel@novell.com>

	Add type checking on SetValue, RegisterProperty to avoid
	mistakes. 
	
	* runtime.cpp (SetValue): Add simple type checking
	(Register): Ensure that no empty values are passed. 

	* runtime.h (DependencyObject): events, remove unused field.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp: we need to maintain another hash table for
	DependencyProperties so we can return the actual property, not the
	default value, which is what GetDependencyProperty needs to do.
	(DependencyObject::FindName): implement this by either trying to
	use the namescope on this object or the global_NameScope (rather
	suboptimal, it's supposed to 'walk the logical tree' according to
	msdn).

	partially implement NameScope.

	* runtime.h: add NameScope, and add a uint64 Value.  Also add
	FindName on DependencyObject.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add Shape's thickness and some dash support. Add more
	[g|s]etters for Shape using DependencyProperty.
	* demo.cpp: Add thickness and dashes to the rectangles.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Move FrameworkElement stuff into runtime.cpp|h. Use
	functions to retrieve the height and width of shapes (values defined
	in FrameworkElement).
	* runtime.cpp|h: Use DependencyProperty for FrameworkElement Height 
	and Width properties.
	* demo.cpp: Adjust to API changes.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp: Remove (now) useless properties in Line.

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	* shape.cpp, ffvideo.cpp, video.cpp: Do not use x, y anymore, we
	now have an absolute affine set for us beforehand.

	* runtim.cpp: on update_xform call the parent ::get_xform_for to
	obtain the base affine transform to use.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Use DependencyProperty for properties.
	* transform.h: Protect.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.h: call SetObjectType where we need it.

	* shape.h: same.
	
	* geometry.h: same.

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	* ffvideo.cpp (VideoFfmpeg): Initialize audio_frames_size, caught
	by valgrind

	* runtime.cpp (item_set_transform): This routine was doing nothing
	but doing an invalidate of the region, updating the transform,
	updating the bounding box and re-invalidating the new area.   Move
	that logic elsewhere (it was also ignoring the affine parameter
	anyways). 

	Unify user_xform with the RenderTransform dependency property, now
	we always have a static absolute transformation in the UIElement. 

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Update shape_init with correct values and implement
	 path_[g|s]et_data.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* animation.cpp (ClockTimeChanged): use the instance variety of
	GetDependencyProperty.

	* runtime.cpp (GetDependencyProperty): just call the static
	variety with our objectType.
	(SetObjectType): method to enable subclasses to set the object
	type.

	* runtime.h: add DependencyObject::SetObjectType, as well as the
	instance version of DependencyObject::GetDependencyProperty.

	* transform.h: call SetObjectType to identify this object.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp (AddHandler): oops, g_list_append requires an assignment.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.h (Canvas): declare our dependencyproperties here.

	* runtime.cpp (canvas_init): actually assign the properties.

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>
	
	* runtime.cpp, runtime.h: Implement a DependencyProperty::
	GetDependencyProperty.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp (OnSubPropertyChanged): remove the event handler for
	the render transform and use OnSubPropertyChange instead.
	(item_set_render_transform): clean this up substantially - the
	property system handles all the "event" stuff now.
	(item_get_render_transform): we need a getter now that this uses
	the depprop stuff.
	(NotifyAttacheesOfPropertyChange): new method, call
	OnSubPropertyChanged with both the attachee's property (the thing
	storing 'this') and the subproperty that changed.
	(SetValue): complicate the attachee stuff a bit, since we need to
	store both the object and the property it's storing the value in.
	(item_init): initialize RenderTransformProperty.

	* runtime.h: make UIElement subclass from DependencyObject. This
	flattens the hierarchy some from SL (which has Visual in between,
	but we have no Visual.)

	* transform.cpp (OnPropertyChanged): call
	NotifyAttacheesOfPropertyChange.  Also, reindent some stuff.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* demo.cpp: Updated to use rectangle_set_radius_[x|y]
	* shape.cpp|h: Add [get|set]ter functions for Line and Rectangle
	* xaml.cpp: Updated for API change.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.h: Add new ctor for Color(uint). Change UIElement to inherit
	from DependencyObject.
	* brush.cpp: Complete named colors (wrt System.Windows.Media.Colors)

2007-06-05  Jeffrey Stedfast  <fejj@gnome.org>

	* ffvideo.cpp (queue_data): If we fail to get an audio codec, then
	we simply cannot play sound (or maybe there is no sound), either
	way, don't try to dereference the audio_codec pointer if it is
	NULL. Also wrapped audio setup in an #ifdef

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	Implement the OnPropertySet stuff, builds on Toshok's first pass.

	Next stage: discuss with Toshok the migration to this awesome
	framework from Events ;-)
	
	* runtime.cpp (SetValue): when adding dependencyobjects track on
	the attached object the ownership.

	Notify all containers of a property change.

	* brush.cpp (Brush): Remove AddListener, RemoveListener, we can
	use the property notification system for these.

	* runtime.h (DependencyObject): Add a "attached_list" gslist to
	keep track of all the objects where this particular
	DependencyObject has been attached to, to provide OnPropertyChange
	notifications (not hooked up yet).

	(Value): Introduce DependencyObject constructor.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Started moving properties to DependencyObject. Added
	Path.
	* geometry.cpp|h: New. System.Windows.Media.Geometry related classes
	* runtime.cpp: Added calls to shape_init and geometry_init
	* runtime.h: Added Rect structure and new DependencyObject types for
	shapes and geometry.
	* Makefile.am: Added geometry.cpp|h to source files.

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h: initialize Value to zero on construction.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* demo.cpp: abstract the cairo transformations away by using
	RotateTransforms.. and this is probably going to annoy some
	people, but make the normally stationary elements bounce between
	smaller and larger.

	* animation.h: make Clock subclass from DependencyObject.

	* animation.cpp (animation_init): assign the properties, don't
	just call Register.

	also, track the EventObject method name change.

	* runtime.cpp (item_set_render_transform): new method.  unhook the
	old transform and hook up the new one.  also, explicit set our
	transformation here.
	(SetValue): make this only do the work (and more importantly only
	call OnPropertyChanged) if the value is different.

	* runtime.h: shorten the names of the EventObject methods.  Add
	operator== and operator!= to Value.  Add an EventObject to
	DependencyObject to give us rudimentary event handlers.  Add the
	render_transform "higher-level" transform into to UIElement.

	* transform.h: add the OnPropertyChanged override and rename
	transform_get_value to transform_get_transform.

	* transform.cpp (transform_init): oops.  we need to actually
	assign the properties.
	(transform_get_transform): indent.
	(OnPropertyChanged): override this method to emit
	"TransformChanged".

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* Makefile.am (libmoon_la_SOURCES): add animation and transform to
	the build.

	* runtime.h: flesh out Value some, adding BOOL (has to be C++
	bool, not gboolean, or else it conflicts with int32), INT32,
	INT64, and STRING (char*).

	* runtime.cpp (runtime_init): call animation_init and
	transform_init.

	* animation.cpp, animation.h, transform.h, transform.cpp: get
	these using the new dependency object/value foo, and get them
	compiling.

2007-06-04  Miguel de Icaza  <miguel@novell.com>

	* runtime.h: Make the "Base" refcounting class the base for
	DependencyObject. 

	* ffvideo.cpp: Set audio initialization to zero for now, so we can
	continue debugging.

	* runtime.cpp (Canvas): override render, in preparation for using
	attached properties.   I get the feeling am going to regret not
	keeping the top/left attached properties somewhere else.

	(Value): introduce the discriminating union for values as
	discussed on irc.
	
	(DependencyObject): use lower case name for properties.
	Take Value * instead of void *, this is so we can represent NULL
	values (is this a good idea Chris, or do we want to have a
	Value.Type.NULL enumeration value?

	Update hash table creation to g_free the result on hash table
	update and removal.

	(Event): Update indentation to be Linux-like instead of GNU like.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add Poly[line|gon] drawing code and C helper functions 
	to create them. Replace the "old" C1 constant in Ellipse::Draw with 
	ARC_TO_BEZIER (now that I know where it comes from ;-)

2007-06-04  Jeffrey Stedfast  <fejj@novell.com>

	* ffvideo.cpp (queue_data): Got sound kinda sorta working...

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Give elements a type

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: implemented DependencyProperty and DependencyObject.

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp: initial pass at some of the
	animation stuff.  doesn't build yet.

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp, runtime.h: add EventObject, a c++ only base class
	for managing events.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.h: Remove Ellipse::set_prop_from_str, it's "virtually" empty
	and added Draw methods to Polygon and Polyline.
	* shape.cpp: Added round-corner rectangle support (RadiusX, RadiusY)
	and match changes in header file.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp/h: width and height are properties of the
	FrameworkElement.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp/h: add ellipse_new
	- set width/height on ellipses (ellipsi ?) and draw them.
	* xaml.cpp: create ellipses, get zorder correct

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: put in character data functionality, eventually we
	will need to add FrameworkElement methods for setting the default
	content element. See
	http://msdn2.microsoft.com/en-us/library/ms752059.aspx#contentmodels
	for more info on content properties.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* demo.cpp: Include shape.h and use a rounded-rectangle
	* runtime.h: Added FillRule and moved out Shapes.
	* shape.h: New. Moved all shapes from runtime.h and added new ones.
	* shape.cpp: Added Polygon and Polyline.
	* xaml.cpp: Include shape.h
	* Makefile.am: Add shape.h

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* transform.cpp, transform.h: initial code for the transform
	objects.  doesn't compile yet.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* demo.cpp: fix typo

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com> 

	* demo.cpp: Fix for API changes.
	* runtime.h: Add FrameworkElement, other Shape properties and move
	around some properties to match the managed definitions.
	* shape.cpp: Add setters for new Shape properties and move properties
	parsing to match managed definitions.
	* xaml.cpp: Fix for API changes.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp: Don't typecast doubles into ints.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* runtime.h:
	* xaml.cpp: Implement function that allows you to load xaml from a
	chunk of text.
	* demo.cpp: add a very small xaml demo

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: remove old no longer used function.
	- track whether or not we are adding to a panel instead of surface
	* shape.cpp: Fix typo, need to set line_* not x1, x2, etc.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp: Add new methods to allow shapes to have their
	properties filled in from text values.

	* brush.cpp: Start work on allowing solid color brushes to be
	created from strings.

	* runtime.cpp: stub in methods for setting properties on canvas
	and UIElements (these had some meat but I am removing it now that
	some of the names are updated, will put back later).

	* runtime.h: add some methods and functions for XAML parsing.

	* xaml.cpp: Initial implementation of the XAML parser.

2007-06-03  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (Collection, Panel): The beginning of an API to
	encapsulate collections that we will expose to the unmanaged
	world.  

	This should be the backend for the base collection class in agclr
	for the strongly typed types.   

	The idea is to have the MS.Internal.Collection<T> be a proxy that
	contains an IntPtr pointer to the C++ Collection instance and map
	the various add/remove methods to it.

	The immediate goal is to be able to do from C#:

	        Rectangle r = new Rectangle ();
		r.Brush = new SolidColorBrush (new Color (1, 0, 0));
		Canvas.Children.Add (r);

2007-06-02  Miguel de Icaza  <miguel@novell.com>

	Implement support for the render origin.
	
	* runtime.cpp (item_invalidate): add one to cope with the rouding
	from floats to ints (fixes some trailing junk).

	Item: redo the affine transformation setup to support both the
	render_transform_origin property and avoid recomputing all of this
	on each repaint request.

	* ffvideo.cpp: Changed the code to do the actual video decoding on
	the main thread so we can put all the video and audio in the
	queues before we start rendering.

	Failed attempts at getting audio to work.

	* Everywhere: renamed Item to UIElement to better match the actual
	class hierarchy that we will be exposing.

2007-06-01  Jackson Harper  <jackson@ximian.com>

	* shape.cpp: Fix typo.

2007-06-01  Miguel de Icaza  <miguel@novell.com>

	* ffvideo.cpp: No longer use CMD_INITED, instead use g_idle_add to
	notify a special function (callback_video_inited).  Makes me
	wonder if I should do the same for the new-frame call

	Initialize the cairo surface on the callback_video_inited routine
	instead of doing this on the decoder thread (that was a mistake).

	This solves the misterious case of the video that randomly did not
	show up.

2007-05-29  Miguel de Icaza  <miguel@novell.com>

	* video.cpp (load_next_frame): reimplement the video play back
	logic so that it will now properly paint the proper frame on the
	screen as needed.

	Add logic to skip frames if video is playing back too slowly, and
	to resume playback when new frames are ready.

	Currently its computing the delay using the n_frame_rate field
	(which no sample uses, but I could not find any other way of
	estimating the frame rate other than this.

	It works at least with some sample streams that I have with 30 fps
	and 15 fps.

	* runtime.cpp: Move the GtkDrawingArea widget into the Surface,
	and handle exposes in the runtime, not in the demo.   Show the
	widget (thats why I was not getting the expose events on the
	widget, duh). 

2007-05-26  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (Brush, SolidBrush): Introduce brushes. 

	(Shape): introduce reusable drawing framework for shapes, not
	complete. 
	
	(Line): introduce second user besides rectangles. 

	Remove agg test code.

	(Group::getbounds): implement.
