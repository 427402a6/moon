2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* demo.cpp: Adapted to API changes.
	* brush.cpp: Add [g|s]etters for Brush and SolidColorBrush using
	DependencyProperty. Add brush initialization code.
	* runtime.cpp|h: Change Brush to inherit from DependencyObject. 
	Add Color support to Value. Call brush initialization.
	* shape.cpp: Add miter, pen join|cap and fill rule drawing support.
	* xaml.cpp: Adapted to API changes since SolidColorBrush now inherits
	from DependencyObject.

2007-06-06  Jeffrey Stedfast  <fejj@gnome.org>

	* ffvideo.cpp (convert_to_rgb): Make sure the frame->data is
	non-NULL before trying to scale.

2007-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* brush.cpp: Fix compiler warning.

2007-06-06  Jackson Harper  <jackson@ximian.com>

	* runtime.cpp/h: initialize xaml
	- Add canvas C style constructor
	- Make SolidColorBrush's Color public
	* shape.cpp: Comment out the set_prop... stuff, this code won't be
	used anymore, now that the xaml parser is using dependency objects
	to set properties.
	* animation.cpp|h:
	* transform.cpp|h: Add some C style constructors
	* brush.cpp: Create colors from a string instead of solid brushes
	* xaml.cpp: Add in a known element tree, and move property setting
	into the xaml code, also added code for setting properties with
	property element syntax
	
2007-06-05  Miguel de Icaza  <miguel@novell.com>

	Add type checking on SetValue, RegisterProperty to avoid
	mistakes. 
	
	* runtime.cpp (SetValue): Add simple type checking
	(Register): Ensure that no empty values are passed. 

	* runtime.h (DependencyObject): events, remove unused field.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp: we need to maintain another hash table for
	DependencyProperties so we can return the actual property, not the
	default value, which is what GetDependencyProperty needs to do.
	(DependencyObject::FindName): implement this by either trying to
	use the namescope on this object or the global_NameScope (rather
	suboptimal, it's supposed to 'walk the logical tree' according to
	msdn).

	partially implement NameScope.

	* runtime.h: add NameScope, and add a uint64 Value.  Also add
	FindName on DependencyObject.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add Shape's thickness and some dash support. Add more
	[g|s]etters for Shape using DependencyProperty.
	* demo.cpp: Add thickness and dashes to the rectangles.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Move FrameworkElement stuff into runtime.cpp|h. Use
	functions to retrieve the height and width of shapes (values defined
	in FrameworkElement).
	* runtime.cpp|h: Use DependencyProperty for FrameworkElement Height 
	and Width properties.
	* demo.cpp: Adjust to API changes.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp: Remove (now) useless properties in Line.

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	* shape.cpp, ffvideo.cpp, video.cpp: Do not use x, y anymore, we
	now have an absolute affine set for us beforehand.

	* runtim.cpp: on update_xform call the parent ::get_xform_for to
	obtain the base affine transform to use.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* geometry.cpp|h: Use DependencyProperty for properties.
	* transform.h: Protect.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.h: call SetObjectType where we need it.

	* shape.h: same.
	
	* geometry.h: same.

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	* ffvideo.cpp (VideoFfmpeg): Initialize audio_frames_size, caught
	by valgrind

	* runtime.cpp (item_set_transform): This routine was doing nothing
	but doing an invalidate of the region, updating the transform,
	updating the bounding box and re-invalidating the new area.   Move
	that logic elsewhere (it was also ignoring the affine parameter
	anyways). 

	Unify user_xform with the RenderTransform dependency property, now
	we always have a static absolute transformation in the UIElement. 

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* shape.cpp|h: Update shape_init with correct values and implement
	 path_[g|s]et_data.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* animation.cpp (ClockTimeChanged): use the instance variety of
	GetDependencyProperty.

	* runtime.cpp (GetDependencyProperty): just call the static
	variety with our objectType.
	(SetObjectType): method to enable subclasses to set the object
	type.

	* runtime.h: add DependencyObject::SetObjectType, as well as the
	instance version of DependencyObject::GetDependencyProperty.

	* transform.h: call SetObjectType to identify this object.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp (AddHandler): oops, g_list_append requires an assignment.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.h (Canvas): declare our dependencyproperties here.

	* runtime.cpp (canvas_init): actually assign the properties.

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>
	
	* runtime.cpp, runtime.h: Implement a DependencyProperty::
	GetDependencyProperty.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp (OnSubPropertyChanged): remove the event handler for
	the render transform and use OnSubPropertyChange instead.
	(item_set_render_transform): clean this up substantially - the
	property system handles all the "event" stuff now.
	(item_get_render_transform): we need a getter now that this uses
	the depprop stuff.
	(NotifyAttacheesOfPropertyChange): new method, call
	OnSubPropertyChanged with both the attachee's property (the thing
	storing 'this') and the subproperty that changed.
	(SetValue): complicate the attachee stuff a bit, since we need to
	store both the object and the property it's storing the value in.
	(item_init): initialize RenderTransformProperty.

	* runtime.h: make UIElement subclass from DependencyObject. This
	flattens the hierarchy some from SL (which has Visual in between,
	but we have no Visual.)

	* transform.cpp (OnPropertyChanged): call
	NotifyAttacheesOfPropertyChange.  Also, reindent some stuff.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* demo.cpp: Updated to use rectangle_set_radius_[x|y]
	* shape.cpp|h: Add [get|set]ter functions for Line and Rectangle
	* xaml.cpp: Updated for API change.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* runtime.h: Add new ctor for Color(uint). Change UIElement to inherit
	from DependencyObject.
	* brush.cpp: Complete named colors (wrt System.Windows.Media.Colors)

2007-06-05  Jeffrey Stedfast  <fejj@gnome.org>

	* ffvideo.cpp (queue_data): If we fail to get an audio codec, then
	we simply cannot play sound (or maybe there is no sound), either
	way, don't try to dereference the audio_codec pointer if it is
	NULL. Also wrapped audio setup in an #ifdef

2007-06-05  Miguel de Icaza  <miguel@novell.com>

	Implement the OnPropertySet stuff, builds on Toshok's first pass.

	Next stage: discuss with Toshok the migration to this awesome
	framework from Events ;-)
	
	* runtime.cpp (SetValue): when adding dependencyobjects track on
	the attached object the ownership.

	Notify all containers of a property change.

	* brush.cpp (Brush): Remove AddListener, RemoveListener, we can
	use the property notification system for these.

	* runtime.h (DependencyObject): Add a "attached_list" gslist to
	keep track of all the objects where this particular
	DependencyObject has been attached to, to provide OnPropertyChange
	notifications (not hooked up yet).

	(Value): Introduce DependencyObject constructor.

2007-06-05  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Started moving properties to DependencyObject. Added
	Path.
	* geometry.cpp|h: New. System.Windows.Media.Geometry related classes
	* runtime.cpp: Added calls to shape_init and geometry_init
	* runtime.h: Added Rect structure and new DependencyObject types for
	shapes and geometry.
	* Makefile.am: Added geometry.cpp|h to source files.

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.h: initialize Value to zero on construction.

2007-06-05  Chris Toshok  <toshok@ximian.com>

	* demo.cpp: abstract the cairo transformations away by using
	RotateTransforms.. and this is probably going to annoy some
	people, but make the normally stationary elements bounce between
	smaller and larger.

	* animation.h: make Clock subclass from DependencyObject.

	* animation.cpp (animation_init): assign the properties, don't
	just call Register.

	also, track the EventObject method name change.

	* runtime.cpp (item_set_render_transform): new method.  unhook the
	old transform and hook up the new one.  also, explicit set our
	transformation here.
	(SetValue): make this only do the work (and more importantly only
	call OnPropertyChanged) if the value is different.

	* runtime.h: shorten the names of the EventObject methods.  Add
	operator== and operator!= to Value.  Add an EventObject to
	DependencyObject to give us rudimentary event handlers.  Add the
	render_transform "higher-level" transform into to UIElement.

	* transform.h: add the OnPropertyChanged override and rename
	transform_get_value to transform_get_transform.

	* transform.cpp (transform_init): oops.  we need to actually
	assign the properties.
	(transform_get_transform): indent.
	(OnPropertyChanged): override this method to emit
	"TransformChanged".

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* Makefile.am (libmoon_la_SOURCES): add animation and transform to
	the build.

	* runtime.h: flesh out Value some, adding BOOL (has to be C++
	bool, not gboolean, or else it conflicts with int32), INT32,
	INT64, and STRING (char*).

	* runtime.cpp (runtime_init): call animation_init and
	transform_init.

	* animation.cpp, animation.h, transform.h, transform.cpp: get
	these using the new dependency object/value foo, and get them
	compiling.

2007-06-04  Miguel de Icaza  <miguel@novell.com>

	* runtime.h: Make the "Base" refcounting class the base for
	DependencyObject. 

	* ffvideo.cpp: Set audio initialization to zero for now, so we can
	continue debugging.

	* runtime.cpp (Canvas): override render, in preparation for using
	attached properties.   I get the feeling am going to regret not
	keeping the top/left attached properties somewhere else.

	(Value): introduce the discriminating union for values as
	discussed on irc.
	
	(DependencyObject): use lower case name for properties.
	Take Value * instead of void *, this is so we can represent NULL
	values (is this a good idea Chris, or do we want to have a
	Value.Type.NULL enumeration value?

	Update hash table creation to g_free the result on hash table
	update and removal.

	(Event): Update indentation to be Linux-like instead of GNU like.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp|h: Add Poly[line|gon] drawing code and C helper functions 
	to create them. Replace the "old" C1 constant in Ellipse::Draw with 
	ARC_TO_BEZIER (now that I know where it comes from ;-)

2007-06-04  Jeffrey Stedfast  <fejj@novell.com>

	* ffvideo.cpp (queue_data): Got sound kinda sorta working...

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: Give elements a type

2007-06-05  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* runtime.cpp, runtime.h: implemented DependencyProperty and DependencyObject.

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* animation.h, animation.cpp: initial pass at some of the
	animation stuff.  doesn't build yet.

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* runtime.cpp, runtime.h: add EventObject, a c++ only base class
	for managing events.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.h: Remove Ellipse::set_prop_from_str, it's "virtually" empty
	and added Draw methods to Polygon and Polyline.
	* shape.cpp: Added round-corner rectangle support (RadiusX, RadiusY)
	and match changes in header file.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp/h: width and height are properties of the
	FrameworkElement.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp/h: add ellipse_new
	- set width/height on ellipses (ellipsi ?) and draw them.
	* xaml.cpp: create ellipses, get zorder correct

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: put in character data functionality, eventually we
	will need to add FrameworkElement methods for setting the default
	content element. See
	http://msdn2.microsoft.com/en-us/library/ms752059.aspx#contentmodels
	for more info on content properties.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* demo.cpp: Include shape.h and use a rounded-rectangle
	* runtime.h: Added FillRule and moved out Shapes.
	* shape.h: New. Moved all shapes from runtime.h and added new ones.
	* shape.cpp: Added Polygon and Polyline.
	* xaml.cpp: Include shape.h
	* Makefile.am: Add shape.h

2007-06-04  Chris Toshok  <toshok@ximian.com>

	* transform.cpp, transform.h: initial code for the transform
	objects.  doesn't compile yet.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* demo.cpp: fix typo

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com> 

	* demo.cpp: Fix for API changes.
	* runtime.h: Add FrameworkElement, other Shape properties and move
	around some properties to match the managed definitions.
	* shape.cpp: Add setters for new Shape properties and move properties
	parsing to match managed definitions.
	* xaml.cpp: Fix for API changes.

2007-06-04  Sebastien Pouliot  <sebastien@ximian.com>

	* shape.cpp: Don't typecast doubles into ints.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* runtime.h:
	* xaml.cpp: Implement function that allows you to load xaml from a
	chunk of text.
	* demo.cpp: add a very small xaml demo

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* xaml.cpp: remove old no longer used function.
	- track whether or not we are adding to a panel instead of surface
	* shape.cpp: Fix typo, need to set line_* not x1, x2, etc.

2007-06-04  Jackson Harper  <jackson@ximian.com>

	* shape.cpp: Add new methods to allow shapes to have their
	properties filled in from text values.

	* brush.cpp: Start work on allowing solid color brushes to be
	created from strings.

	* runtime.cpp: stub in methods for setting properties on canvas
	and UIElements (these had some meat but I am removing it now that
	some of the names are updated, will put back later).

	* runtime.h: add some methods and functions for XAML parsing.

	* xaml.cpp: Initial implementation of the XAML parser.

2007-06-03  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (Collection, Panel): The beginning of an API to
	encapsulate collections that we will expose to the unmanaged
	world.  

	This should be the backend for the base collection class in agclr
	for the strongly typed types.   

	The idea is to have the MS.Internal.Collection<T> be a proxy that
	contains an IntPtr pointer to the C++ Collection instance and map
	the various add/remove methods to it.

	The immediate goal is to be able to do from C#:

	        Rectangle r = new Rectangle ();
		r.Brush = new SolidColorBrush (new Color (1, 0, 0));
		Canvas.Children.Add (r);

2007-06-02  Miguel de Icaza  <miguel@novell.com>

	Implement support for the render origin.
	
	* runtime.cpp (item_invalidate): add one to cope with the rouding
	from floats to ints (fixes some trailing junk).

	Item: redo the affine transformation setup to support both the
	render_transform_origin property and avoid recomputing all of this
	on each repaint request.

	* ffvideo.cpp: Changed the code to do the actual video decoding on
	the main thread so we can put all the video and audio in the
	queues before we start rendering.

	Failed attempts at getting audio to work.

	* Everywhere: renamed Item to UIElement to better match the actual
	class hierarchy that we will be exposing.

2007-06-01  Jackson Harper  <jackson@ximian.com>

	* shape.cpp: Fix typo.

2007-06-01  Miguel de Icaza  <miguel@novell.com>

	* ffvideo.cpp: No longer use CMD_INITED, instead use g_idle_add to
	notify a special function (callback_video_inited).  Makes me
	wonder if I should do the same for the new-frame call

	Initialize the cairo surface on the callback_video_inited routine
	instead of doing this on the decoder thread (that was a mistake).

	This solves the misterious case of the video that randomly did not
	show up.

2007-05-29  Miguel de Icaza  <miguel@novell.com>

	* video.cpp (load_next_frame): reimplement the video play back
	logic so that it will now properly paint the proper frame on the
	screen as needed.

	Add logic to skip frames if video is playing back too slowly, and
	to resume playback when new frames are ready.

	Currently its computing the delay using the n_frame_rate field
	(which no sample uses, but I could not find any other way of
	estimating the frame rate other than this.

	It works at least with some sample streams that I have with 30 fps
	and 15 fps.

	* runtime.cpp: Move the GtkDrawingArea widget into the Surface,
	and handle exposes in the runtime, not in the demo.   Show the
	widget (thats why I was not getting the expose events on the
	widget, duh). 

2007-05-26  Miguel de Icaza  <miguel@novell.com>

	* runtime.cpp (Brush, SolidBrush): Introduce brushes. 

	(Shape): introduce reusable drawing framework for shapes, not
	complete. 
	
	(Line): introduce second user besides rectangles. 

	Remove agg test code.

	(Group::getbounds): implement.
