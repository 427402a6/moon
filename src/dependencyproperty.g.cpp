/*
 * Automatically generated, do not edit this file directly
 */


#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "animation.h"
#include "animation2.h"
#include "application.h"
#include "bitmapimage.h"
#include "border.h"
#include "brush.h"
#include "canvas.h"
#include "clock.h"
#include "collection.h"
#include "color.h"
#include "contentcontrol.h"
#include "control.h"
#include "deepzoomimagetilesource.h"
#include "dependencyobject.h"
#include "dependencyproperty.h"
#include "deployment.h"
#include "downloader.h"
#include "frameworkelement.h"
#include "geometry.h"
#include "grid.h"
#include "media.h"
#include "mediaelement.h"
#include "multiscaleimage.h"
#include "multiscalesubimage.h"
#include "namescope.h"
#include "panel.h"
#include "popup.h"
#include "shape.h"
#include "style.h"
#include "stylus.h"
#include "template.h"
#include "text.h"
#include "textbox.h"
#include "transform.h"
#include "trigger.h"
#include "uielement.h"
#include "usercontrol.h"
#include "validators.h"

void
Types::RegisterNativeProperties ()
{
	Application::ResourcesProperty = DependencyProperty::RegisterFull (this, Type::APPLICATION, "Resources", NULL, Type::RESOURCE_DICTIONARY, true, false, false, false, NULL, NULL, false, false);
	ArcSegment::IsLargeArcProperty = DependencyProperty::Register (this, Type::ARCSEGMENT, "IsLargeArc", new Value (false), Type::BOOL);
	ArcSegment::PointProperty = DependencyProperty::Register (this, Type::ARCSEGMENT, "Point", Type::POINT);
	ArcSegment::RotationAngleProperty = DependencyProperty::Register (this, Type::ARCSEGMENT, "RotationAngle", new Value (0.0), Type::DOUBLE);
	ArcSegment::SizeProperty = DependencyProperty::Register (this, Type::ARCSEGMENT, "Size", Type::POINT);
	ArcSegment::SweepDirectionProperty = DependencyProperty::Register (this, Type::ARCSEGMENT, "SweepDirection", new Value (SweepDirectionCounterclockwise), Type::INT32);
	AssemblyPart::SourceProperty = DependencyProperty::Register (this, Type::ASSEMBLYPART, "Source", Type::STRING);
	BeginStoryboard::StoryboardProperty = DependencyProperty::Register (this, Type::BEGINSTORYBOARD, "Storyboard", Type::STORYBOARD);
	BezierSegment::Point1Property = DependencyProperty::Register (this, Type::BEZIERSEGMENT, "Point1", Type::POINT);
	BezierSegment::Point2Property = DependencyProperty::Register (this, Type::BEZIERSEGMENT, "Point2", Type::POINT);
	BezierSegment::Point3Property = DependencyProperty::Register (this, Type::BEZIERSEGMENT, "Point3", Type::POINT);
	BitmapImage::UriSourceProperty = DependencyProperty::Register (this, Type::BITMAPIMAGE, "UriSource", new Value (""), Type::STRING);
	Border::BackgroundProperty = DependencyProperty::Register (this, Type::BORDER, "Background", Type::BRUSH);
	Border::BorderBrushProperty = DependencyProperty::Register (this, Type::BORDER, "BorderBrush", Type::BRUSH);
	Border::BorderThicknessProperty = DependencyProperty::RegisterFull (this, Type::BORDER, "BorderThickness", new Value (Thickness(0)), Type::THICKNESS, false, false, false, false, NULL, Validators::BorderThicknessValidator, false, false);
	Border::ChildProperty = DependencyProperty::Register (this, Type::BORDER, "Child", Type::UIELEMENT);
	Border::CornerRadiusProperty = DependencyProperty::RegisterFull (this, Type::BORDER, "CornerRadius", NULL, Type::CORNERRADIUS, false, false, false, false, NULL, Validators::CornerRadiusValidator, false, false);
	Border::PaddingProperty = DependencyProperty::RegisterFull (this, Type::BORDER, "Padding", new Value (Thickness(0)), Type::THICKNESS, false, false, false, false, NULL, Validators::BorderThicknessValidator, false, false);
	Brush::ChangedProperty = DependencyProperty::Register (this, Type::BRUSH, "Changed", Type::BOOL);
	Brush::OpacityProperty = DependencyProperty::Register (this, Type::BRUSH, "Opacity", new Value (1.0), Type::DOUBLE);
	Brush::RelativeTransformProperty = DependencyProperty::Register (this, Type::BRUSH, "RelativeTransform", new Value (new MatrixTransform ()), Type::TRANSFORM);
	Brush::TransformProperty = DependencyProperty::Register (this, Type::BRUSH, "Transform", new Value (new MatrixTransform ()), Type::TRANSFORM);
	Canvas::LeftProperty = DependencyProperty::RegisterFull (this, Type::CANVAS, "Left", new Value (0.0), Type::DOUBLE, false, true, false, false, NULL, NULL, false, false);
	Canvas::TopProperty = DependencyProperty::RegisterFull (this, Type::CANVAS, "Top", new Value (0.0), Type::DOUBLE, false, true, false, false, NULL, NULL, false, false);
	Canvas::ZIndexProperty = DependencyProperty::RegisterFull (this, Type::CANVAS, "ZIndex", new Value (0), Type::INT32, false, true, false, false, NULL, NULL, false, false);
	Collection::CountProperty = DependencyProperty::Register (this, Type::COLLECTION, "Count", new Value (0), Type::INT32);
	ColorAnimation::ByProperty = DependencyProperty::Register (this, Type::COLORANIMATION, "By", Type::COLOR);
	ColorAnimation::FromProperty = DependencyProperty::Register (this, Type::COLORANIMATION, "From", Type::COLOR);
	ColorAnimation::ToProperty = DependencyProperty::Register (this, Type::COLORANIMATION, "To", Type::COLOR);
	ColorAnimationUsingKeyFrames::KeyFramesProperty = DependencyProperty::RegisterFull (this, Type::COLORANIMATIONUSINGKEYFRAMES, "KeyFrames", NULL, Type::COLORKEYFRAME_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	ColorKeyFrame::KeyTimeProperty = DependencyProperty::Register (this, Type::COLORKEYFRAME, "KeyTime", Type::KEYTIME);
	ColorKeyFrame::ValueProperty = DependencyProperty::Register (this, Type::COLORKEYFRAME, "Value", Type::COLOR);
	ColumnDefinition::MaxWidthProperty = DependencyProperty::Register (this, Type::COLUMNDEFINITION, "MaxWidth", new Value (INFINITY), Type::DOUBLE);
	ColumnDefinition::MinWidthProperty = DependencyProperty::Register (this, Type::COLUMNDEFINITION, "MinWidth", new Value (0.0), Type::DOUBLE);
	ColumnDefinition::WidthProperty = DependencyProperty::Register (this, Type::COLUMNDEFINITION, "Width", new Value (GridLength (1.0, GridUnitTypeStar)), Type::GRIDLENGTH);
	ContentControl::ContentProperty = DependencyProperty::Register (this, Type::CONTENTCONTROL, "Content", Type::OBJECT);
	ContentControl::ContentTemplateProperty = DependencyProperty::Register (this, Type::CONTENTCONTROL, "ContentTemplate", Type::DATATEMPLATE);
	Control::BackgroundProperty = DependencyProperty::Register (this, Type::CONTROL, "Background", Type::BRUSH);
	Control::BorderBrushProperty = DependencyProperty::Register (this, Type::CONTROL, "BorderBrush", Type::BRUSH);
	Control::BorderThicknessProperty = DependencyProperty::Register (this, Type::CONTROL, "BorderThickness", new Value (Thickness(0.0)), Type::THICKNESS);
	Control::DefaultStyleKeyProperty = DependencyProperty::Register (this, Type::CONTROL, "DefaultStyleKey", Type::MANAGEDTYPEINFO);
	Control::FontFamilyProperty = DependencyProperty::Register (this, Type::CONTROL, "FontFamily", new Value (FontFamily(CONTROL_FONT_FAMILY)), Type::FONTFAMILY);
	Control::FontSizeProperty = DependencyProperty::Register (this, Type::CONTROL, "FontSize", new Value (CONTROL_FONT_SIZE), Type::DOUBLE);
	Control::FontStretchProperty = DependencyProperty::Register (this, Type::CONTROL, "FontStretch", new Value (CONTROL_FONT_STRETCH), Type::INT32);
	Control::FontStyleProperty = DependencyProperty::Register (this, Type::CONTROL, "FontStyle", new Value (CONTROL_FONT_STYLE), Type::INT32);
	Control::FontWeightProperty = DependencyProperty::Register (this, Type::CONTROL, "FontWeight", new Value (CONTROL_FONT_WEIGHT), Type::INT32);
	Control::ForegroundProperty = DependencyProperty::Register (this, Type::CONTROL, "Foreground", Type::BRUSH);
	Control::HorizontalContentAlignmentProperty = DependencyProperty::Register (this, Type::CONTROL, "HorizontalContentAlignment", new Value (HorizontalAlignmentCenter), Type::INT32);
	Control::IsTabStopProperty = DependencyProperty::Register (this, Type::CONTROL, "IsTabStop", new Value (true), Type::BOOL);
	Control::PaddingProperty = DependencyProperty::Register (this, Type::CONTROL, "Padding", new Value (Thickness(0.0)), Type::THICKNESS);
	Control::TabIndexProperty = DependencyProperty::Register (this, Type::CONTROL, "TabIndex", new Value (INT_MAX), Type::INT32);
	Control::TabNavigationProperty = DependencyProperty::Register (this, Type::CONTROL, "TabNavigation", new Value (KeyboardNavigationModeLocal), Type::INT32);
	Control::TemplateProperty = DependencyProperty::RegisterFull (this, Type::CONTROL, "Template", NULL, Type::CONTROLTEMPLATE, false, false, false, false, NULL, Validators::TemplateValidator, false, false);
	Control::VerticalContentAlignmentProperty = DependencyProperty::Register (this, Type::CONTROL, "VerticalContentAlignment", new Value (VerticalAlignmentCenter), Type::INT32);
	ControlTemplate::TargetTypeProperty = DependencyProperty::Register (this, Type::CONTROLTEMPLATE, "TargetType", Type::MANAGEDTYPEINFO);
	DeepZoomImageTileSource::UriSourceProperty = DependencyProperty::Register (this, Type::DEEPZOOMIMAGETILESOURCE, "UriSource", Type::STRING);
	DependencyObject::NameProperty = DependencyProperty::Register (this, Type::DEPENDENCY_OBJECT, "Name", new Value (""), Type::STRING);
	Deployment::EntryPointAssemblyProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "EntryPointAssembly", Type::STRING);
	Deployment::EntryPointTypeProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "EntryPointType", Type::STRING);
	Deployment::ExternalCallersFromCrossDomainProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "ExternalCallersFromCrossDomain", new Value (CrossDomainAccessNoAccess), Type::INT32);
	Deployment::PartsProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "Parts", Type::ASSEMBLYPART_COLLECTION);
	Deployment::RuntimeVersionProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "RuntimeVersion", Type::STRING);
	Deployment::SurfaceProperty = DependencyProperty::Register (this, Type::DEPLOYMENT, "Surface", Type::SURFACE);
	DoubleAnimation::ByProperty = DependencyProperty::Register (this, Type::DOUBLEANIMATION, "By", Type::DOUBLE);
	DoubleAnimation::FromProperty = DependencyProperty::Register (this, Type::DOUBLEANIMATION, "From", Type::DOUBLE);
	DoubleAnimation::ToProperty = DependencyProperty::Register (this, Type::DOUBLEANIMATION, "To", Type::DOUBLE);
	DoubleAnimationUsingKeyFrames::KeyFramesProperty = DependencyProperty::RegisterFull (this, Type::DOUBLEANIMATIONUSINGKEYFRAMES, "KeyFrames", NULL, Type::DOUBLEKEYFRAME_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	DoubleKeyFrame::KeyTimeProperty = DependencyProperty::Register (this, Type::DOUBLEKEYFRAME, "KeyTime", Type::KEYTIME);
	DoubleKeyFrame::ValueProperty = DependencyProperty::Register (this, Type::DOUBLEKEYFRAME, "Value", Type::DOUBLE);
	Downloader::DownloadProgressProperty = DependencyProperty::Register (this, Type::DOWNLOADER, "DownloadProgress", new Value (0.0), Type::DOUBLE);
	Downloader::ResponseTextProperty = DependencyProperty::Register (this, Type::DOWNLOADER, "ResponseText", Type::STRING);
	Downloader::StatusProperty = DependencyProperty::Register (this, Type::DOWNLOADER, "Status", new Value (0), Type::INT32);
	Downloader::StatusTextProperty = DependencyProperty::Register (this, Type::DOWNLOADER, "StatusText", new Value (""), Type::STRING);
	Downloader::UriProperty = DependencyProperty::Register (this, Type::DOWNLOADER, "Uri", Type::STRING);
	DrawingAttributes::ColorProperty = DependencyProperty::Register (this, Type::DRAWINGATTRIBUTES, "Color", new Value (Color (0xFF000000)), Type::COLOR);
	DrawingAttributes::HeightProperty = DependencyProperty::Register (this, Type::DRAWINGATTRIBUTES, "Height", new Value (3.0), Type::DOUBLE);
	DrawingAttributes::OutlineColorProperty = DependencyProperty::Register (this, Type::DRAWINGATTRIBUTES, "OutlineColor", new Value (Color (0x00000000)), Type::COLOR);
	DrawingAttributes::WidthProperty = DependencyProperty::Register (this, Type::DRAWINGATTRIBUTES, "Width", new Value (3.0), Type::DOUBLE);
	EllipseGeometry::CenterProperty = DependencyProperty::Register (this, Type::ELLIPSEGEOMETRY, "Center", Type::POINT);
	EllipseGeometry::RadiusXProperty = DependencyProperty::Register (this, Type::ELLIPSEGEOMETRY, "RadiusX", new Value (0.0), Type::DOUBLE);
	EllipseGeometry::RadiusYProperty = DependencyProperty::Register (this, Type::ELLIPSEGEOMETRY, "RadiusY", new Value (0.0), Type::DOUBLE);
	EventTrigger::ActionsProperty = DependencyProperty::RegisterFull (this, Type::EVENTTRIGGER, "Actions", NULL, Type::TRIGGERACTION_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	EventTrigger::RoutedEventProperty = DependencyProperty::Register (this, Type::EVENTTRIGGER, "RoutedEvent", Type::STRING);
	FrameworkElement::ActualHeightProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "ActualHeight", new Value (0.0), Type::DOUBLE);
	FrameworkElement::ActualWidthProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "ActualWidth", new Value (0.0), Type::DOUBLE);
	FrameworkElement::DataContextProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "DataContext", Type::OBJECT);
	FrameworkElement::HeightProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "Height", new Value (NAN), Type::DOUBLE);
	FrameworkElement::HorizontalAlignmentProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "HorizontalAlignment", new Value (HorizontalAlignmentStretch), Type::INT32);
	FrameworkElement::LanguageProperty = DependencyProperty::RegisterFull (this, Type::FRAMEWORKELEMENT, "Language", new Value ("en-US"), Type::STRING, false, false, false, false, NULL, Validators::NonNullStringValidator, false, false);
	FrameworkElement::MarginProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "Margin", new Value (Thickness (0)), Type::THICKNESS);
	FrameworkElement::MaxHeightProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "MaxHeight", new Value (INFINITY), Type::DOUBLE);
	FrameworkElement::MaxWidthProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "MaxWidth", new Value (INFINITY), Type::DOUBLE);
	FrameworkElement::MinHeightProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "MinHeight", new Value (0.0), Type::DOUBLE);
	FrameworkElement::MinWidthProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "MinWidth", new Value (0.0), Type::DOUBLE);
	FrameworkElement::StyleProperty = DependencyProperty::RegisterFull (this, Type::FRAMEWORKELEMENT, "Style", NULL, Type::STYLE, false, false, false, false, NULL, Validators::StyleValidator, false, false);
	FrameworkElement::VerticalAlignmentProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "VerticalAlignment", new Value (VerticalAlignmentStretch), Type::INT32);
	FrameworkElement::WidthProperty = DependencyProperty::Register (this, Type::FRAMEWORKELEMENT, "Width", new Value (NAN), Type::DOUBLE);
	Geometry::TransformProperty = DependencyProperty::Register (this, Type::GEOMETRY, "Transform", Type::TRANSFORM);
	GeometryGroup::ChildrenProperty = DependencyProperty::RegisterFull (this, Type::GEOMETRYGROUP, "Children", NULL, Type::GEOMETRY_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	GeometryGroup::FillRuleProperty = DependencyProperty::Register (this, Type::GEOMETRYGROUP, "FillRule", new Value (FillRuleEvenOdd), Type::INT32);
	Glyphs::FillProperty = DependencyProperty::Register (this, Type::GLYPHS, "Fill", Type::BRUSH);
	Glyphs::FontRenderingEmSizeProperty = DependencyProperty::Register (this, Type::GLYPHS, "FontRenderingEmSize", new Value (0.0), Type::DOUBLE);
	Glyphs::FontUriProperty = DependencyProperty::RegisterFull (this, Type::GLYPHS, "FontUri", NULL, Type::STRING, false, false, false, false, NULL, Validators::NonNullStringValidator, false, false);
	Glyphs::IndicesProperty = DependencyProperty::Register (this, Type::GLYPHS, "Indices", Type::STRING);
	Glyphs::OriginXProperty = DependencyProperty::Register (this, Type::GLYPHS, "OriginX", new Value (0.0), Type::DOUBLE);
	Glyphs::OriginYProperty = DependencyProperty::Register (this, Type::GLYPHS, "OriginY", new Value (0.0), Type::DOUBLE);
	Glyphs::StyleSimulationsProperty = DependencyProperty::Register (this, Type::GLYPHS, "StyleSimulations", new Value (StyleSimulationsNone), Type::INT32);
	Glyphs::UnicodeStringProperty = DependencyProperty::Register (this, Type::GLYPHS, "UnicodeString", Type::STRING);
	GradientBrush::ColorInterpolationModeProperty = DependencyProperty::Register (this, Type::GRADIENTBRUSH, "ColorInterpolationMode", new Value (ColorInterpolationModeSRgbLinearInterpolation), Type::INT32);
	GradientBrush::GradientStopsProperty = DependencyProperty::RegisterFull (this, Type::GRADIENTBRUSH, "GradientStops", NULL, Type::GRADIENTSTOP_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	GradientBrush::MappingModeProperty = DependencyProperty::Register (this, Type::GRADIENTBRUSH, "MappingMode", new Value (BrushMappingModeRelativeToBoundingBox), Type::INT32);
	GradientBrush::SpreadMethodProperty = DependencyProperty::Register (this, Type::GRADIENTBRUSH, "SpreadMethod", new Value (GradientSpreadMethodPad), Type::INT32);
	GradientStop::ColorProperty = DependencyProperty::Register (this, Type::GRADIENTSTOP, "Color", new Value (Color (0x00000000)), Type::COLOR);
	GradientStop::OffsetProperty = DependencyProperty::Register (this, Type::GRADIENTSTOP, "Offset", new Value (0.0), Type::DOUBLE);
	Grid::ColumnDefinitionsProperty = DependencyProperty::RegisterFull (this, Type::GRID, "ColumnDefinitions", NULL, Type::COLUMNDEFINITION_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	Grid::ColumnProperty = DependencyProperty::RegisterFull (this, Type::GRID, "Column", new Value (0), Type::INT32, false, true, false, false, NULL, Validators::PositiveIntValidator, false, false);
	Grid::ColumnSpanProperty = DependencyProperty::RegisterFull (this, Type::GRID, "ColumnSpan", new Value (1), Type::INT32, false, true, false, false, NULL, Validators::IntGreaterThanZeroValidator, false, false);
	Grid::RowDefinitionsProperty = DependencyProperty::RegisterFull (this, Type::GRID, "RowDefinitions", NULL, Type::ROWDEFINITION_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	Grid::RowProperty = DependencyProperty::RegisterFull (this, Type::GRID, "Row", new Value (0), Type::INT32, false, true, false, false, NULL, Validators::PositiveIntValidator, false, false);
	Grid::RowSpanProperty = DependencyProperty::RegisterFull (this, Type::GRID, "RowSpan", new Value (1), Type::INT32, false, true, false, false, NULL, Validators::IntGreaterThanZeroValidator, false, false);
	Grid::ShowGridLinesProperty = DependencyProperty::Register (this, Type::GRID, "ShowGridLines", new Value (true), Type::BOOL);
	Image::SourceProperty = DependencyProperty::Register (this, Type::IMAGE, "Source", Type::BITMAPIMAGE);
	ImageBrush::DownloadProgressProperty = DependencyProperty::Register (this, Type::IMAGEBRUSH, "DownloadProgress", new Value (0.0), Type::DOUBLE);
	ImageBrush::ImageSourceProperty = DependencyProperty::Register (this, Type::IMAGEBRUSH, "ImageSource", Type::BITMAPIMAGE);
	InkPresenter::StrokesProperty = DependencyProperty::RegisterFull (this, Type::INKPRESENTER, "Strokes", NULL, Type::STROKE_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	Inline::FontFamilyProperty = DependencyProperty::Register (this, Type::INLINE, "FontFamily", new Value (FontFamily(TEXTBLOCK_FONT_FAMILY)), Type::FONTFAMILY);
	Inline::FontFilenameProperty = DependencyProperty::Register (this, Type::INLINE, "FontFilename", Type::STRING);
	Inline::FontSizeProperty = DependencyProperty::Register (this, Type::INLINE, "FontSize", new Value (TEXTBLOCK_FONT_SIZE), Type::DOUBLE);
	Inline::FontStretchProperty = DependencyProperty::Register (this, Type::INLINE, "FontStretch", new Value (TEXTBLOCK_FONT_STRETCH), Type::INT32);
	Inline::FontStyleProperty = DependencyProperty::Register (this, Type::INLINE, "FontStyle", new Value (TEXTBLOCK_FONT_STYLE), Type::INT32);
	Inline::FontWeightProperty = DependencyProperty::Register (this, Type::INLINE, "FontWeight", new Value (TEXTBLOCK_FONT_WEIGHT), Type::INT32);
	Inline::ForegroundProperty = DependencyProperty::Register (this, Type::INLINE, "Foreground", new Value (new SolidColorBrush("black")), Type::BRUSH);
	Inline::LanguageProperty = DependencyProperty::RegisterFull (this, Type::INLINE, "Language", new Value ("en-US"), Type::STRING, false, false, false, false, NULL, Validators::NonNullStringValidator, false, false);
	Inline::TextDecorationsProperty = DependencyProperty::Register (this, Type::INLINE, "TextDecorations", new Value (TextDecorationsNone), Type::INT32);
	InputMethod::IsInputMethodEnabledProperty = DependencyProperty::RegisterFull (this, Type::INPUTMETHOD, "IsInputMethodEnabled", NULL, Type::BOOL, false, true, false, false, NULL, NULL, false, false);
	KeySpline::ControlPoint1Property = DependencyProperty::Register (this, Type::KEYSPLINE, "ControlPoint1", new Value (Point (0,0)), Type::POINT);
	KeySpline::ControlPoint2Property = DependencyProperty::Register (this, Type::KEYSPLINE, "ControlPoint2", new Value (Point (1.0, 1.0)), Type::POINT);
	LayoutInformation::LastArrangeProperty = DependencyProperty::RegisterFull (this, Type::LAYOUTINFORMATION, "LastArrange", NULL, Type::SIZE, false, true, false, false, NULL, NULL, false, false);
	LayoutInformation::LastMeasureProperty = DependencyProperty::RegisterFull (this, Type::LAYOUTINFORMATION, "LastMeasure", NULL, Type::SIZE, false, true, false, false, NULL, NULL, false, false);
	LayoutInformation::LayoutClipProperty = DependencyProperty::RegisterFull (this, Type::LAYOUTINFORMATION, "LayoutClip", NULL, Type::GEOMETRY, false, true, false, false, NULL, NULL, false, false);
	LayoutInformation::LayoutSlotProperty = DependencyProperty::RegisterFull (this, Type::LAYOUTINFORMATION, "LayoutSlot", NULL, Type::RECT, false, true, false, false, NULL, NULL, false, false);
	Line::X1Property = DependencyProperty::Register (this, Type::LINE, "X1", new Value (0.0), Type::DOUBLE);
	Line::X2Property = DependencyProperty::Register (this, Type::LINE, "X2", new Value (0.0), Type::DOUBLE);
	Line::Y1Property = DependencyProperty::Register (this, Type::LINE, "Y1", new Value (0.0), Type::DOUBLE);
	Line::Y2Property = DependencyProperty::Register (this, Type::LINE, "Y2", new Value (0.0), Type::DOUBLE);
	LinearGradientBrush::EndPointProperty = DependencyProperty::Register (this, Type::LINEARGRADIENTBRUSH, "EndPoint", new Value (Point(1,1)), Type::POINT);
	LinearGradientBrush::StartPointProperty = DependencyProperty::Register (this, Type::LINEARGRADIENTBRUSH, "StartPoint", Type::POINT);
	LineGeometry::EndPointProperty = DependencyProperty::Register (this, Type::LINEGEOMETRY, "EndPoint", Type::POINT);
	LineGeometry::StartPointProperty = DependencyProperty::Register (this, Type::LINEGEOMETRY, "StartPoint", Type::POINT);
	LineSegment::PointProperty = DependencyProperty::Register (this, Type::LINESEGMENT, "Point", Type::POINT);
	Matrix::M11Property = DependencyProperty::Register (this, Type::MATRIX, "M11", new Value (1.0), Type::DOUBLE);
	Matrix::M12Property = DependencyProperty::Register (this, Type::MATRIX, "M12", new Value (0.0), Type::DOUBLE);
	Matrix::M21Property = DependencyProperty::Register (this, Type::MATRIX, "M21", new Value (0.0), Type::DOUBLE);
	Matrix::M22Property = DependencyProperty::Register (this, Type::MATRIX, "M22", new Value (1.0), Type::DOUBLE);
	Matrix::OffsetXProperty = DependencyProperty::Register (this, Type::MATRIX, "OffsetX", new Value (0.0), Type::DOUBLE);
	Matrix::OffsetYProperty = DependencyProperty::Register (this, Type::MATRIX, "OffsetY", new Value (0.0), Type::DOUBLE);
	MatrixTransform::MatrixProperty = DependencyProperty::Register (this, Type::MATRIXTRANSFORM, "Matrix", Type::MATRIX);
	MediaAttribute::ValueProperty = DependencyProperty::Register (this, Type::MEDIAATTRIBUTE, "Value", Type::STRING);
	MediaBase::DownloadProgressProperty = DependencyProperty::Register (this, Type::MEDIABASE, "DownloadProgress", new Value (0.0), Type::DOUBLE);
	MediaBase::SourceProperty = DependencyProperty::RegisterFull (this, Type::MEDIABASE, "Source", NULL, Type::STRING, false, false, false, true, NULL, NULL, false, false);
	MediaBase::StretchProperty = DependencyProperty::Register (this, Type::MEDIABASE, "Stretch", new Value (StretchUniform), Type::INT32);
	MediaElement::AttributesProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "Attributes", NULL, Type::MEDIAATTRIBUTE_COLLECTION, true, false, false, false, NULL, Validators::MediaAttributeCollectionValidator, false, false);
	MediaElement::AudioStreamCountProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "AudioStreamCount", new Value (0), Type::INT32, false, false, true, false, NULL, NULL, false, false);
	MediaElement::AudioStreamIndexProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "AudioStreamIndex", NULL, Type::INT32, false, false, false, false, NULL, Validators::AudioStreamIndexValidator, false, true);
	MediaElement::AutoPlayProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "AutoPlay", new Value (true), Type::BOOL);
	MediaElement::BalanceProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "Balance", new Value (0.0), Type::DOUBLE);
	MediaElement::BufferingProgressProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "BufferingProgress", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, NULL, false, false);
	MediaElement::BufferingTimeProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "BufferingTime", new Value (TimeSpan_FromSeconds (5),Type::TIMESPAN), Type::TIMESPAN, false, false, false, false, NULL, Validators::BufferingTimeValidator, false, false);
	MediaElement::CanPauseProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "CanPause", new Value (false), Type::BOOL, false, false, true, false, NULL, NULL, false, false);
	MediaElement::CanSeekProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "CanSeek", new Value (false), Type::BOOL, false, false, true, false, NULL, NULL, false, false);
	MediaElement::CurrentStateProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "CurrentState", NULL, Type::INT32, false, false, true, false, NULL, NULL, false, false);
	MediaElement::DownloadProgressOffsetProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "DownloadProgressOffset", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, NULL, false, false);
	MediaElement::DownloadProgressProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "DownloadProgress", new Value (0.0), Type::DOUBLE);
	MediaElement::DroppedFramesPerSecondProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "DroppedFramesPerSecond", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, NULL, false, false);
	MediaElement::IsMutedProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "IsMuted", new Value (false), Type::BOOL);
	MediaElement::MarkersProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "Markers", NULL, Type::TIMELINEMARKER_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	MediaElement::NaturalDurationProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "NaturalDuration", new Value (Duration::FromSeconds (0)), Type::DURATION, false, false, true, false, NULL, NULL, false, false);
	MediaElement::NaturalVideoHeightProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "NaturalVideoHeight", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, Validators::DoubleGreaterThanZeroValidator, false, false);
	MediaElement::NaturalVideoWidthProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "NaturalVideoWidth", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, Validators::DoubleGreaterThanZeroValidator, false, false);
	MediaElement::PositionProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "Position", Type::TIMESPAN);
	MediaElement::RenderedFramesPerSecondProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "RenderedFramesPerSecond", new Value (0.0), Type::DOUBLE, false, false, true, false, NULL, NULL, false, false);
	MediaElement::SourceProperty = DependencyProperty::RegisterFull (this, Type::MEDIAELEMENT, "Source", NULL, Type::STRING, false, false, false, true, NULL, NULL, false, false);
	MediaElement::StretchProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "Stretch", new Value (StretchUniform), Type::INT32);
	MediaElement::VolumeProperty = DependencyProperty::Register (this, Type::MEDIAELEMENT, "Volume", new Value (0.5), Type::DOUBLE);
	MultiScaleImage::AspectRatioProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "AspectRatio", new Value (1.0), Type::DOUBLE);
	MultiScaleImage::SourceProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "Source", Type::MULTISCALETILESOURCE);
	MultiScaleImage::SubImageCollectionProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "SubImageCollection", Type::MULTISCALESUBIMAGE_COLLECTION);
	MultiScaleImage::UseSpringsProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "UseSprings", new Value (true), Type::BOOL);
	MultiScaleImage::ViewportOriginProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "ViewportOrigin", new Value (Point(0,0)), Type::POINT);
	MultiScaleImage::ViewportWidthProperty = DependencyProperty::Register (this, Type::MULTISCALEIMAGE, "ViewportWidth", new Value (1.0), Type::DOUBLE);
	MultiScaleSubImage::AspectRatioProperty = DependencyProperty::RegisterFull (this, Type::MULTISCALESUBIMAGE, "AspectRatio", new Value (1.0), Type::DOUBLE, false, false, true, false, NULL, NULL, false, false);
	MultiScaleSubImage::OpacityProperty = DependencyProperty::Register (this, Type::MULTISCALESUBIMAGE, "Opacity", new Value (1.0), Type::DOUBLE);
	MultiScaleSubImage::ViewportOriginProperty = DependencyProperty::Register (this, Type::MULTISCALESUBIMAGE, "ViewportOrigin", new Value (Point(0,0)), Type::POINT);
	MultiScaleSubImage::ViewportWidthProperty = DependencyProperty::Register (this, Type::MULTISCALESUBIMAGE, "ViewportWidth", new Value (1.0), Type::DOUBLE);
	MultiScaleSubImage::ZIndexProperty = DependencyProperty::Register (this, Type::MULTISCALESUBIMAGE, "ZIndex", Type::INT32);
	NameScope::NameScopeProperty = DependencyProperty::RegisterFull (this, Type::NAMESCOPE, "NameScope", NULL, Type::NAMESCOPE, false, true, false, false, NULL, NULL, false, false);
	ObjectAnimationUsingKeyFrames::KeyFramesProperty = DependencyProperty::Register (this, Type::OBJECTANIMATIONUSINGKEYFRAMES, "KeyFrames", Type::OBJECTKEYFRAME_COLLECTION);
	ObjectKeyFrame::KeyTimeProperty = DependencyProperty::Register (this, Type::OBJECTKEYFRAME, "KeyTime", Type::KEYTIME);
	ObjectKeyFrame::ValueProperty = DependencyProperty::Register (this, Type::OBJECTKEYFRAME, "Value", Type::DEPENDENCY_OBJECT);
	Panel::BackgroundProperty = DependencyProperty::Register (this, Type::PANEL, "Background", Type::BRUSH);
	Panel::ChildrenProperty = DependencyProperty::RegisterFull (this, Type::PANEL, "Children", NULL, Type::UIELEMENT_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	PasswordBox::MaxLengthProperty = DependencyProperty::RegisterFull (this, Type::PASSWORDBOX, "MaxLength", new Value (0), Type::INT32, false, false, false, false, NULL, Validators::IntGreaterThanZeroValidator, false, false);
	PasswordBox::PasswordCharProperty = DependencyProperty::Register (this, Type::PASSWORDBOX, "PasswordChar", new Value (9679), Type::CHAR);
	PasswordBox::PasswordProperty = DependencyProperty::RegisterFull (this, Type::PASSWORDBOX, "Password", new Value (""), Type::STRING, false, false, false, false, NULL, Validators::PasswordValidator, false, false);
	PasswordBox::SelectionBackgroundProperty = DependencyProperty::Register (this, Type::PASSWORDBOX, "SelectionBackground", Type::BRUSH);
	PasswordBox::SelectionForegroundProperty = DependencyProperty::Register (this, Type::PASSWORDBOX, "SelectionForeground", Type::BRUSH);
	Path::DataProperty = DependencyProperty::Register (this, Type::PATH, "Data", Type::GEOMETRY);
	PathFigure::IsClosedProperty = DependencyProperty::Register (this, Type::PATHFIGURE, "IsClosed", new Value (false), Type::BOOL);
	PathFigure::IsFilledProperty = DependencyProperty::Register (this, Type::PATHFIGURE, "IsFilled", Type::BOOL);
	PathFigure::SegmentsProperty = DependencyProperty::RegisterFull (this, Type::PATHFIGURE, "Segments", NULL, Type::PATHSEGMENT_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	PathFigure::StartPointProperty = DependencyProperty::Register (this, Type::PATHFIGURE, "StartPoint", Type::POINT);
	PathGeometry::FiguresProperty = DependencyProperty::Register (this, Type::PATHGEOMETRY, "Figures", Type::PATHFIGURE_COLLECTION);
	PathGeometry::FillRuleProperty = DependencyProperty::Register (this, Type::PATHGEOMETRY, "FillRule", new Value (FillRuleEvenOdd), Type::INT32);
	PointAnimation::ByProperty = DependencyProperty::Register (this, Type::POINTANIMATION, "By", Type::POINT);
	PointAnimation::FromProperty = DependencyProperty::Register (this, Type::POINTANIMATION, "From", Type::POINT);
	PointAnimation::ToProperty = DependencyProperty::Register (this, Type::POINTANIMATION, "To", Type::POINT);
	PointAnimationUsingKeyFrames::KeyFramesProperty = DependencyProperty::RegisterFull (this, Type::POINTANIMATIONUSINGKEYFRAMES, "KeyFrames", NULL, Type::POINTKEYFRAME_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	PointKeyFrame::KeyTimeProperty = DependencyProperty::Register (this, Type::POINTKEYFRAME, "KeyTime", Type::KEYTIME);
	PointKeyFrame::ValueProperty = DependencyProperty::Register (this, Type::POINTKEYFRAME, "Value", Type::POINT);
	PolyBezierSegment::PointsProperty = DependencyProperty::Register (this, Type::POLYBEZIERSEGMENT, "Points", Type::POINT_COLLECTION);
	Polygon::FillRuleProperty = DependencyProperty::Register (this, Type::POLYGON, "FillRule", new Value (FillRuleEvenOdd), Type::INT32);
	Polygon::PointsProperty = DependencyProperty::Register (this, Type::POLYGON, "Points", Type::POINT_COLLECTION);
	Polyline::FillRuleProperty = DependencyProperty::Register (this, Type::POLYLINE, "FillRule", new Value (FillRuleEvenOdd), Type::INT32);
	Polyline::PointsProperty = DependencyProperty::Register (this, Type::POLYLINE, "Points", Type::POINT_COLLECTION);
	PolyLineSegment::PointsProperty = DependencyProperty::Register (this, Type::POLYLINESEGMENT, "Points", Type::POINT_COLLECTION);
	PolyQuadraticBezierSegment::PointsProperty = DependencyProperty::Register (this, Type::POLYQUADRATICBEZIERSEGMENT, "Points", Type::POINT_COLLECTION);
	Popup::ChildProperty = DependencyProperty::Register (this, Type::POPUP, "Child", Type::UIELEMENT);
	Popup::HorizontalOffsetProperty = DependencyProperty::Register (this, Type::POPUP, "HorizontalOffset", Type::DOUBLE);
	Popup::IsOpenProperty = DependencyProperty::Register (this, Type::POPUP, "IsOpen", Type::BOOL);
	Popup::VerticalOffsetProperty = DependencyProperty::Register (this, Type::POPUP, "VerticalOffset", Type::DOUBLE);
	QuadraticBezierSegment::Point1Property = DependencyProperty::Register (this, Type::QUADRATICBEZIERSEGMENT, "Point1", Type::POINT);
	QuadraticBezierSegment::Point2Property = DependencyProperty::Register (this, Type::QUADRATICBEZIERSEGMENT, "Point2", Type::POINT);
	RadialGradientBrush::CenterProperty = DependencyProperty::Register (this, Type::RADIALGRADIENTBRUSH, "Center", new Value (Point (0.5, 0.5)), Type::POINT);
	RadialGradientBrush::GradientOriginProperty = DependencyProperty::Register (this, Type::RADIALGRADIENTBRUSH, "GradientOrigin", new Value (Point (0.5, 0.5)), Type::POINT);
	RadialGradientBrush::RadiusXProperty = DependencyProperty::Register (this, Type::RADIALGRADIENTBRUSH, "RadiusX", new Value (0.5), Type::DOUBLE);
	RadialGradientBrush::RadiusYProperty = DependencyProperty::Register (this, Type::RADIALGRADIENTBRUSH, "RadiusY", new Value (0.5), Type::DOUBLE);
	Rectangle::RadiusXProperty = DependencyProperty::Register (this, Type::RECTANGLE, "RadiusX", new Value (0.0), Type::DOUBLE);
	Rectangle::RadiusYProperty = DependencyProperty::Register (this, Type::RECTANGLE, "RadiusY", new Value (0.0), Type::DOUBLE);
	RectangleGeometry::RadiusXProperty = DependencyProperty::Register (this, Type::RECTANGLEGEOMETRY, "RadiusX", new Value (0.0), Type::DOUBLE);
	RectangleGeometry::RadiusYProperty = DependencyProperty::Register (this, Type::RECTANGLEGEOMETRY, "RadiusY", new Value (0.0), Type::DOUBLE);
	RectangleGeometry::RectProperty = DependencyProperty::Register (this, Type::RECTANGLEGEOMETRY, "Rect", Type::RECT);
	RotateTransform::AngleProperty = DependencyProperty::Register (this, Type::ROTATETRANSFORM, "Angle", new Value (0.0), Type::DOUBLE);
	RotateTransform::CenterXProperty = DependencyProperty::Register (this, Type::ROTATETRANSFORM, "CenterX", new Value (0.0), Type::DOUBLE);
	RotateTransform::CenterYProperty = DependencyProperty::Register (this, Type::ROTATETRANSFORM, "CenterY", new Value (0.0), Type::DOUBLE);
	RowDefinition::HeightProperty = DependencyProperty::Register (this, Type::ROWDEFINITION, "Height", new Value (GridLength (1.0, GridUnitTypeStar)), Type::GRIDLENGTH);
	RowDefinition::MaxHeightProperty = DependencyProperty::Register (this, Type::ROWDEFINITION, "MaxHeight", new Value (INFINITY), Type::DOUBLE);
	RowDefinition::MinHeightProperty = DependencyProperty::Register (this, Type::ROWDEFINITION, "MinHeight", new Value (0.0), Type::DOUBLE);
	Run::TextProperty = DependencyProperty::Register (this, Type::RUN, "Text", Type::STRING);
	ScaleTransform::CenterXProperty = DependencyProperty::Register (this, Type::SCALETRANSFORM, "CenterX", new Value (0.0), Type::DOUBLE);
	ScaleTransform::CenterYProperty = DependencyProperty::Register (this, Type::SCALETRANSFORM, "CenterY", new Value (0.0), Type::DOUBLE);
	ScaleTransform::ScaleXProperty = DependencyProperty::Register (this, Type::SCALETRANSFORM, "ScaleX", new Value (1.0), Type::DOUBLE);
	ScaleTransform::ScaleYProperty = DependencyProperty::Register (this, Type::SCALETRANSFORM, "ScaleY", new Value (1.0), Type::DOUBLE);
	Setter::ConvertedValueProperty = DependencyProperty::Register (this, Type::SETTER, "ConvertedValue", Type::OBJECT);
	Setter::PropertyProperty = DependencyProperty::RegisterFull (this, Type::SETTER, "Property", NULL, Type::DEPENDENCYPROPERTY, false, false, false, false, NULL, Validators::IsSetterSealedValidator, false, false);
	Setter::ValueProperty = DependencyProperty::RegisterFull (this, Type::SETTER, "Value", NULL, Type::OBJECT, false, false, false, false, NULL, Validators::IsSetterSealedValidator, false, false);
	SetterBase::IsSealedProperty = DependencyProperty::Register (this, Type::SETTERBASE, "IsSealed", new Value (false), Type::BOOL);
	SetterBaseCollection::IsSealedProperty = DependencyProperty::Register (this, Type::SETTERBASE_COLLECTION, "IsSealed", new Value (false), Type::BOOL);
	Shape::FillProperty = DependencyProperty::Register (this, Type::SHAPE, "Fill", Type::BRUSH);
	Shape::StretchProperty = DependencyProperty::Register (this, Type::SHAPE, "Stretch", new Value (StretchNone), Type::INT32);
	Shape::StrokeDashArrayProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeDashArray", Type::DOUBLE_COLLECTION);
	Shape::StrokeDashCapProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeDashCap", new Value (PenLineCapFlat), Type::INT32);
	Shape::StrokeDashOffsetProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeDashOffset", new Value (0.0), Type::DOUBLE);
	Shape::StrokeEndLineCapProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeEndLineCap", new Value (PenLineCapFlat), Type::INT32);
	Shape::StrokeLineJoinProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeLineJoin", new Value (PenLineJoinMiter), Type::INT32);
	Shape::StrokeMiterLimitProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeMiterLimit", new Value (10.0), Type::DOUBLE);
	Shape::StrokeProperty = DependencyProperty::Register (this, Type::SHAPE, "Stroke", Type::BRUSH);
	Shape::StrokeStartLineCapProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeStartLineCap", new Value (PenLineCapFlat), Type::INT32);
	Shape::StrokeThicknessProperty = DependencyProperty::Register (this, Type::SHAPE, "StrokeThickness", new Value (1.0), Type::DOUBLE);
	SkewTransform::AngleXProperty = DependencyProperty::Register (this, Type::SKEWTRANSFORM, "AngleX", new Value (0.0), Type::DOUBLE);
	SkewTransform::AngleYProperty = DependencyProperty::Register (this, Type::SKEWTRANSFORM, "AngleY", new Value (0.0), Type::DOUBLE);
	SkewTransform::CenterXProperty = DependencyProperty::Register (this, Type::SKEWTRANSFORM, "CenterX", new Value (0.0), Type::DOUBLE);
	SkewTransform::CenterYProperty = DependencyProperty::Register (this, Type::SKEWTRANSFORM, "CenterY", new Value (0.0), Type::DOUBLE);
	SolidColorBrush::ColorProperty = DependencyProperty::Register (this, Type::SOLIDCOLORBRUSH, "Color", new Value (Color (0x00000000)), Type::COLOR);
	SplineColorKeyFrame::KeySplineProperty = DependencyProperty::RegisterFull (this, Type::SPLINECOLORKEYFRAME, "KeySpline", NULL, Type::KEYSPLINE, true, false, false, false, NULL, NULL, false, false);
	SplineDoubleKeyFrame::KeySplineProperty = DependencyProperty::RegisterFull (this, Type::SPLINEDOUBLEKEYFRAME, "KeySpline", NULL, Type::KEYSPLINE, true, false, false, false, NULL, NULL, false, false);
	SplinePointKeyFrame::KeySplineProperty = DependencyProperty::RegisterFull (this, Type::SPLINEPOINTKEYFRAME, "KeySpline", NULL, Type::KEYSPLINE, true, false, false, false, NULL, NULL, false, false);
	Storyboard::TargetNameProperty = DependencyProperty::RegisterFull (this, Type::STORYBOARD, "TargetName", NULL, Type::STRING, false, true, false, false, NULL, Validators::IsTimelineValidator, false, false);
	Storyboard::TargetPropertyProperty = DependencyProperty::RegisterFull (this, Type::STORYBOARD, "TargetProperty", NULL, Type::PROPERTYPATH, false, true, false, false, NULL, Validators::IsTimelineValidator, false, false);
	Stroke::DrawingAttributesProperty = DependencyProperty::RegisterFull (this, Type::STROKE, "DrawingAttributes", NULL, Type::DRAWINGATTRIBUTES, true, false, false, false, NULL, NULL, false, false);
	Stroke::StylusPointsProperty = DependencyProperty::RegisterFull (this, Type::STROKE, "StylusPoints", NULL, Type::STYLUSPOINT_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	Style::IsSealedProperty = DependencyProperty::Register (this, Type::STYLE, "IsSealed", new Value (false), Type::BOOL);
	Style::SettersProperty = DependencyProperty::RegisterFull (this, Type::STYLE, "Setters", NULL, Type::SETTERBASE_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	Style::TargetTypeProperty = DependencyProperty::Register (this, Type::STYLE, "TargetType", Type::MANAGEDTYPEINFO);
	StylusInfo::DeviceTypeProperty = DependencyProperty::Register (this, Type::STYLUSINFO, "DeviceType", new Value (TabletDeviceTypeMouse), Type::INT32);
	StylusInfo::IsInvertedProperty = DependencyProperty::Register (this, Type::STYLUSINFO, "IsInverted", new Value (false), Type::BOOL);
	StylusPoint::PressureFactorProperty = DependencyProperty::Register (this, Type::STYLUSPOINT, "PressureFactor", new Value (0.5), Type::DOUBLE);
	StylusPoint::XProperty = DependencyProperty::Register (this, Type::STYLUSPOINT, "X", new Value (0.0), Type::DOUBLE);
	StylusPoint::YProperty = DependencyProperty::Register (this, Type::STYLUSPOINT, "Y", new Value (0.0), Type::DOUBLE);
	TextBlock::FontFamilyProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontFamily", new Value (FontFamily(TEXTBLOCK_FONT_FAMILY)), Type::FONTFAMILY);
	TextBlock::FontFilenameProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontFilename", Type::STRING);
	TextBlock::FontSizeProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontSize", new Value (TEXTBLOCK_FONT_SIZE), Type::DOUBLE);
	TextBlock::FontStretchProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontStretch", new Value (TEXTBLOCK_FONT_STRETCH), Type::INT32);
	TextBlock::FontStyleProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontStyle", new Value (TEXTBLOCK_FONT_STYLE), Type::INT32);
	TextBlock::FontWeightProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "FontWeight", new Value (TEXTBLOCK_FONT_WEIGHT), Type::INT32);
	TextBlock::ForegroundProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "Foreground", Type::BRUSH);
	TextBlock::InlinesProperty = DependencyProperty::RegisterFull (this, Type::TEXTBLOCK, "Inlines", NULL, Type::INLINE_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	TextBlock::LineHeightProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "LineHeight", new Value (NAN), Type::DOUBLE);
	TextBlock::LineStackingStrategyProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "LineStackingStrategy", new Value (LineStackingStrategyMaxHeight), Type::INT32);
	TextBlock::PaddingProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "Padding", new Value (Thickness (0)), Type::THICKNESS);
	TextBlock::TextAlignmentProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "TextAlignment", new Value (TextAlignmentLeft), Type::INT32);
	TextBlock::TextDecorationsProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "TextDecorations", new Value (TextDecorationsNone), Type::INT32);
	TextBlock::TextProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "Text", new Value (""), Type::STRING);
	TextBlock::TextWrappingProperty = DependencyProperty::Register (this, Type::TEXTBLOCK, "TextWrapping", new Value (TextWrappingNoWrap), Type::INT32);
	TextBox::AcceptsReturnProperty = DependencyProperty::Register (this, Type::TEXTBOX, "AcceptsReturn", new Value (false), Type::BOOL);
	TextBox::HorizontalScrollBarVisibilityProperty = DependencyProperty::Register (this, Type::TEXTBOX, "HorizontalScrollBarVisibility", new Value (ScrollBarVisibilityHidden), Type::INT32);
	TextBox::IsReadOnlyProperty = DependencyProperty::Register (this, Type::TEXTBOX, "IsReadOnly", new Value (false), Type::BOOL);
	TextBox::MaxLengthProperty = DependencyProperty::RegisterFull (this, Type::TEXTBOX, "MaxLength", new Value (0), Type::INT32, false, false, false, false, NULL, Validators::PositiveIntValidator, false, false);
	TextBox::SelectedTextProperty = DependencyProperty::Register (this, Type::TEXTBOX, "SelectedText", new Value (""), Type::STRING);
	TextBox::SelectionBackgroundProperty = DependencyProperty::Register (this, Type::TEXTBOX, "SelectionBackground", Type::BRUSH);
	TextBox::SelectionForegroundProperty = DependencyProperty::Register (this, Type::TEXTBOX, "SelectionForeground", Type::BRUSH);
	TextBox::SelectionLengthProperty = DependencyProperty::RegisterFull (this, Type::TEXTBOX, "SelectionLength", new Value (0), Type::INT32, false, false, false, false, NULL, Validators::PositiveIntValidator, false, false);
	TextBox::SelectionStartProperty = DependencyProperty::RegisterFull (this, Type::TEXTBOX, "SelectionStart", new Value (0), Type::INT32, false, false, false, false, NULL, Validators::PositiveIntValidator, false, false);
	TextBox::TextAlignmentProperty = DependencyProperty::Register (this, Type::TEXTBOX, "TextAlignment", new Value (TextAlignmentLeft), Type::INT32);
	TextBox::TextProperty = DependencyProperty::Register (this, Type::TEXTBOX, "Text", new Value (""), Type::STRING);
	TextBox::TextWrappingProperty = DependencyProperty::Register (this, Type::TEXTBOX, "TextWrapping", new Value (TextWrappingNoWrap), Type::INT32);
	TextBox::VerticalScrollBarVisibilityProperty = DependencyProperty::Register (this, Type::TEXTBOX, "VerticalScrollBarVisibility", new Value (ScrollBarVisibilityHidden), Type::INT32);
	TileBrush::AlignmentXProperty = DependencyProperty::Register (this, Type::TILEBRUSH, "AlignmentX", new Value (AlignmentXCenter), Type::INT32);
	TileBrush::AlignmentYProperty = DependencyProperty::Register (this, Type::TILEBRUSH, "AlignmentY", new Value (AlignmentYCenter), Type::INT32);
	TileBrush::StretchProperty = DependencyProperty::Register (this, Type::TILEBRUSH, "Stretch", new Value (StretchFill), Type::INT32);
	Timeline::AutoReverseProperty = DependencyProperty::Register (this, Type::TIMELINE, "AutoReverse", new Value (false), Type::BOOL);
	Timeline::BeginTimeProperty = DependencyProperty::Register (this, Type::TIMELINE, "BeginTime", Type::TIMESPAN);
	Timeline::DurationProperty = DependencyProperty::Register (this, Type::TIMELINE, "Duration", new Value (Duration::Automatic), Type::DURATION);
	Timeline::FillBehaviorProperty = DependencyProperty::Register (this, Type::TIMELINE, "FillBehavior", new Value (FillBehaviorHoldEnd), Type::INT32);
	Timeline::RepeatBehaviorProperty = DependencyProperty::Register (this, Type::TIMELINE, "RepeatBehavior", new Value (RepeatBehavior ((double) 1)), Type::REPEATBEHAVIOR);
	Timeline::SpeedRatioProperty = DependencyProperty::Register (this, Type::TIMELINE, "SpeedRatio", new Value (1.0), Type::DOUBLE);
	TimelineGroup::ChildrenProperty = DependencyProperty::RegisterFull (this, Type::TIMELINEGROUP, "Children", NULL, Type::TIMELINE_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	TimelineMarker::TextProperty = DependencyProperty::Register (this, Type::TIMELINEMARKER, "Text", Type::STRING);
	TimelineMarker::TimeProperty = DependencyProperty::Register (this, Type::TIMELINEMARKER, "Time", Type::TIMESPAN);
	TimelineMarker::TypeProperty = DependencyProperty::Register (this, Type::TIMELINEMARKER, "Type", Type::STRING);
	TransformGroup::ChildrenProperty = DependencyProperty::RegisterFull (this, Type::TRANSFORMGROUP, "Children", NULL, Type::TRANSFORM_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	TranslateTransform::XProperty = DependencyProperty::Register (this, Type::TRANSLATETRANSFORM, "X", new Value (0.0), Type::DOUBLE);
	TranslateTransform::YProperty = DependencyProperty::Register (this, Type::TRANSLATETRANSFORM, "Y", new Value (0.0), Type::DOUBLE);
	UIElement::ClipProperty = DependencyProperty::Register (this, Type::UIELEMENT, "Clip", Type::GEOMETRY);
	UIElement::CursorProperty = DependencyProperty::RegisterFull (this, Type::UIELEMENT, "Cursor", new Value (MouseCursorDefault), Type::INT32, false, false, false, false, NULL, Validators::CursorValidator, false, false);
	UIElement::IsHitTestVisibleProperty = DependencyProperty::Register (this, Type::UIELEMENT, "IsHitTestVisible", new Value (true), Type::BOOL);
	UIElement::OpacityMaskProperty = DependencyProperty::Register (this, Type::UIELEMENT, "OpacityMask", Type::BRUSH);
	UIElement::OpacityProperty = DependencyProperty::Register (this, Type::UIELEMENT, "Opacity", new Value (1.0), Type::DOUBLE);
	UIElement::RenderTransformOriginProperty = DependencyProperty::Register (this, Type::UIELEMENT, "RenderTransformOrigin", new Value (Point (0,0)), Type::POINT);
	UIElement::RenderTransformProperty = DependencyProperty::Register (this, Type::UIELEMENT, "RenderTransform", new Value (new MatrixTransform ()), Type::TRANSFORM);
	UIElement::ResourcesProperty = DependencyProperty::RegisterFull (this, Type::UIELEMENT, "Resources", NULL, Type::RESOURCE_DICTIONARY, true, false, false, false, NULL, NULL, false, false);
	UIElement::TagProperty = DependencyProperty::Register (this, Type::UIELEMENT, "Tag", Type::STRING);
	UIElement::TriggersProperty = DependencyProperty::RegisterFull (this, Type::UIELEMENT, "Triggers", NULL, Type::TRIGGER_COLLECTION, true, false, false, false, NULL, NULL, false, false);
	UIElement::UseLayoutRoundingProperty = DependencyProperty::Register (this, Type::UIELEMENT, "UseLayoutRounding", new Value (true), Type::BOOL);
	UIElement::VisibilityProperty = DependencyProperty::Register (this, Type::UIELEMENT, "Visibility", new Value (VisibilityVisible), Type::INT32);
	UserControl::ContentProperty = DependencyProperty::Register (this, Type::USERCONTROL, "Content", Type::UIELEMENT);
	VideoBrush::SourceNameProperty = DependencyProperty::Register (this, Type::VIDEOBRUSH, "SourceName", new Value (""), Type::STRING);
	VisualBrush::VisualProperty = DependencyProperty::Register (this, Type::VISUALBRUSH, "Visual", Type::UIELEMENT);
}

int Application::ResourcesProperty = NULL;
int ArcSegment::IsLargeArcProperty = NULL;
int ArcSegment::PointProperty = NULL;
int ArcSegment::RotationAngleProperty = NULL;
int ArcSegment::SizeProperty = NULL;
int ArcSegment::SweepDirectionProperty = NULL;
int AssemblyPart::SourceProperty = NULL;
int BeginStoryboard::StoryboardProperty = NULL;
int BezierSegment::Point1Property = NULL;
int BezierSegment::Point2Property = NULL;
int BezierSegment::Point3Property = NULL;
int BitmapImage::UriSourceProperty = NULL;
int Border::BackgroundProperty = NULL;
int Border::BorderBrushProperty = NULL;
int Border::BorderThicknessProperty = NULL;
int Border::ChildProperty = NULL;
int Border::CornerRadiusProperty = NULL;
int Border::PaddingProperty = NULL;
int Brush::ChangedProperty = NULL;
int Brush::OpacityProperty = NULL;
int Brush::RelativeTransformProperty = NULL;
int Brush::TransformProperty = NULL;
int Canvas::LeftProperty = NULL;
int Canvas::TopProperty = NULL;
int Canvas::ZIndexProperty = NULL;
int Collection::CountProperty = NULL;
int ColorAnimation::ByProperty = NULL;
int ColorAnimation::FromProperty = NULL;
int ColorAnimation::ToProperty = NULL;
int ColorAnimationUsingKeyFrames::KeyFramesProperty = NULL;
int ColorKeyFrame::KeyTimeProperty = NULL;
int ColorKeyFrame::ValueProperty = NULL;
int ColumnDefinition::MaxWidthProperty = NULL;
int ColumnDefinition::MinWidthProperty = NULL;
int ColumnDefinition::WidthProperty = NULL;
int ContentControl::ContentProperty = NULL;
int ContentControl::ContentTemplateProperty = NULL;
int Control::BackgroundProperty = NULL;
int Control::BorderBrushProperty = NULL;
int Control::BorderThicknessProperty = NULL;
int Control::DefaultStyleKeyProperty = NULL;
int Control::FontFamilyProperty = NULL;
int Control::FontSizeProperty = NULL;
int Control::FontStretchProperty = NULL;
int Control::FontStyleProperty = NULL;
int Control::FontWeightProperty = NULL;
int Control::ForegroundProperty = NULL;
int Control::HorizontalContentAlignmentProperty = NULL;
int Control::IsTabStopProperty = NULL;
int Control::PaddingProperty = NULL;
int Control::TabIndexProperty = NULL;
int Control::TabNavigationProperty = NULL;
int Control::TemplateProperty = NULL;
int Control::VerticalContentAlignmentProperty = NULL;
int ControlTemplate::TargetTypeProperty = NULL;
int DeepZoomImageTileSource::UriSourceProperty = NULL;
int DependencyObject::NameProperty = NULL;
int Deployment::EntryPointAssemblyProperty = NULL;
int Deployment::EntryPointTypeProperty = NULL;
int Deployment::ExternalCallersFromCrossDomainProperty = NULL;
int Deployment::PartsProperty = NULL;
int Deployment::RuntimeVersionProperty = NULL;
int Deployment::SurfaceProperty = NULL;
int DoubleAnimation::ByProperty = NULL;
int DoubleAnimation::FromProperty = NULL;
int DoubleAnimation::ToProperty = NULL;
int DoubleAnimationUsingKeyFrames::KeyFramesProperty = NULL;
int DoubleKeyFrame::KeyTimeProperty = NULL;
int DoubleKeyFrame::ValueProperty = NULL;
int Downloader::DownloadProgressProperty = NULL;
int Downloader::ResponseTextProperty = NULL;
int Downloader::StatusProperty = NULL;
int Downloader::StatusTextProperty = NULL;
int Downloader::UriProperty = NULL;
int DrawingAttributes::ColorProperty = NULL;
int DrawingAttributes::HeightProperty = NULL;
int DrawingAttributes::OutlineColorProperty = NULL;
int DrawingAttributes::WidthProperty = NULL;
int EllipseGeometry::CenterProperty = NULL;
int EllipseGeometry::RadiusXProperty = NULL;
int EllipseGeometry::RadiusYProperty = NULL;
int EventTrigger::ActionsProperty = NULL;
int EventTrigger::RoutedEventProperty = NULL;
int FrameworkElement::ActualHeightProperty = NULL;
int FrameworkElement::ActualWidthProperty = NULL;
int FrameworkElement::DataContextProperty = NULL;
int FrameworkElement::HeightProperty = NULL;
int FrameworkElement::HorizontalAlignmentProperty = NULL;
int FrameworkElement::LanguageProperty = NULL;
int FrameworkElement::MarginProperty = NULL;
int FrameworkElement::MaxHeightProperty = NULL;
int FrameworkElement::MaxWidthProperty = NULL;
int FrameworkElement::MinHeightProperty = NULL;
int FrameworkElement::MinWidthProperty = NULL;
int FrameworkElement::StyleProperty = NULL;
int FrameworkElement::VerticalAlignmentProperty = NULL;
int FrameworkElement::WidthProperty = NULL;
int Geometry::TransformProperty = NULL;
int GeometryGroup::ChildrenProperty = NULL;
int GeometryGroup::FillRuleProperty = NULL;
int Glyphs::FillProperty = NULL;
int Glyphs::FontRenderingEmSizeProperty = NULL;
int Glyphs::FontUriProperty = NULL;
int Glyphs::IndicesProperty = NULL;
int Glyphs::OriginXProperty = NULL;
int Glyphs::OriginYProperty = NULL;
int Glyphs::StyleSimulationsProperty = NULL;
int Glyphs::UnicodeStringProperty = NULL;
int GradientBrush::ColorInterpolationModeProperty = NULL;
int GradientBrush::GradientStopsProperty = NULL;
int GradientBrush::MappingModeProperty = NULL;
int GradientBrush::SpreadMethodProperty = NULL;
int GradientStop::ColorProperty = NULL;
int GradientStop::OffsetProperty = NULL;
int Grid::ColumnDefinitionsProperty = NULL;
int Grid::ColumnProperty = NULL;
int Grid::ColumnSpanProperty = NULL;
int Grid::RowDefinitionsProperty = NULL;
int Grid::RowProperty = NULL;
int Grid::RowSpanProperty = NULL;
int Grid::ShowGridLinesProperty = NULL;
int Image::SourceProperty = NULL;
int ImageBrush::DownloadProgressProperty = NULL;
int ImageBrush::ImageSourceProperty = NULL;
int InkPresenter::StrokesProperty = NULL;
int Inline::FontFamilyProperty = NULL;
int Inline::FontFilenameProperty = NULL;
int Inline::FontSizeProperty = NULL;
int Inline::FontStretchProperty = NULL;
int Inline::FontStyleProperty = NULL;
int Inline::FontWeightProperty = NULL;
int Inline::ForegroundProperty = NULL;
int Inline::LanguageProperty = NULL;
int Inline::TextDecorationsProperty = NULL;
int InputMethod::IsInputMethodEnabledProperty = NULL;
int KeySpline::ControlPoint1Property = NULL;
int KeySpline::ControlPoint2Property = NULL;
int LayoutInformation::LastArrangeProperty = NULL;
int LayoutInformation::LastMeasureProperty = NULL;
int LayoutInformation::LayoutClipProperty = NULL;
int LayoutInformation::LayoutSlotProperty = NULL;
int Line::X1Property = NULL;
int Line::X2Property = NULL;
int Line::Y1Property = NULL;
int Line::Y2Property = NULL;
int LinearGradientBrush::EndPointProperty = NULL;
int LinearGradientBrush::StartPointProperty = NULL;
int LineGeometry::EndPointProperty = NULL;
int LineGeometry::StartPointProperty = NULL;
int LineSegment::PointProperty = NULL;
int Matrix::M11Property = NULL;
int Matrix::M12Property = NULL;
int Matrix::M21Property = NULL;
int Matrix::M22Property = NULL;
int Matrix::OffsetXProperty = NULL;
int Matrix::OffsetYProperty = NULL;
int MatrixTransform::MatrixProperty = NULL;
int MediaAttribute::ValueProperty = NULL;
int MediaBase::DownloadProgressProperty = NULL;
int MediaBase::SourceProperty = NULL;
int MediaBase::StretchProperty = NULL;
int MediaElement::AttributesProperty = NULL;
int MediaElement::AudioStreamCountProperty = NULL;
int MediaElement::AudioStreamIndexProperty = NULL;
int MediaElement::AutoPlayProperty = NULL;
int MediaElement::BalanceProperty = NULL;
int MediaElement::BufferingProgressProperty = NULL;
int MediaElement::BufferingTimeProperty = NULL;
int MediaElement::CanPauseProperty = NULL;
int MediaElement::CanSeekProperty = NULL;
int MediaElement::CurrentStateProperty = NULL;
int MediaElement::DownloadProgressOffsetProperty = NULL;
int MediaElement::DownloadProgressProperty = NULL;
int MediaElement::DroppedFramesPerSecondProperty = NULL;
int MediaElement::IsMutedProperty = NULL;
int MediaElement::MarkersProperty = NULL;
int MediaElement::NaturalDurationProperty = NULL;
int MediaElement::NaturalVideoHeightProperty = NULL;
int MediaElement::NaturalVideoWidthProperty = NULL;
int MediaElement::PositionProperty = NULL;
int MediaElement::RenderedFramesPerSecondProperty = NULL;
int MediaElement::SourceProperty = NULL;
int MediaElement::StretchProperty = NULL;
int MediaElement::VolumeProperty = NULL;
int MultiScaleImage::AspectRatioProperty = NULL;
int MultiScaleImage::SourceProperty = NULL;
int MultiScaleImage::SubImageCollectionProperty = NULL;
int MultiScaleImage::UseSpringsProperty = NULL;
int MultiScaleImage::ViewportOriginProperty = NULL;
int MultiScaleImage::ViewportWidthProperty = NULL;
int MultiScaleSubImage::AspectRatioProperty = NULL;
int MultiScaleSubImage::OpacityProperty = NULL;
int MultiScaleSubImage::ViewportOriginProperty = NULL;
int MultiScaleSubImage::ViewportWidthProperty = NULL;
int MultiScaleSubImage::ZIndexProperty = NULL;
int NameScope::NameScopeProperty = NULL;
int ObjectAnimationUsingKeyFrames::KeyFramesProperty = NULL;
int ObjectKeyFrame::KeyTimeProperty = NULL;
int ObjectKeyFrame::ValueProperty = NULL;
int Panel::BackgroundProperty = NULL;
int Panel::ChildrenProperty = NULL;
int PasswordBox::MaxLengthProperty = NULL;
int PasswordBox::PasswordCharProperty = NULL;
int PasswordBox::PasswordProperty = NULL;
int PasswordBox::SelectionBackgroundProperty = NULL;
int PasswordBox::SelectionForegroundProperty = NULL;
int Path::DataProperty = NULL;
int PathFigure::IsClosedProperty = NULL;
int PathFigure::IsFilledProperty = NULL;
int PathFigure::SegmentsProperty = NULL;
int PathFigure::StartPointProperty = NULL;
int PathGeometry::FiguresProperty = NULL;
int PathGeometry::FillRuleProperty = NULL;
int PointAnimation::ByProperty = NULL;
int PointAnimation::FromProperty = NULL;
int PointAnimation::ToProperty = NULL;
int PointAnimationUsingKeyFrames::KeyFramesProperty = NULL;
int PointKeyFrame::KeyTimeProperty = NULL;
int PointKeyFrame::ValueProperty = NULL;
int PolyBezierSegment::PointsProperty = NULL;
int Polygon::FillRuleProperty = NULL;
int Polygon::PointsProperty = NULL;
int Polyline::FillRuleProperty = NULL;
int Polyline::PointsProperty = NULL;
int PolyLineSegment::PointsProperty = NULL;
int PolyQuadraticBezierSegment::PointsProperty = NULL;
int Popup::ChildProperty = NULL;
int Popup::HorizontalOffsetProperty = NULL;
int Popup::IsOpenProperty = NULL;
int Popup::VerticalOffsetProperty = NULL;
int QuadraticBezierSegment::Point1Property = NULL;
int QuadraticBezierSegment::Point2Property = NULL;
int RadialGradientBrush::CenterProperty = NULL;
int RadialGradientBrush::GradientOriginProperty = NULL;
int RadialGradientBrush::RadiusXProperty = NULL;
int RadialGradientBrush::RadiusYProperty = NULL;
int Rectangle::RadiusXProperty = NULL;
int Rectangle::RadiusYProperty = NULL;
int RectangleGeometry::RadiusXProperty = NULL;
int RectangleGeometry::RadiusYProperty = NULL;
int RectangleGeometry::RectProperty = NULL;
int RotateTransform::AngleProperty = NULL;
int RotateTransform::CenterXProperty = NULL;
int RotateTransform::CenterYProperty = NULL;
int RowDefinition::HeightProperty = NULL;
int RowDefinition::MaxHeightProperty = NULL;
int RowDefinition::MinHeightProperty = NULL;
int Run::TextProperty = NULL;
int ScaleTransform::CenterXProperty = NULL;
int ScaleTransform::CenterYProperty = NULL;
int ScaleTransform::ScaleXProperty = NULL;
int ScaleTransform::ScaleYProperty = NULL;
int Setter::ConvertedValueProperty = NULL;
int Setter::PropertyProperty = NULL;
int Setter::ValueProperty = NULL;
int SetterBase::IsSealedProperty = NULL;
int SetterBaseCollection::IsSealedProperty = NULL;
int Shape::FillProperty = NULL;
int Shape::StretchProperty = NULL;
int Shape::StrokeDashArrayProperty = NULL;
int Shape::StrokeDashCapProperty = NULL;
int Shape::StrokeDashOffsetProperty = NULL;
int Shape::StrokeEndLineCapProperty = NULL;
int Shape::StrokeLineJoinProperty = NULL;
int Shape::StrokeMiterLimitProperty = NULL;
int Shape::StrokeProperty = NULL;
int Shape::StrokeStartLineCapProperty = NULL;
int Shape::StrokeThicknessProperty = NULL;
int SkewTransform::AngleXProperty = NULL;
int SkewTransform::AngleYProperty = NULL;
int SkewTransform::CenterXProperty = NULL;
int SkewTransform::CenterYProperty = NULL;
int SolidColorBrush::ColorProperty = NULL;
int SplineColorKeyFrame::KeySplineProperty = NULL;
int SplineDoubleKeyFrame::KeySplineProperty = NULL;
int SplinePointKeyFrame::KeySplineProperty = NULL;
int Storyboard::TargetNameProperty = NULL;
int Storyboard::TargetPropertyProperty = NULL;
int Stroke::DrawingAttributesProperty = NULL;
int Stroke::StylusPointsProperty = NULL;
int Style::IsSealedProperty = NULL;
int Style::SettersProperty = NULL;
int Style::TargetTypeProperty = NULL;
int StylusInfo::DeviceTypeProperty = NULL;
int StylusInfo::IsInvertedProperty = NULL;
int StylusPoint::PressureFactorProperty = NULL;
int StylusPoint::XProperty = NULL;
int StylusPoint::YProperty = NULL;
int TextBlock::FontFamilyProperty = NULL;
int TextBlock::FontFilenameProperty = NULL;
int TextBlock::FontSizeProperty = NULL;
int TextBlock::FontStretchProperty = NULL;
int TextBlock::FontStyleProperty = NULL;
int TextBlock::FontWeightProperty = NULL;
int TextBlock::ForegroundProperty = NULL;
int TextBlock::InlinesProperty = NULL;
int TextBlock::LineHeightProperty = NULL;
int TextBlock::LineStackingStrategyProperty = NULL;
int TextBlock::PaddingProperty = NULL;
int TextBlock::TextAlignmentProperty = NULL;
int TextBlock::TextDecorationsProperty = NULL;
int TextBlock::TextProperty = NULL;
int TextBlock::TextWrappingProperty = NULL;
int TextBox::AcceptsReturnProperty = NULL;
int TextBox::HorizontalScrollBarVisibilityProperty = NULL;
int TextBox::IsReadOnlyProperty = NULL;
int TextBox::MaxLengthProperty = NULL;
int TextBox::SelectedTextProperty = NULL;
int TextBox::SelectionBackgroundProperty = NULL;
int TextBox::SelectionForegroundProperty = NULL;
int TextBox::SelectionLengthProperty = NULL;
int TextBox::SelectionStartProperty = NULL;
int TextBox::TextAlignmentProperty = NULL;
int TextBox::TextProperty = NULL;
int TextBox::TextWrappingProperty = NULL;
int TextBox::VerticalScrollBarVisibilityProperty = NULL;
int TileBrush::AlignmentXProperty = NULL;
int TileBrush::AlignmentYProperty = NULL;
int TileBrush::StretchProperty = NULL;
int Timeline::AutoReverseProperty = NULL;
int Timeline::BeginTimeProperty = NULL;
int Timeline::DurationProperty = NULL;
int Timeline::FillBehaviorProperty = NULL;
int Timeline::RepeatBehaviorProperty = NULL;
int Timeline::SpeedRatioProperty = NULL;
int TimelineGroup::ChildrenProperty = NULL;
int TimelineMarker::TextProperty = NULL;
int TimelineMarker::TimeProperty = NULL;
int TimelineMarker::TypeProperty = NULL;
int TransformGroup::ChildrenProperty = NULL;
int TranslateTransform::XProperty = NULL;
int TranslateTransform::YProperty = NULL;
int UIElement::ClipProperty = NULL;
int UIElement::CursorProperty = NULL;
int UIElement::IsHitTestVisibleProperty = NULL;
int UIElement::OpacityMaskProperty = NULL;
int UIElement::OpacityProperty = NULL;
int UIElement::RenderTransformOriginProperty = NULL;
int UIElement::RenderTransformProperty = NULL;
int UIElement::ResourcesProperty = NULL;
int UIElement::TagProperty = NULL;
int UIElement::TriggersProperty = NULL;
int UIElement::UseLayoutRoundingProperty = NULL;
int UIElement::VisibilityProperty = NULL;
int UserControl::ContentProperty = NULL;
int VideoBrush::SourceNameProperty = NULL;
int VisualBrush::VisualProperty = NULL;

ResourceDictionary *
Application::GetResources ()
{
	Value *value = GetValue (Application::ResourcesProperty);
	return value ? value->AsResourceDictionary () : NULL;
}

void
Application::SetResources (ResourceDictionary *value)
{
	SetValue (Application::ResourcesProperty, Value (value));
}

bool
ArcSegment::GetIsLargeArc ()
{
	Value *value = GetValue (ArcSegment::IsLargeArcProperty);
	return value->AsBool ();
}

void
ArcSegment::SetIsLargeArc (bool value)
{
	SetValue (ArcSegment::IsLargeArcProperty, Value (value));
}

Point *
ArcSegment::GetPoint ()
{
	Value *value = GetValue (ArcSegment::PointProperty);
	return value ? value->AsPoint () : NULL;
}

void
ArcSegment::SetPoint (Point *value)
{
	if (!value) return;
	SetValue (ArcSegment::PointProperty, Value (*value));
}

double
ArcSegment::GetRotationAngle ()
{
	Value *value = GetValue (ArcSegment::RotationAngleProperty);
	return value->AsDouble ();
}

void
ArcSegment::SetRotationAngle (double value)
{
	SetValue (ArcSegment::RotationAngleProperty, Value (value));
}

Point *
ArcSegment::GetSize ()
{
	Value *value = GetValue (ArcSegment::SizeProperty);
	return value ? value->AsPoint () : NULL;
}

void
ArcSegment::SetSize (Point *value)
{
	if (!value) return;
	SetValue (ArcSegment::SizeProperty, Value (*value));
}

SweepDirection
ArcSegment::GetSweepDirection ()
{
	Value *value = GetValue (ArcSegment::SweepDirectionProperty);
	return (SweepDirection) value->AsInt32 ();
}

void
ArcSegment::SetSweepDirection (SweepDirection value)
{
	SetValue (ArcSegment::SweepDirectionProperty, Value (value));
}

Storyboard *
BeginStoryboard::GetStoryboard ()
{
	Value *value = GetValue (BeginStoryboard::StoryboardProperty);
	return value ? value->AsStoryboard () : NULL;
}

void
BeginStoryboard::SetStoryboard (Storyboard *value)
{
	SetValue (BeginStoryboard::StoryboardProperty, Value (value));
}

Point *
BezierSegment::GetPoint1 ()
{
	Value *value = GetValue (BezierSegment::Point1Property);
	return value ? value->AsPoint () : NULL;
}

void
BezierSegment::SetPoint1 (Point *value)
{
	if (!value) return;
	SetValue (BezierSegment::Point1Property, Value (*value));
}

Point *
BezierSegment::GetPoint2 ()
{
	Value *value = GetValue (BezierSegment::Point2Property);
	return value ? value->AsPoint () : NULL;
}

void
BezierSegment::SetPoint2 (Point *value)
{
	if (!value) return;
	SetValue (BezierSegment::Point2Property, Value (*value));
}

Point *
BezierSegment::GetPoint3 ()
{
	Value *value = GetValue (BezierSegment::Point3Property);
	return value ? value->AsPoint () : NULL;
}

void
BezierSegment::SetPoint3 (Point *value)
{
	if (!value) return;
	SetValue (BezierSegment::Point3Property, Value (*value));
}

const char *
BitmapImage::GetUriSource ()
{
	Value *value = GetValue (BitmapImage::UriSourceProperty);
	return value ? value->AsString () : NULL;
}

void
BitmapImage::SetUriSource (const char *value)
{
	SetValue (BitmapImage::UriSourceProperty, Value (value));
}

Brush *
Border::GetBackground ()
{
	Value *value = GetValue (Border::BackgroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
Border::SetBackground (Brush *value)
{
	SetValue (Border::BackgroundProperty, Value (value));
}

Brush *
Border::GetBorderBrush ()
{
	Value *value = GetValue (Border::BorderBrushProperty);
	return value ? value->AsBrush () : NULL;
}

void
Border::SetBorderBrush (Brush *value)
{
	SetValue (Border::BorderBrushProperty, Value (value));
}

Thickness *
Border::GetBorderThickness ()
{
	Value *value = GetValue (Border::BorderThicknessProperty);
	return value ? value->AsThickness () : NULL;
}

void
Border::SetBorderThickness (Thickness *value)
{
	if (!value) return;
	SetValue (Border::BorderThicknessProperty, Value (*value));
}

UIElement *
Border::GetChild ()
{
	Value *value = GetValue (Border::ChildProperty);
	return value ? value->AsUIElement () : NULL;
}

void
Border::SetChild (UIElement *value)
{
	SetValue (Border::ChildProperty, Value (value));
}

CornerRadius *
Border::GetCornerRadius ()
{
	Value *value = GetValue (Border::CornerRadiusProperty);
	return value ? value->AsCornerRadius () : NULL;
}

void
Border::SetCornerRadius (CornerRadius *value)
{
	if (!value) return;
	SetValue (Border::CornerRadiusProperty, Value (*value));
}

Thickness *
Border::GetPadding ()
{
	Value *value = GetValue (Border::PaddingProperty);
	return value ? value->AsThickness () : NULL;
}

void
Border::SetPadding (Thickness *value)
{
	if (!value) return;
	SetValue (Border::PaddingProperty, Value (*value));
}

double
Brush::GetOpacity ()
{
	Value *value = GetValue (Brush::OpacityProperty);
	return value->AsDouble ();
}

void
Brush::SetOpacity (double value)
{
	SetValue (Brush::OpacityProperty, Value (value));
}

Transform *
Brush::GetRelativeTransform ()
{
	Value *value = GetValue (Brush::RelativeTransformProperty);
	return value ? value->AsTransform () : NULL;
}

void
Brush::SetRelativeTransform (Transform *value)
{
	SetValue (Brush::RelativeTransformProperty, Value (value));
}

Transform *
Brush::GetTransform ()
{
	Value *value = GetValue (Brush::TransformProperty);
	return value ? value->AsTransform () : NULL;
}

void
Brush::SetTransform (Transform *value)
{
	SetValue (Brush::TransformProperty, Value (value));
}

double
Canvas::GetLeft (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Canvas::LeftProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Canvas::LeftProperty)->GetDefaultValue();
	return value->AsDouble ();
}

void
Canvas::SetLeft (DependencyObject *obj, double value)
{
	if (!obj) return;
	obj->SetValue (Canvas::LeftProperty, Value (value));
}

double
Canvas::GetTop (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Canvas::TopProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Canvas::TopProperty)->GetDefaultValue();
	return value->AsDouble ();
}

void
Canvas::SetTop (DependencyObject *obj, double value)
{
	if (!obj) return;
	obj->SetValue (Canvas::TopProperty, Value (value));
}

gint32
Canvas::GetZIndex (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Canvas::ZIndexProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Canvas::ZIndexProperty)->GetDefaultValue();
	return value->AsInt32 ();
}

void
Canvas::SetZIndex (DependencyObject *obj, gint32 value)
{
	if (!obj) return;
	obj->SetValue (Canvas::ZIndexProperty, Value (value));
}

gint32
Collection::GetCount ()
{
	Value *value = GetValue (Collection::CountProperty);
	return value->AsInt32 ();
}

void
Collection::SetCount (gint32 value)
{
	SetValue (Collection::CountProperty, Value (value));
}

Color *
ColorAnimation::GetBy ()
{
	Value *value = GetValue (ColorAnimation::ByProperty);
	return value ? value->AsColor () : NULL;
}

void
ColorAnimation::SetBy (Color value)
{
	SetValue (ColorAnimation::ByProperty, Value (value));
}

void
ColorAnimation::SetBy (Color *value)
{
	if (!value)
		SetValue (ColorAnimation::ByProperty, NULL);
	else
		SetValue (ColorAnimation::ByProperty, Value (*value));
}

Color *
ColorAnimation::GetFrom ()
{
	Value *value = GetValue (ColorAnimation::FromProperty);
	return value ? value->AsColor () : NULL;
}

void
ColorAnimation::SetFrom (Color value)
{
	SetValue (ColorAnimation::FromProperty, Value (value));
}

void
ColorAnimation::SetFrom (Color *value)
{
	if (!value)
		SetValue (ColorAnimation::FromProperty, NULL);
	else
		SetValue (ColorAnimation::FromProperty, Value (*value));
}

Color *
ColorAnimation::GetTo ()
{
	Value *value = GetValue (ColorAnimation::ToProperty);
	return value ? value->AsColor () : NULL;
}

void
ColorAnimation::SetTo (Color value)
{
	SetValue (ColorAnimation::ToProperty, Value (value));
}

void
ColorAnimation::SetTo (Color *value)
{
	if (!value)
		SetValue (ColorAnimation::ToProperty, NULL);
	else
		SetValue (ColorAnimation::ToProperty, Value (*value));
}

ColorKeyFrameCollection *
ColorAnimationUsingKeyFrames::GetKeyFrames ()
{
	Value *value = GetValue (ColorAnimationUsingKeyFrames::KeyFramesProperty);
	return value ? value->AsColorKeyFrameCollection () : NULL;
}

void
ColorAnimationUsingKeyFrames::SetKeyFrames (ColorKeyFrameCollection *value)
{
	SetValue (ColorAnimationUsingKeyFrames::KeyFramesProperty, Value (value));
}

KeyTime *
ColorKeyFrame::GetKeyTime ()
{
	Value *value = DependencyObject::GetValue (ColorKeyFrame::KeyTimeProperty);
	return value ? value->AsKeyTime () : NULL;
}

void
ColorKeyFrame::SetKeyTime (KeyTime value)
{
	DependencyObject::SetValue (ColorKeyFrame::KeyTimeProperty, Value (value));
}

void
ColorKeyFrame::SetKeyTime (KeyTime *value)
{
	if (!value)
		DependencyObject::SetValue (ColorKeyFrame::KeyTimeProperty, NULL);
	else
		DependencyObject::SetValue (ColorKeyFrame::KeyTimeProperty, Value (*value));
}

Color *
ColorKeyFrame::GetValue ()
{
	Value *value = DependencyObject::GetValue (ColorKeyFrame::ValueProperty);
	return value ? value->AsColor () : NULL;
}

void
ColorKeyFrame::SetValue (Color value)
{
	DependencyObject::SetValue (ColorKeyFrame::ValueProperty, Value (value));
}

void
ColorKeyFrame::SetValue (Color *value)
{
	if (!value)
		DependencyObject::SetValue (ColorKeyFrame::ValueProperty, NULL);
	else
		DependencyObject::SetValue (ColorKeyFrame::ValueProperty, Value (*value));
}

double
ColumnDefinition::GetMaxWidth ()
{
	Value *value = GetValue (ColumnDefinition::MaxWidthProperty);
	return value->AsDouble ();
}

void
ColumnDefinition::SetMaxWidth (double value)
{
	SetValue (ColumnDefinition::MaxWidthProperty, Value (value));
}

double
ColumnDefinition::GetMinWidth ()
{
	Value *value = GetValue (ColumnDefinition::MinWidthProperty);
	return value->AsDouble ();
}

void
ColumnDefinition::SetMinWidth (double value)
{
	SetValue (ColumnDefinition::MinWidthProperty, Value (value));
}

GridLength *
ColumnDefinition::GetWidth ()
{
	Value *value = GetValue (ColumnDefinition::WidthProperty);
	return value ? value->AsGridLength () : NULL;
}

void
ColumnDefinition::SetWidth (GridLength *value)
{
	if (!value) return;
	SetValue (ColumnDefinition::WidthProperty, Value (*value));
}

DataTemplate *
ContentControl::GetContentTemplate ()
{
	Value *value = GetValue (ContentControl::ContentTemplateProperty);
	return value ? value->AsDataTemplate () : NULL;
}

void
ContentControl::SetContentTemplate (DataTemplate *value)
{
	SetValue (ContentControl::ContentTemplateProperty, Value (value));
}

Brush *
Control::GetBackground ()
{
	Value *value = GetValue (Control::BackgroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
Control::SetBackground (Brush *value)
{
	SetValue (Control::BackgroundProperty, Value (value));
}

Brush *
Control::GetBorderBrush ()
{
	Value *value = GetValue (Control::BorderBrushProperty);
	return value ? value->AsBrush () : NULL;
}

void
Control::SetBorderBrush (Brush *value)
{
	SetValue (Control::BorderBrushProperty, Value (value));
}

Thickness *
Control::GetBorderThickness ()
{
	Value *value = GetValue (Control::BorderThicknessProperty);
	return value ? value->AsThickness () : NULL;
}

void
Control::SetBorderThickness (Thickness *value)
{
	if (!value) return;
	SetValue (Control::BorderThicknessProperty, Value (*value));
}

ManagedTypeInfo *
Control::GetDefaultStyleKey ()
{
	Value *value = GetValue (Control::DefaultStyleKeyProperty);
	return value ? value->AsManagedTypeInfo () : NULL;
}

void
Control::SetDefaultStyleKey (ManagedTypeInfo *value)
{
	if (!value) return;
	SetValue (Control::DefaultStyleKeyProperty, Value (*value));
}

FontFamily *
Control::GetFontFamily ()
{
	Value *value = GetValue (Control::FontFamilyProperty);
	return value ? value->AsFontFamily () : NULL;
}

void
Control::SetFontFamily (FontFamily *value)
{
	if (!value) return;
	SetValue (Control::FontFamilyProperty, Value (*value));
}

double
Control::GetFontSize ()
{
	Value *value = GetValue (Control::FontSizeProperty);
	return value->AsDouble ();
}

void
Control::SetFontSize (double value)
{
	SetValue (Control::FontSizeProperty, Value (value));
}

FontStretches
Control::GetFontStretch ()
{
	Value *value = GetValue (Control::FontStretchProperty);
	return (FontStretches) value->AsInt32 ();
}

void
Control::SetFontStretch (FontStretches value)
{
	SetValue (Control::FontStretchProperty, Value (value));
}

FontStyles
Control::GetFontStyle ()
{
	Value *value = GetValue (Control::FontStyleProperty);
	return (FontStyles) value->AsInt32 ();
}

void
Control::SetFontStyle (FontStyles value)
{
	SetValue (Control::FontStyleProperty, Value (value));
}

FontWeights
Control::GetFontWeight ()
{
	Value *value = GetValue (Control::FontWeightProperty);
	return (FontWeights) value->AsInt32 ();
}

void
Control::SetFontWeight (FontWeights value)
{
	SetValue (Control::FontWeightProperty, Value (value));
}

Brush *
Control::GetForeground ()
{
	Value *value = GetValue (Control::ForegroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
Control::SetForeground (Brush *value)
{
	SetValue (Control::ForegroundProperty, Value (value));
}

HorizontalAlignment
Control::GetHorizontalContentAlignment ()
{
	Value *value = GetValue (Control::HorizontalContentAlignmentProperty);
	return (HorizontalAlignment) value->AsInt32 ();
}

void
Control::SetHorizontalContentAlignment (HorizontalAlignment value)
{
	SetValue (Control::HorizontalContentAlignmentProperty, Value (value));
}

bool
Control::GetIsTabStop ()
{
	Value *value = GetValue (Control::IsTabStopProperty);
	return value->AsBool ();
}

void
Control::SetIsTabStop (bool value)
{
	SetValue (Control::IsTabStopProperty, Value (value));
}

Thickness *
Control::GetPadding ()
{
	Value *value = GetValue (Control::PaddingProperty);
	return value ? value->AsThickness () : NULL;
}

void
Control::SetPadding (Thickness *value)
{
	if (!value) return;
	SetValue (Control::PaddingProperty, Value (*value));
}

gint32
Control::GetTabIndex ()
{
	Value *value = GetValue (Control::TabIndexProperty);
	return value->AsInt32 ();
}

void
Control::SetTabIndex (gint32 value)
{
	SetValue (Control::TabIndexProperty, Value (value));
}

KeyboardNavigationMode
Control::GetTabNavigation ()
{
	Value *value = GetValue (Control::TabNavigationProperty);
	return (KeyboardNavigationMode) value->AsInt32 ();
}

void
Control::SetTabNavigation (KeyboardNavigationMode value)
{
	SetValue (Control::TabNavigationProperty, Value (value));
}

ControlTemplate *
Control::GetTemplate ()
{
	Value *value = GetValue (Control::TemplateProperty);
	return value ? value->AsControlTemplate () : NULL;
}

void
Control::SetTemplate (ControlTemplate *value)
{
	SetValue (Control::TemplateProperty, Value (value));
}

VerticalAlignment
Control::GetVerticalContentAlignment ()
{
	Value *value = GetValue (Control::VerticalContentAlignmentProperty);
	return (VerticalAlignment) value->AsInt32 ();
}

void
Control::SetVerticalContentAlignment (VerticalAlignment value)
{
	SetValue (Control::VerticalContentAlignmentProperty, Value (value));
}

const char *
DeepZoomImageTileSource::GetUriSource ()
{
	Value *value = GetValue (DeepZoomImageTileSource::UriSourceProperty);
	return value ? value->AsString () : NULL;
}

void
DeepZoomImageTileSource::SetUriSource (const char *value)
{
	SetValue (DeepZoomImageTileSource::UriSourceProperty, Value (value));
}

const char *
DependencyObject::GetName ()
{
	Value *value = GetValue (DependencyObject::NameProperty);
	return value ? value->AsString () : NULL;
}

void
DependencyObject::SetName (const char *value)
{
	SetValue (DependencyObject::NameProperty, Value (value));
}

Surface *
Deployment::GetSurface ()
{
	Value *value = GetValue (Deployment::SurfaceProperty);
	return value ? value->AsSurface () : NULL;
}

void
Deployment::SetSurface (Surface *value)
{
	SetValue (Deployment::SurfaceProperty, Value (value));
}

double *
DoubleAnimation::GetBy ()
{
	Value *value = GetValue (DoubleAnimation::ByProperty);
	return value ? value->AsNullableDouble () : NULL;
}

void
DoubleAnimation::SetBy (double value)
{
	SetValue (DoubleAnimation::ByProperty, Value (value));
}

void
DoubleAnimation::SetBy (double * value)
{
	if (!value)
		SetValue (DoubleAnimation::ByProperty, NULL);
	else
		SetValue (DoubleAnimation::ByProperty, Value (*value));
}

double *
DoubleAnimation::GetFrom ()
{
	Value *value = GetValue (DoubleAnimation::FromProperty);
	return value ? value->AsNullableDouble () : NULL;
}

void
DoubleAnimation::SetFrom (double value)
{
	SetValue (DoubleAnimation::FromProperty, Value (value));
}

void
DoubleAnimation::SetFrom (double * value)
{
	if (!value)
		SetValue (DoubleAnimation::FromProperty, NULL);
	else
		SetValue (DoubleAnimation::FromProperty, Value (*value));
}

double *
DoubleAnimation::GetTo ()
{
	Value *value = GetValue (DoubleAnimation::ToProperty);
	return value ? value->AsNullableDouble () : NULL;
}

void
DoubleAnimation::SetTo (double value)
{
	SetValue (DoubleAnimation::ToProperty, Value (value));
}

void
DoubleAnimation::SetTo (double * value)
{
	if (!value)
		SetValue (DoubleAnimation::ToProperty, NULL);
	else
		SetValue (DoubleAnimation::ToProperty, Value (*value));
}

DoubleKeyFrameCollection *
DoubleAnimationUsingKeyFrames::GetKeyFrames ()
{
	Value *value = GetValue (DoubleAnimationUsingKeyFrames::KeyFramesProperty);
	return value ? value->AsDoubleKeyFrameCollection () : NULL;
}

void
DoubleAnimationUsingKeyFrames::SetKeyFrames (DoubleKeyFrameCollection *value)
{
	SetValue (DoubleAnimationUsingKeyFrames::KeyFramesProperty, Value (value));
}

KeyTime *
DoubleKeyFrame::GetKeyTime ()
{
	Value *value = DependencyObject::GetValue (DoubleKeyFrame::KeyTimeProperty);
	return value ? value->AsKeyTime () : NULL;
}

void
DoubleKeyFrame::SetKeyTime (KeyTime value)
{
	DependencyObject::SetValue (DoubleKeyFrame::KeyTimeProperty, Value (value));
}

void
DoubleKeyFrame::SetKeyTime (KeyTime *value)
{
	if (!value)
		DependencyObject::SetValue (DoubleKeyFrame::KeyTimeProperty, NULL);
	else
		DependencyObject::SetValue (DoubleKeyFrame::KeyTimeProperty, Value (*value));
}

double *
DoubleKeyFrame::GetValue ()
{
	Value *value = DependencyObject::GetValue (DoubleKeyFrame::ValueProperty);
	return value ? value->AsNullableDouble () : NULL;
}

void
DoubleKeyFrame::SetValue (double value)
{
	DependencyObject::SetValue (DoubleKeyFrame::ValueProperty, Value (value));
}

void
DoubleKeyFrame::SetValue (double * value)
{
	if (!value)
		DependencyObject::SetValue (DoubleKeyFrame::ValueProperty, NULL);
	else
		DependencyObject::SetValue (DoubleKeyFrame::ValueProperty, Value (*value));
}

Color *
DrawingAttributes::GetColor ()
{
	Value *value = GetValue (DrawingAttributes::ColorProperty);
	return value ? value->AsColor () : NULL;
}

void
DrawingAttributes::SetColor (Color *value)
{
	if (!value) return;
	SetValue (DrawingAttributes::ColorProperty, Value (*value));
}

double
DrawingAttributes::GetHeight ()
{
	Value *value = GetValue (DrawingAttributes::HeightProperty);
	return value->AsDouble ();
}

void
DrawingAttributes::SetHeight (double value)
{
	SetValue (DrawingAttributes::HeightProperty, Value (value));
}

Color *
DrawingAttributes::GetOutlineColor ()
{
	Value *value = GetValue (DrawingAttributes::OutlineColorProperty);
	return value ? value->AsColor () : NULL;
}

void
DrawingAttributes::SetOutlineColor (Color *value)
{
	if (!value) return;
	SetValue (DrawingAttributes::OutlineColorProperty, Value (*value));
}

double
DrawingAttributes::GetWidth ()
{
	Value *value = GetValue (DrawingAttributes::WidthProperty);
	return value->AsDouble ();
}

void
DrawingAttributes::SetWidth (double value)
{
	SetValue (DrawingAttributes::WidthProperty, Value (value));
}

Point *
EllipseGeometry::GetCenter ()
{
	Value *value = GetValue (EllipseGeometry::CenterProperty);
	return value ? value->AsPoint () : NULL;
}

void
EllipseGeometry::SetCenter (Point *value)
{
	if (!value) return;
	SetValue (EllipseGeometry::CenterProperty, Value (*value));
}

double
EllipseGeometry::GetRadiusX ()
{
	Value *value = GetValue (EllipseGeometry::RadiusXProperty);
	return value->AsDouble ();
}

void
EllipseGeometry::SetRadiusX (double value)
{
	SetValue (EllipseGeometry::RadiusXProperty, Value (value));
}

double
EllipseGeometry::GetRadiusY ()
{
	Value *value = GetValue (EllipseGeometry::RadiusYProperty);
	return value->AsDouble ();
}

void
EllipseGeometry::SetRadiusY (double value)
{
	SetValue (EllipseGeometry::RadiusYProperty, Value (value));
}

TriggerActionCollection *
EventTrigger::GetActions ()
{
	Value *value = GetValue (EventTrigger::ActionsProperty);
	return value ? value->AsTriggerActionCollection () : NULL;
}

void
EventTrigger::SetActions (TriggerActionCollection *value)
{
	SetValue (EventTrigger::ActionsProperty, Value (value));
}

const char *
EventTrigger::GetRoutedEvent ()
{
	Value *value = GetValue (EventTrigger::RoutedEventProperty);
	return value ? value->AsString () : NULL;
}

void
EventTrigger::SetRoutedEvent (const char *value)
{
	SetValue (EventTrigger::RoutedEventProperty, Value (value));
}

double
FrameworkElement::GetActualHeight ()
{
	Value *value = GetValue (FrameworkElement::ActualHeightProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetActualHeight (double value)
{
	SetValue (FrameworkElement::ActualHeightProperty, Value (value));
}

double
FrameworkElement::GetActualWidth ()
{
	Value *value = GetValue (FrameworkElement::ActualWidthProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetActualWidth (double value)
{
	SetValue (FrameworkElement::ActualWidthProperty, Value (value));
}

double
FrameworkElement::GetHeight ()
{
	Value *value = GetValue (FrameworkElement::HeightProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetHeight (double value)
{
	SetValue (FrameworkElement::HeightProperty, Value (value));
}

HorizontalAlignment
FrameworkElement::GetHorizontalAlignment ()
{
	Value *value = GetValue (FrameworkElement::HorizontalAlignmentProperty);
	return (HorizontalAlignment) value->AsInt32 ();
}

void
FrameworkElement::SetHorizontalAlignment (HorizontalAlignment value)
{
	SetValue (FrameworkElement::HorizontalAlignmentProperty, Value (value));
}

Thickness *
FrameworkElement::GetMargin ()
{
	Value *value = GetValue (FrameworkElement::MarginProperty);
	return value ? value->AsThickness () : NULL;
}

void
FrameworkElement::SetMargin (Thickness *value)
{
	if (!value) return;
	SetValue (FrameworkElement::MarginProperty, Value (*value));
}

double
FrameworkElement::GetMaxHeight ()
{
	Value *value = GetValue (FrameworkElement::MaxHeightProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetMaxHeight (double value)
{
	SetValue (FrameworkElement::MaxHeightProperty, Value (value));
}

double
FrameworkElement::GetMaxWidth ()
{
	Value *value = GetValue (FrameworkElement::MaxWidthProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetMaxWidth (double value)
{
	SetValue (FrameworkElement::MaxWidthProperty, Value (value));
}

double
FrameworkElement::GetMinHeight ()
{
	Value *value = GetValue (FrameworkElement::MinHeightProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetMinHeight (double value)
{
	SetValue (FrameworkElement::MinHeightProperty, Value (value));
}

double
FrameworkElement::GetMinWidth ()
{
	Value *value = GetValue (FrameworkElement::MinWidthProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetMinWidth (double value)
{
	SetValue (FrameworkElement::MinWidthProperty, Value (value));
}

Style *
FrameworkElement::GetStyle ()
{
	Value *value = GetValue (FrameworkElement::StyleProperty);
	return value ? value->AsStyle () : NULL;
}

void
FrameworkElement::SetStyle (Style *value)
{
	SetValue (FrameworkElement::StyleProperty, Value (value));
}

VerticalAlignment
FrameworkElement::GetVerticalAlignment ()
{
	Value *value = GetValue (FrameworkElement::VerticalAlignmentProperty);
	return (VerticalAlignment) value->AsInt32 ();
}

void
FrameworkElement::SetVerticalAlignment (VerticalAlignment value)
{
	SetValue (FrameworkElement::VerticalAlignmentProperty, Value (value));
}

double
FrameworkElement::GetWidth ()
{
	Value *value = GetValue (FrameworkElement::WidthProperty);
	return value->AsDouble ();
}

void
FrameworkElement::SetWidth (double value)
{
	SetValue (FrameworkElement::WidthProperty, Value (value));
}

Transform *
Geometry::GetTransform ()
{
	Value *value = GetValue (Geometry::TransformProperty);
	return value ? value->AsTransform () : NULL;
}

void
Geometry::SetTransform (Transform *value)
{
	SetValue (Geometry::TransformProperty, Value (value));
}

GeometryCollection *
GeometryGroup::GetChildren ()
{
	Value *value = GetValue (GeometryGroup::ChildrenProperty);
	return value ? value->AsGeometryCollection () : NULL;
}

void
GeometryGroup::SetChildren (GeometryCollection *value)
{
	SetValue (GeometryGroup::ChildrenProperty, Value (value));
}

FillRule
GeometryGroup::GetFillRule ()
{
	Value *value = GetValue (GeometryGroup::FillRuleProperty);
	return (FillRule) value->AsInt32 ();
}

void
GeometryGroup::SetFillRule (FillRule value)
{
	SetValue (GeometryGroup::FillRuleProperty, Value (value));
}

Brush *
Glyphs::GetFill ()
{
	Value *value = GetValue (Glyphs::FillProperty);
	return value ? value->AsBrush () : NULL;
}

void
Glyphs::SetFill (Brush *value)
{
	SetValue (Glyphs::FillProperty, Value (value));
}

double
Glyphs::GetFontRenderingEmSize ()
{
	Value *value = GetValue (Glyphs::FontRenderingEmSizeProperty);
	return value->AsDouble ();
}

void
Glyphs::SetFontRenderingEmSize (double value)
{
	SetValue (Glyphs::FontRenderingEmSizeProperty, Value (value));
}

const char *
Glyphs::GetFontUri ()
{
	Value *value = GetValue (Glyphs::FontUriProperty);
	return value ? value->AsString () : NULL;
}

void
Glyphs::SetFontUri (const char *value)
{
	SetValue (Glyphs::FontUriProperty, Value (value));
}

const char *
Glyphs::GetIndices ()
{
	Value *value = GetValue (Glyphs::IndicesProperty);
	return value ? value->AsString () : NULL;
}

void
Glyphs::SetIndices (const char *value)
{
	SetValue (Glyphs::IndicesProperty, Value (value));
}

double
Glyphs::GetOriginX ()
{
	Value *value = GetValue (Glyphs::OriginXProperty);
	return value->AsDouble ();
}

void
Glyphs::SetOriginX (double value)
{
	SetValue (Glyphs::OriginXProperty, Value (value));
}

double
Glyphs::GetOriginY ()
{
	Value *value = GetValue (Glyphs::OriginYProperty);
	return value->AsDouble ();
}

void
Glyphs::SetOriginY (double value)
{
	SetValue (Glyphs::OriginYProperty, Value (value));
}

StyleSimulations
Glyphs::GetStyleSimulations ()
{
	Value *value = GetValue (Glyphs::StyleSimulationsProperty);
	return (StyleSimulations) value->AsInt32 ();
}

void
Glyphs::SetStyleSimulations (StyleSimulations value)
{
	SetValue (Glyphs::StyleSimulationsProperty, Value (value));
}

const char *
Glyphs::GetUnicodeString ()
{
	Value *value = GetValue (Glyphs::UnicodeStringProperty);
	return value ? value->AsString () : NULL;
}

void
Glyphs::SetUnicodeString (const char *value)
{
	SetValue (Glyphs::UnicodeStringProperty, Value (value));
}

ColorInterpolationMode
GradientBrush::GetColorInterpolationMode ()
{
	Value *value = GetValue (GradientBrush::ColorInterpolationModeProperty);
	return (ColorInterpolationMode) value->AsInt32 ();
}

void
GradientBrush::SetColorInterpolationMode (ColorInterpolationMode value)
{
	SetValue (GradientBrush::ColorInterpolationModeProperty, Value (value));
}

GradientStopCollection *
GradientBrush::GetGradientStops ()
{
	Value *value = GetValue (GradientBrush::GradientStopsProperty);
	return value ? value->AsGradientStopCollection () : NULL;
}

void
GradientBrush::SetGradientStops (GradientStopCollection *value)
{
	SetValue (GradientBrush::GradientStopsProperty, Value (value));
}

BrushMappingMode
GradientBrush::GetMappingMode ()
{
	Value *value = GetValue (GradientBrush::MappingModeProperty);
	return (BrushMappingMode) value->AsInt32 ();
}

void
GradientBrush::SetMappingMode (BrushMappingMode value)
{
	SetValue (GradientBrush::MappingModeProperty, Value (value));
}

GradientSpreadMethod
GradientBrush::GetSpreadMethod ()
{
	Value *value = GetValue (GradientBrush::SpreadMethodProperty);
	return (GradientSpreadMethod) value->AsInt32 ();
}

void
GradientBrush::SetSpreadMethod (GradientSpreadMethod value)
{
	SetValue (GradientBrush::SpreadMethodProperty, Value (value));
}

Color *
GradientStop::GetColor ()
{
	Value *value = GetValue (GradientStop::ColorProperty);
	return value ? value->AsColor () : NULL;
}

void
GradientStop::SetColor (Color *value)
{
	if (!value) return;
	SetValue (GradientStop::ColorProperty, Value (*value));
}

double
GradientStop::GetOffset ()
{
	Value *value = GetValue (GradientStop::OffsetProperty);
	return value->AsDouble ();
}

void
GradientStop::SetOffset (double value)
{
	SetValue (GradientStop::OffsetProperty, Value (value));
}

ColumnDefinitionCollection *
Grid::GetColumnDefinitions ()
{
	Value *value = GetValue (Grid::ColumnDefinitionsProperty);
	return value ? value->AsColumnDefinitionCollection () : NULL;
}

void
Grid::SetColumnDefinitions (ColumnDefinitionCollection *value)
{
	SetValue (Grid::ColumnDefinitionsProperty, Value (value));
}

gint32
Grid::GetColumn (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Grid::ColumnProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Grid::ColumnProperty)->GetDefaultValue();
	return value->AsInt32 ();
}

void
Grid::SetColumn (DependencyObject *obj, gint32 value)
{
	if (!obj) return;
	obj->SetValue (Grid::ColumnProperty, Value (value));
}

gint32
Grid::GetColumnSpan (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Grid::ColumnSpanProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Grid::ColumnSpanProperty)->GetDefaultValue();
	return value->AsInt32 ();
}

void
Grid::SetColumnSpan (DependencyObject *obj, gint32 value)
{
	if (!obj) return;
	obj->SetValue (Grid::ColumnSpanProperty, Value (value));
}

RowDefinitionCollection *
Grid::GetRowDefinitions ()
{
	Value *value = GetValue (Grid::RowDefinitionsProperty);
	return value ? value->AsRowDefinitionCollection () : NULL;
}

void
Grid::SetRowDefinitions (RowDefinitionCollection *value)
{
	SetValue (Grid::RowDefinitionsProperty, Value (value));
}

gint32
Grid::GetRow (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Grid::RowProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Grid::RowProperty)->GetDefaultValue();
	return value->AsInt32 ();
}

void
Grid::SetRow (DependencyObject *obj, gint32 value)
{
	if (!obj) return;
	obj->SetValue (Grid::RowProperty, Value (value));
}

gint32
Grid::GetRowSpan (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Grid::RowSpanProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Grid::RowSpanProperty)->GetDefaultValue();
	return value->AsInt32 ();
}

void
Grid::SetRowSpan (DependencyObject *obj, gint32 value)
{
	if (!obj) return;
	obj->SetValue (Grid::RowSpanProperty, Value (value));
}

bool
Grid::GetShowGridLines ()
{
	Value *value = GetValue (Grid::ShowGridLinesProperty);
	return value->AsBool ();
}

void
Grid::SetShowGridLines (bool value)
{
	SetValue (Grid::ShowGridLinesProperty, Value (value));
}

BitmapImage *
Image::GetSource ()
{
	Value *value = GetValue (Image::SourceProperty);
	return value ? value->AsBitmapImage () : NULL;
}

void
Image::SetSource (BitmapImage *value)
{
	SetValue (Image::SourceProperty, Value (value));
}

double
ImageBrush::GetDownloadProgress ()
{
	Value *value = GetValue (ImageBrush::DownloadProgressProperty);
	return value->AsDouble ();
}

void
ImageBrush::SetDownloadProgress (double value)
{
	SetValue (ImageBrush::DownloadProgressProperty, Value (value));
}

BitmapImage *
ImageBrush::GetImageSource ()
{
	Value *value = GetValue (ImageBrush::ImageSourceProperty);
	return value ? value->AsBitmapImage () : NULL;
}

void
ImageBrush::SetImageSource (BitmapImage *value)
{
	SetValue (ImageBrush::ImageSourceProperty, Value (value));
}

StrokeCollection *
InkPresenter::GetStrokes ()
{
	Value *value = GetValue (InkPresenter::StrokesProperty);
	return value ? value->AsStrokeCollection () : NULL;
}

void
InkPresenter::SetStrokes (StrokeCollection *value)
{
	SetValue (InkPresenter::StrokesProperty, Value (value));
}

FontFamily *
Inline::GetFontFamily ()
{
	Value *value = GetValue (Inline::FontFamilyProperty);
	return value ? value->AsFontFamily () : NULL;
}

void
Inline::SetFontFamily (FontFamily *value)
{
	if (!value) return;
	SetValue (Inline::FontFamilyProperty, Value (*value));
}

const char *
Inline::GetFontFilename ()
{
	Value *value = GetValue (Inline::FontFilenameProperty);
	return value ? value->AsString () : NULL;
}

void
Inline::SetFontFilename (const char *value)
{
	SetValue (Inline::FontFilenameProperty, Value (value));
}

double
Inline::GetFontSize ()
{
	Value *value = GetValue (Inline::FontSizeProperty);
	return value->AsDouble ();
}

void
Inline::SetFontSize (double value)
{
	SetValue (Inline::FontSizeProperty, Value (value));
}

FontStretches
Inline::GetFontStretch ()
{
	Value *value = GetValue (Inline::FontStretchProperty);
	return (FontStretches) value->AsInt32 ();
}

void
Inline::SetFontStretch (FontStretches value)
{
	SetValue (Inline::FontStretchProperty, Value (value));
}

FontStyles
Inline::GetFontStyle ()
{
	Value *value = GetValue (Inline::FontStyleProperty);
	return (FontStyles) value->AsInt32 ();
}

void
Inline::SetFontStyle (FontStyles value)
{
	SetValue (Inline::FontStyleProperty, Value (value));
}

FontWeights
Inline::GetFontWeight ()
{
	Value *value = GetValue (Inline::FontWeightProperty);
	return (FontWeights) value->AsInt32 ();
}

void
Inline::SetFontWeight (FontWeights value)
{
	SetValue (Inline::FontWeightProperty, Value (value));
}

Brush *
Inline::GetForeground ()
{
	Value *value = GetValue (Inline::ForegroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
Inline::SetForeground (Brush *value)
{
	SetValue (Inline::ForegroundProperty, Value (value));
}

TextDecorations
Inline::GetTextDecorations ()
{
	Value *value = GetValue (Inline::TextDecorationsProperty);
	return (TextDecorations) value->AsInt32 ();
}

void
Inline::SetTextDecorations (TextDecorations value)
{
	SetValue (Inline::TextDecorationsProperty, Value (value));
}

Point *
KeySpline::GetControlPoint1 ()
{
	Value *value = GetValue (KeySpline::ControlPoint1Property);
	return value ? value->AsPoint () : NULL;
}

void
KeySpline::SetControlPoint1 (Point *value)
{
	if (!value) return;
	SetValue (KeySpline::ControlPoint1Property, Value (*value));
}

Point *
KeySpline::GetControlPoint2 ()
{
	Value *value = GetValue (KeySpline::ControlPoint2Property);
	return value ? value->AsPoint () : NULL;
}

void
KeySpline::SetControlPoint2 (Point *value)
{
	if (!value) return;
	SetValue (KeySpline::ControlPoint2Property, Value (*value));
}

Size *
LayoutInformation::GetLastArrange (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (LayoutInformation::LastArrangeProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (LayoutInformation::LastArrangeProperty)->GetDefaultValue();
	return value ? value->AsSize () : NULL;
}

void
LayoutInformation::SetLastArrange (DependencyObject *obj, Size *value)
{
	if (!obj) return;
	if (!value) return;
	obj->SetValue (LayoutInformation::LastArrangeProperty, Value (*value));
}

Size *
LayoutInformation::GetLastMeasure (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (LayoutInformation::LastMeasureProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (LayoutInformation::LastMeasureProperty)->GetDefaultValue();
	return value ? value->AsSize () : NULL;
}

void
LayoutInformation::SetLastMeasure (DependencyObject *obj, Size *value)
{
	if (!obj) return;
	if (!value) return;
	obj->SetValue (LayoutInformation::LastMeasureProperty, Value (*value));
}

Geometry *
LayoutInformation::GetLayoutClip (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (LayoutInformation::LayoutClipProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (LayoutInformation::LayoutClipProperty)->GetDefaultValue();
	return value ? value->AsGeometry () : NULL;
}

void
LayoutInformation::SetLayoutClip (DependencyObject *obj, Geometry *value)
{
	if (!obj) return;
	obj->SetValue (LayoutInformation::LayoutClipProperty, Value (value));
}

Rect *
LayoutInformation::GetLayoutSlot (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (LayoutInformation::LayoutSlotProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (LayoutInformation::LayoutSlotProperty)->GetDefaultValue();
	return value ? value->AsRect () : NULL;
}

void
LayoutInformation::SetLayoutSlot (DependencyObject *obj, Rect *value)
{
	if (!obj) return;
	if (!value) return;
	obj->SetValue (LayoutInformation::LayoutSlotProperty, Value (*value));
}

double
Line::GetX1 ()
{
	Value *value = GetValue (Line::X1Property);
	return value->AsDouble ();
}

void
Line::SetX1 (double value)
{
	SetValue (Line::X1Property, Value (value));
}

double
Line::GetX2 ()
{
	Value *value = GetValue (Line::X2Property);
	return value->AsDouble ();
}

void
Line::SetX2 (double value)
{
	SetValue (Line::X2Property, Value (value));
}

double
Line::GetY1 ()
{
	Value *value = GetValue (Line::Y1Property);
	return value->AsDouble ();
}

void
Line::SetY1 (double value)
{
	SetValue (Line::Y1Property, Value (value));
}

double
Line::GetY2 ()
{
	Value *value = GetValue (Line::Y2Property);
	return value->AsDouble ();
}

void
Line::SetY2 (double value)
{
	SetValue (Line::Y2Property, Value (value));
}

Point *
LinearGradientBrush::GetEndPoint ()
{
	Value *value = GetValue (LinearGradientBrush::EndPointProperty);
	return value ? value->AsPoint () : NULL;
}

void
LinearGradientBrush::SetEndPoint (Point *value)
{
	if (!value) return;
	SetValue (LinearGradientBrush::EndPointProperty, Value (*value));
}

Point *
LinearGradientBrush::GetStartPoint ()
{
	Value *value = GetValue (LinearGradientBrush::StartPointProperty);
	return value ? value->AsPoint () : NULL;
}

void
LinearGradientBrush::SetStartPoint (Point *value)
{
	if (!value) return;
	SetValue (LinearGradientBrush::StartPointProperty, Value (*value));
}

Point *
LineGeometry::GetEndPoint ()
{
	Value *value = GetValue (LineGeometry::EndPointProperty);
	return value ? value->AsPoint () : NULL;
}

void
LineGeometry::SetEndPoint (Point *value)
{
	if (!value) return;
	SetValue (LineGeometry::EndPointProperty, Value (*value));
}

Point *
LineGeometry::GetStartPoint ()
{
	Value *value = GetValue (LineGeometry::StartPointProperty);
	return value ? value->AsPoint () : NULL;
}

void
LineGeometry::SetStartPoint (Point *value)
{
	if (!value) return;
	SetValue (LineGeometry::StartPointProperty, Value (*value));
}

Point *
LineSegment::GetPoint ()
{
	Value *value = GetValue (LineSegment::PointProperty);
	return value ? value->AsPoint () : NULL;
}

void
LineSegment::SetPoint (Point *value)
{
	if (!value) return;
	SetValue (LineSegment::PointProperty, Value (*value));
}

double
Matrix::GetM11 ()
{
	Value *value = GetValue (Matrix::M11Property);
	return value->AsDouble ();
}

void
Matrix::SetM11 (double value)
{
	SetValue (Matrix::M11Property, Value (value));
}

double
Matrix::GetM12 ()
{
	Value *value = GetValue (Matrix::M12Property);
	return value->AsDouble ();
}

void
Matrix::SetM12 (double value)
{
	SetValue (Matrix::M12Property, Value (value));
}

double
Matrix::GetM21 ()
{
	Value *value = GetValue (Matrix::M21Property);
	return value->AsDouble ();
}

void
Matrix::SetM21 (double value)
{
	SetValue (Matrix::M21Property, Value (value));
}

double
Matrix::GetM22 ()
{
	Value *value = GetValue (Matrix::M22Property);
	return value->AsDouble ();
}

void
Matrix::SetM22 (double value)
{
	SetValue (Matrix::M22Property, Value (value));
}

double
Matrix::GetOffsetX ()
{
	Value *value = GetValue (Matrix::OffsetXProperty);
	return value->AsDouble ();
}

void
Matrix::SetOffsetX (double value)
{
	SetValue (Matrix::OffsetXProperty, Value (value));
}

double
Matrix::GetOffsetY ()
{
	Value *value = GetValue (Matrix::OffsetYProperty);
	return value->AsDouble ();
}

void
Matrix::SetOffsetY (double value)
{
	SetValue (Matrix::OffsetYProperty, Value (value));
}

Matrix *
MatrixTransform::GetMatrix ()
{
	Value *value = GetValue (MatrixTransform::MatrixProperty);
	return value ? value->AsMatrix () : NULL;
}

void
MatrixTransform::SetMatrix (Matrix *value)
{
	SetValue (MatrixTransform::MatrixProperty, Value (value));
}

const char *
MediaAttribute::GetValue ()
{
	Value *value = DependencyObject::GetValue (MediaAttribute::ValueProperty);
	return value ? value->AsString () : NULL;
}

void
MediaAttribute::SetValue (const char *value)
{
	DependencyObject::SetValue (MediaAttribute::ValueProperty, Value (value));
}

double
MediaBase::GetDownloadProgress ()
{
	Value *value = GetValue (MediaBase::DownloadProgressProperty);
	return value->AsDouble ();
}

void
MediaBase::SetDownloadProgress (double value)
{
	SetValue (MediaBase::DownloadProgressProperty, Value (value));
}

const char *
MediaBase::GetSource ()
{
	Value *value = GetValue (MediaBase::SourceProperty);
	return value ? value->AsString () : NULL;
}

void
MediaBase::SetSource (const char *value)
{
	SetValue (MediaBase::SourceProperty, Value (value));
}

Stretch
MediaBase::GetStretch ()
{
	Value *value = GetValue (MediaBase::StretchProperty);
	return (Stretch) value->AsInt32 ();
}

void
MediaBase::SetStretch (Stretch value)
{
	SetValue (MediaBase::StretchProperty, Value (value));
}

MediaAttributeCollection *
MediaElement::GetAttributes ()
{
	Value *value = GetValue (MediaElement::AttributesProperty);
	return value ? value->AsMediaAttributeCollection () : NULL;
}

void
MediaElement::SetAttributes (MediaAttributeCollection *value)
{
	SetValue (MediaElement::AttributesProperty, Value (value));
}

gint32
MediaElement::GetAudioStreamCount ()
{
	Value *value = GetValue (MediaElement::AudioStreamCountProperty);
	return value->AsInt32 ();
}

void
MediaElement::SetAudioStreamCount (gint32 value)
{
	SetValue (MediaElement::AudioStreamCountProperty, Value (value));
}

gint32 *
MediaElement::GetAudioStreamIndex ()
{
	Value *value = GetValue (MediaElement::AudioStreamIndexProperty);
	return value ? value->AsNullableInt32 () : NULL;
}

void
MediaElement::SetAudioStreamIndex (gint32 value)
{
	SetValue (MediaElement::AudioStreamIndexProperty, Value (value));
}

void
MediaElement::SetAudioStreamIndex (gint32 * value)
{
	if (!value)
		SetValue (MediaElement::AudioStreamIndexProperty, NULL);
	else
		SetValue (MediaElement::AudioStreamIndexProperty, Value (*value));
}

bool
MediaElement::GetAutoPlay ()
{
	Value *value = GetValue (MediaElement::AutoPlayProperty);
	return value->AsBool ();
}

void
MediaElement::SetAutoPlay (bool value)
{
	SetValue (MediaElement::AutoPlayProperty, Value (value));
}

double
MediaElement::GetBalance ()
{
	Value *value = GetValue (MediaElement::BalanceProperty);
	return value->AsDouble ();
}

void
MediaElement::SetBalance (double value)
{
	SetValue (MediaElement::BalanceProperty, Value (value));
}

double
MediaElement::GetBufferingProgress ()
{
	Value *value = GetValue (MediaElement::BufferingProgressProperty);
	return value->AsDouble ();
}

void
MediaElement::SetBufferingProgress (double value)
{
	SetValue (MediaElement::BufferingProgressProperty, Value (value));
}

TimeSpan
MediaElement::GetBufferingTime ()
{
	Value *value = GetValue (MediaElement::BufferingTimeProperty);
	return value->AsTimeSpan ();
}

void
MediaElement::SetBufferingTime (TimeSpan value)
{
	SetValue (MediaElement::BufferingTimeProperty, Value (value, Type::TIMESPAN));
}

bool
MediaElement::GetCanPause ()
{
	Value *value = GetValue (MediaElement::CanPauseProperty);
	return value->AsBool ();
}

void
MediaElement::SetCanPause (bool value)
{
	SetValue (MediaElement::CanPauseProperty, Value (value));
}

bool
MediaElement::GetCanSeek ()
{
	Value *value = GetValue (MediaElement::CanSeekProperty);
	return value->AsBool ();
}

void
MediaElement::SetCanSeek (bool value)
{
	SetValue (MediaElement::CanSeekProperty, Value (value));
}

MediaElementState
MediaElement::GetCurrentState ()
{
	Value *value = GetValue (MediaElement::CurrentStateProperty);
	return (MediaElementState) value->AsInt32 ();
}

void
MediaElement::SetCurrentState (MediaElementState value)
{
	SetValue (MediaElement::CurrentStateProperty, Value (value));
}

double
MediaElement::GetDownloadProgressOffset ()
{
	Value *value = GetValue (MediaElement::DownloadProgressOffsetProperty);
	return value->AsDouble ();
}

void
MediaElement::SetDownloadProgressOffset (double value)
{
	SetValue (MediaElement::DownloadProgressOffsetProperty, Value (value));
}

double
MediaElement::GetDownloadProgress ()
{
	Value *value = GetValue (MediaElement::DownloadProgressProperty);
	return value->AsDouble ();
}

void
MediaElement::SetDownloadProgress (double value)
{
	SetValue (MediaElement::DownloadProgressProperty, Value (value));
}

double
MediaElement::GetDroppedFramesPerSecond ()
{
	Value *value = GetValue (MediaElement::DroppedFramesPerSecondProperty);
	return value->AsDouble ();
}

void
MediaElement::SetDroppedFramesPerSecond (double value)
{
	SetValue (MediaElement::DroppedFramesPerSecondProperty, Value (value));
}

bool
MediaElement::GetIsMuted ()
{
	Value *value = GetValue (MediaElement::IsMutedProperty);
	return value->AsBool ();
}

void
MediaElement::SetIsMuted (bool value)
{
	SetValue (MediaElement::IsMutedProperty, Value (value));
}

TimelineMarkerCollection *
MediaElement::GetMarkers ()
{
	Value *value = GetValue (MediaElement::MarkersProperty);
	return value ? value->AsTimelineMarkerCollection () : NULL;
}

void
MediaElement::SetMarkers (TimelineMarkerCollection *value)
{
	SetValue (MediaElement::MarkersProperty, Value (value));
}

Duration *
MediaElement::GetNaturalDuration ()
{
	Value *value = GetValue (MediaElement::NaturalDurationProperty);
	return value ? value->AsDuration () : NULL;
}

double
MediaElement::GetNaturalVideoHeight ()
{
	Value *value = GetValue (MediaElement::NaturalVideoHeightProperty);
	return value->AsDouble ();
}

void
MediaElement::SetNaturalVideoHeight (double value)
{
	SetValue (MediaElement::NaturalVideoHeightProperty, Value (value));
}

double
MediaElement::GetNaturalVideoWidth ()
{
	Value *value = GetValue (MediaElement::NaturalVideoWidthProperty);
	return value->AsDouble ();
}

void
MediaElement::SetNaturalVideoWidth (double value)
{
	SetValue (MediaElement::NaturalVideoWidthProperty, Value (value));
}

TimeSpan
MediaElement::GetPosition ()
{
	Value *value = GetValue (MediaElement::PositionProperty);
	return value->AsTimeSpan ();
}

void
MediaElement::SetPosition (TimeSpan value)
{
	SetValue (MediaElement::PositionProperty, Value (value, Type::TIMESPAN));
}

double
MediaElement::GetRenderedFramesPerSecond ()
{
	Value *value = GetValue (MediaElement::RenderedFramesPerSecondProperty);
	return value->AsDouble ();
}

void
MediaElement::SetRenderedFramesPerSecond (double value)
{
	SetValue (MediaElement::RenderedFramesPerSecondProperty, Value (value));
}

const char *
MediaElement::GetSource ()
{
	Value *value = GetValue (MediaElement::SourceProperty);
	return value ? value->AsString () : NULL;
}

void
MediaElement::SetSource (const char *value)
{
	SetValue (MediaElement::SourceProperty, Value (value));
}

Stretch
MediaElement::GetStretch ()
{
	Value *value = GetValue (MediaElement::StretchProperty);
	return (Stretch) value->AsInt32 ();
}

void
MediaElement::SetStretch (Stretch value)
{
	SetValue (MediaElement::StretchProperty, Value (value));
}

double
MediaElement::GetVolume ()
{
	Value *value = GetValue (MediaElement::VolumeProperty);
	return value->AsDouble ();
}

void
MediaElement::SetVolume (double value)
{
	SetValue (MediaElement::VolumeProperty, Value (value));
}

double
MultiScaleImage::GetAspectRatio ()
{
	Value *value = GetValue (MultiScaleImage::AspectRatioProperty);
	return value->AsDouble ();
}

MultiScaleTileSource *
MultiScaleImage::GetSource ()
{
	Value *value = GetValue (MultiScaleImage::SourceProperty);
	return value ? value->AsMultiScaleTileSource () : NULL;
}

void
MultiScaleImage::SetSource (MultiScaleTileSource *value)
{
	SetValue (MultiScaleImage::SourceProperty, Value (value));
}

MultiScaleSubImageCollection *
MultiScaleImage::GetSubImageCollection ()
{
	Value *value = GetValue (MultiScaleImage::SubImageCollectionProperty);
	return value ? value->AsMultiScaleSubImageCollection () : NULL;
}

bool
MultiScaleImage::GetUseSprings ()
{
	Value *value = GetValue (MultiScaleImage::UseSpringsProperty);
	return value->AsBool ();
}

void
MultiScaleImage::SetUseSprings (bool value)
{
	SetValue (MultiScaleImage::UseSpringsProperty, Value (value));
}

Point *
MultiScaleImage::GetViewportOrigin ()
{
	Value *value = GetValue (MultiScaleImage::ViewportOriginProperty);
	return value ? value->AsPoint () : NULL;
}

void
MultiScaleImage::SetViewportOrigin (Point *value)
{
	if (!value) return;
	SetValue (MultiScaleImage::ViewportOriginProperty, Value (*value));
}

double
MultiScaleImage::GetViewportWidth ()
{
	Value *value = GetValue (MultiScaleImage::ViewportWidthProperty);
	return value->AsDouble ();
}

void
MultiScaleImage::SetViewportWidth (double value)
{
	SetValue (MultiScaleImage::ViewportWidthProperty, Value (value));
}

double
MultiScaleSubImage::GetAspectRatio ()
{
	Value *value = GetValue (MultiScaleSubImage::AspectRatioProperty);
	return value->AsDouble ();
}

double
MultiScaleSubImage::GetOpacity ()
{
	Value *value = GetValue (MultiScaleSubImage::OpacityProperty);
	return value->AsDouble ();
}

void
MultiScaleSubImage::SetOpacity (double value)
{
	SetValue (MultiScaleSubImage::OpacityProperty, Value (value));
}

Point *
MultiScaleSubImage::GetViewportOrigin ()
{
	Value *value = GetValue (MultiScaleSubImage::ViewportOriginProperty);
	return value ? value->AsPoint () : NULL;
}

void
MultiScaleSubImage::SetViewportOrigin (Point *value)
{
	if (!value) return;
	SetValue (MultiScaleSubImage::ViewportOriginProperty, Value (*value));
}

double
MultiScaleSubImage::GetViewportWidth ()
{
	Value *value = GetValue (MultiScaleSubImage::ViewportWidthProperty);
	return value->AsDouble ();
}

void
MultiScaleSubImage::SetViewportWidth (double value)
{
	SetValue (MultiScaleSubImage::ViewportWidthProperty, Value (value));
}

gint32
MultiScaleSubImage::GetZIndex ()
{
	Value *value = GetValue (MultiScaleSubImage::ZIndexProperty);
	return value->AsInt32 ();
}

void
MultiScaleSubImage::SetZIndex (gint32 value)
{
	SetValue (MultiScaleSubImage::ZIndexProperty, Value (value));
}

NameScope *
NameScope::GetNameScope (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (NameScope::NameScopeProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (NameScope::NameScopeProperty)->GetDefaultValue();
	return value ? value->AsNameScope () : NULL;
}

void
NameScope::SetNameScope (DependencyObject *obj, NameScope *value)
{
	if (!obj) return;
	obj->SetValue (NameScope::NameScopeProperty, Value (value));
}

ObjectKeyFrameCollection *
ObjectAnimationUsingKeyFrames::GetKeyFrames ()
{
	Value *value = GetValue (ObjectAnimationUsingKeyFrames::KeyFramesProperty);
	return value ? value->AsObjectKeyFrameCollection () : NULL;
}

void
ObjectAnimationUsingKeyFrames::SetKeyFrames (ObjectKeyFrameCollection *value)
{
	SetValue (ObjectAnimationUsingKeyFrames::KeyFramesProperty, Value (value));
}

KeyTime *
ObjectKeyFrame::GetKeyTime ()
{
	Value *value = DependencyObject::GetValue (ObjectKeyFrame::KeyTimeProperty);
	return value ? value->AsKeyTime () : NULL;
}

void
ObjectKeyFrame::SetKeyTime (KeyTime value)
{
	DependencyObject::SetValue (ObjectKeyFrame::KeyTimeProperty, Value (value));
}

void
ObjectKeyFrame::SetKeyTime (KeyTime *value)
{
	if (!value)
		DependencyObject::SetValue (ObjectKeyFrame::KeyTimeProperty, NULL);
	else
		DependencyObject::SetValue (ObjectKeyFrame::KeyTimeProperty, Value (*value));
}

DependencyObject *
ObjectKeyFrame::GetValue ()
{
	Value *value = DependencyObject::GetValue (ObjectKeyFrame::ValueProperty);
	return value ? value->AsDependencyObject () : NULL;
}

void
ObjectKeyFrame::SetValue (DependencyObject *value)
{
	DependencyObject::SetValue (ObjectKeyFrame::ValueProperty, Value (value));
}

Brush *
Panel::GetBackground ()
{
	Value *value = GetValue (Panel::BackgroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
Panel::SetBackground (Brush *value)
{
	SetValue (Panel::BackgroundProperty, Value (value));
}

UIElementCollection *
Panel::GetChildren ()
{
	Value *value = GetValue (Panel::ChildrenProperty);
	return value ? value->AsUIElementCollection () : NULL;
}

void
Panel::SetChildren (UIElementCollection *value)
{
	SetValue (Panel::ChildrenProperty, Value (value));
}

gint32
PasswordBox::GetMaxLength ()
{
	Value *value = GetValue (PasswordBox::MaxLengthProperty);
	return value->AsInt32 ();
}

void
PasswordBox::SetMaxLength (gint32 value)
{
	SetValue (PasswordBox::MaxLengthProperty, Value (value));
}

gint32
PasswordBox::GetPasswordChar ()
{
	Value *value = GetValue (PasswordBox::PasswordCharProperty);
	return value->AsInt32 ();
}

void
PasswordBox::SetPasswordChar (gint32 value)
{
	SetValue (PasswordBox::PasswordCharProperty, Value (value));
}

const char *
PasswordBox::GetPassword ()
{
	Value *value = GetValue (PasswordBox::PasswordProperty);
	return value ? value->AsString () : NULL;
}

void
PasswordBox::SetPassword (const char *value)
{
	SetValue (PasswordBox::PasswordProperty, Value (value));
}

Brush *
PasswordBox::GetSelectionBackground ()
{
	Value *value = GetValue (PasswordBox::SelectionBackgroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
PasswordBox::SetSelectionBackground (Brush *value)
{
	SetValue (PasswordBox::SelectionBackgroundProperty, Value (value));
}

Brush *
PasswordBox::GetSelectionForeground ()
{
	Value *value = GetValue (PasswordBox::SelectionForegroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
PasswordBox::SetSelectionForeground (Brush *value)
{
	SetValue (PasswordBox::SelectionForegroundProperty, Value (value));
}

Geometry *
Path::GetData ()
{
	Value *value = GetValue (Path::DataProperty);
	return value ? value->AsGeometry () : NULL;
}

void
Path::SetData (Geometry *value)
{
	SetValue (Path::DataProperty, Value (value));
}

bool
PathFigure::GetIsClosed ()
{
	Value *value = GetValue (PathFigure::IsClosedProperty);
	return value->AsBool ();
}

void
PathFigure::SetIsClosed (bool value)
{
	SetValue (PathFigure::IsClosedProperty, Value (value));
}

bool
PathFigure::GetIsFilled ()
{
	Value *value = GetValue (PathFigure::IsFilledProperty);
	return value->AsBool ();
}

void
PathFigure::SetIsFilled (bool value)
{
	SetValue (PathFigure::IsFilledProperty, Value (value));
}

PathSegmentCollection *
PathFigure::GetSegments ()
{
	Value *value = GetValue (PathFigure::SegmentsProperty);
	return value ? value->AsPathSegmentCollection () : NULL;
}

void
PathFigure::SetSegments (PathSegmentCollection *value)
{
	SetValue (PathFigure::SegmentsProperty, Value (value));
}

Point *
PathFigure::GetStartPoint ()
{
	Value *value = GetValue (PathFigure::StartPointProperty);
	return value ? value->AsPoint () : NULL;
}

void
PathFigure::SetStartPoint (Point *value)
{
	if (!value) return;
	SetValue (PathFigure::StartPointProperty, Value (*value));
}

PathFigureCollection *
PathGeometry::GetFigures ()
{
	Value *value = GetValue (PathGeometry::FiguresProperty);
	return value ? value->AsPathFigureCollection () : NULL;
}

void
PathGeometry::SetFigures (PathFigureCollection *value)
{
	SetValue (PathGeometry::FiguresProperty, Value (value));
}

FillRule
PathGeometry::GetFillRule ()
{
	Value *value = GetValue (PathGeometry::FillRuleProperty);
	return (FillRule) value->AsInt32 ();
}

void
PathGeometry::SetFillRule (FillRule value)
{
	SetValue (PathGeometry::FillRuleProperty, Value (value));
}

Point *
PointAnimation::GetBy ()
{
	Value *value = GetValue (PointAnimation::ByProperty);
	return value ? value->AsPoint () : NULL;
}

void
PointAnimation::SetBy (Point value)
{
	SetValue (PointAnimation::ByProperty, Value (value));
}

void
PointAnimation::SetBy (Point *value)
{
	if (!value)
		SetValue (PointAnimation::ByProperty, NULL);
	else
		SetValue (PointAnimation::ByProperty, Value (*value));
}

Point *
PointAnimation::GetFrom ()
{
	Value *value = GetValue (PointAnimation::FromProperty);
	return value ? value->AsPoint () : NULL;
}

void
PointAnimation::SetFrom (Point value)
{
	SetValue (PointAnimation::FromProperty, Value (value));
}

void
PointAnimation::SetFrom (Point *value)
{
	if (!value)
		SetValue (PointAnimation::FromProperty, NULL);
	else
		SetValue (PointAnimation::FromProperty, Value (*value));
}

Point *
PointAnimation::GetTo ()
{
	Value *value = GetValue (PointAnimation::ToProperty);
	return value ? value->AsPoint () : NULL;
}

void
PointAnimation::SetTo (Point value)
{
	SetValue (PointAnimation::ToProperty, Value (value));
}

void
PointAnimation::SetTo (Point *value)
{
	if (!value)
		SetValue (PointAnimation::ToProperty, NULL);
	else
		SetValue (PointAnimation::ToProperty, Value (*value));
}

PointKeyFrameCollection *
PointAnimationUsingKeyFrames::GetKeyFrames ()
{
	Value *value = GetValue (PointAnimationUsingKeyFrames::KeyFramesProperty);
	return value ? value->AsPointKeyFrameCollection () : NULL;
}

void
PointAnimationUsingKeyFrames::SetKeyFrames (PointKeyFrameCollection *value)
{
	SetValue (PointAnimationUsingKeyFrames::KeyFramesProperty, Value (value));
}

KeyTime *
PointKeyFrame::GetKeyTime ()
{
	Value *value = DependencyObject::GetValue (PointKeyFrame::KeyTimeProperty);
	return value ? value->AsKeyTime () : NULL;
}

void
PointKeyFrame::SetKeyTime (KeyTime value)
{
	DependencyObject::SetValue (PointKeyFrame::KeyTimeProperty, Value (value));
}

void
PointKeyFrame::SetKeyTime (KeyTime *value)
{
	if (!value)
		DependencyObject::SetValue (PointKeyFrame::KeyTimeProperty, NULL);
	else
		DependencyObject::SetValue (PointKeyFrame::KeyTimeProperty, Value (*value));
}

Point *
PointKeyFrame::GetValue ()
{
	Value *value = DependencyObject::GetValue (PointKeyFrame::ValueProperty);
	return value ? value->AsPoint () : NULL;
}

void
PointKeyFrame::SetValue (Point value)
{
	DependencyObject::SetValue (PointKeyFrame::ValueProperty, Value (value));
}

void
PointKeyFrame::SetValue (Point *value)
{
	if (!value)
		DependencyObject::SetValue (PointKeyFrame::ValueProperty, NULL);
	else
		DependencyObject::SetValue (PointKeyFrame::ValueProperty, Value (*value));
}

PointCollection *
PolyBezierSegment::GetPoints ()
{
	Value *value = GetValue (PolyBezierSegment::PointsProperty);
	return value ? value->AsPointCollection () : NULL;
}

void
PolyBezierSegment::SetPoints (PointCollection *value)
{
	SetValue (PolyBezierSegment::PointsProperty, Value (value));
}

FillRule
Polygon::GetFillRule ()
{
	Value *value = GetValue (Polygon::FillRuleProperty);
	return (FillRule) value->AsInt32 ();
}

void
Polygon::SetFillRule (FillRule value)
{
	SetValue (Polygon::FillRuleProperty, Value (value));
}

PointCollection *
Polygon::GetPoints ()
{
	Value *value = GetValue (Polygon::PointsProperty);
	return value ? value->AsPointCollection () : NULL;
}

void
Polygon::SetPoints (PointCollection *value)
{
	SetValue (Polygon::PointsProperty, Value (value));
}

FillRule
Polyline::GetFillRule ()
{
	Value *value = GetValue (Polyline::FillRuleProperty);
	return (FillRule) value->AsInt32 ();
}

void
Polyline::SetFillRule (FillRule value)
{
	SetValue (Polyline::FillRuleProperty, Value (value));
}

PointCollection *
Polyline::GetPoints ()
{
	Value *value = GetValue (Polyline::PointsProperty);
	return value ? value->AsPointCollection () : NULL;
}

void
Polyline::SetPoints (PointCollection *value)
{
	SetValue (Polyline::PointsProperty, Value (value));
}

PointCollection *
PolyLineSegment::GetPoints ()
{
	Value *value = GetValue (PolyLineSegment::PointsProperty);
	return value ? value->AsPointCollection () : NULL;
}

void
PolyLineSegment::SetPoints (PointCollection *value)
{
	SetValue (PolyLineSegment::PointsProperty, Value (value));
}

PointCollection *
PolyQuadraticBezierSegment::GetPoints ()
{
	Value *value = GetValue (PolyQuadraticBezierSegment::PointsProperty);
	return value ? value->AsPointCollection () : NULL;
}

void
PolyQuadraticBezierSegment::SetPoints (PointCollection *value)
{
	SetValue (PolyQuadraticBezierSegment::PointsProperty, Value (value));
}

UIElement *
Popup::GetChild ()
{
	Value *value = GetValue (Popup::ChildProperty);
	return value ? value->AsUIElement () : NULL;
}

void
Popup::SetChild (UIElement *value)
{
	SetValue (Popup::ChildProperty, Value (value));
}

double
Popup::GetHorizontalOffset ()
{
	Value *value = GetValue (Popup::HorizontalOffsetProperty);
	return value->AsDouble ();
}

void
Popup::SetHorizontalOffset (double value)
{
	SetValue (Popup::HorizontalOffsetProperty, Value (value));
}

bool
Popup::GetIsOpen ()
{
	Value *value = GetValue (Popup::IsOpenProperty);
	return value->AsBool ();
}

void
Popup::SetIsOpen (bool value)
{
	SetValue (Popup::IsOpenProperty, Value (value));
}

double
Popup::GetVerticalOffset ()
{
	Value *value = GetValue (Popup::VerticalOffsetProperty);
	return value->AsDouble ();
}

void
Popup::SetVerticalOffset (double value)
{
	SetValue (Popup::VerticalOffsetProperty, Value (value));
}

Point *
QuadraticBezierSegment::GetPoint1 ()
{
	Value *value = GetValue (QuadraticBezierSegment::Point1Property);
	return value ? value->AsPoint () : NULL;
}

void
QuadraticBezierSegment::SetPoint1 (Point *value)
{
	if (!value) return;
	SetValue (QuadraticBezierSegment::Point1Property, Value (*value));
}

Point *
QuadraticBezierSegment::GetPoint2 ()
{
	Value *value = GetValue (QuadraticBezierSegment::Point2Property);
	return value ? value->AsPoint () : NULL;
}

void
QuadraticBezierSegment::SetPoint2 (Point *value)
{
	if (!value) return;
	SetValue (QuadraticBezierSegment::Point2Property, Value (*value));
}

Point *
RadialGradientBrush::GetCenter ()
{
	Value *value = GetValue (RadialGradientBrush::CenterProperty);
	return value ? value->AsPoint () : NULL;
}

void
RadialGradientBrush::SetCenter (Point *value)
{
	if (!value) return;
	SetValue (RadialGradientBrush::CenterProperty, Value (*value));
}

Point *
RadialGradientBrush::GetGradientOrigin ()
{
	Value *value = GetValue (RadialGradientBrush::GradientOriginProperty);
	return value ? value->AsPoint () : NULL;
}

void
RadialGradientBrush::SetGradientOrigin (Point *value)
{
	if (!value) return;
	SetValue (RadialGradientBrush::GradientOriginProperty, Value (*value));
}

double
RadialGradientBrush::GetRadiusX ()
{
	Value *value = GetValue (RadialGradientBrush::RadiusXProperty);
	return value->AsDouble ();
}

void
RadialGradientBrush::SetRadiusX (double value)
{
	SetValue (RadialGradientBrush::RadiusXProperty, Value (value));
}

double
RadialGradientBrush::GetRadiusY ()
{
	Value *value = GetValue (RadialGradientBrush::RadiusYProperty);
	return value->AsDouble ();
}

void
RadialGradientBrush::SetRadiusY (double value)
{
	SetValue (RadialGradientBrush::RadiusYProperty, Value (value));
}

double
Rectangle::GetRadiusX ()
{
	Value *value = GetValue (Rectangle::RadiusXProperty);
	return value->AsDouble ();
}

void
Rectangle::SetRadiusX (double value)
{
	SetValue (Rectangle::RadiusXProperty, Value (value));
}

double
Rectangle::GetRadiusY ()
{
	Value *value = GetValue (Rectangle::RadiusYProperty);
	return value->AsDouble ();
}

void
Rectangle::SetRadiusY (double value)
{
	SetValue (Rectangle::RadiusYProperty, Value (value));
}

double
RectangleGeometry::GetRadiusX ()
{
	Value *value = GetValue (RectangleGeometry::RadiusXProperty);
	return value->AsDouble ();
}

void
RectangleGeometry::SetRadiusX (double value)
{
	SetValue (RectangleGeometry::RadiusXProperty, Value (value));
}

double
RectangleGeometry::GetRadiusY ()
{
	Value *value = GetValue (RectangleGeometry::RadiusYProperty);
	return value->AsDouble ();
}

void
RectangleGeometry::SetRadiusY (double value)
{
	SetValue (RectangleGeometry::RadiusYProperty, Value (value));
}

Rect *
RectangleGeometry::GetRect ()
{
	Value *value = GetValue (RectangleGeometry::RectProperty);
	return value ? value->AsRect () : NULL;
}

void
RectangleGeometry::SetRect (Rect *value)
{
	if (!value) return;
	SetValue (RectangleGeometry::RectProperty, Value (*value));
}

double
RotateTransform::GetAngle ()
{
	Value *value = GetValue (RotateTransform::AngleProperty);
	return value->AsDouble ();
}

void
RotateTransform::SetAngle (double value)
{
	SetValue (RotateTransform::AngleProperty, Value (value));
}

double
RotateTransform::GetCenterX ()
{
	Value *value = GetValue (RotateTransform::CenterXProperty);
	return value->AsDouble ();
}

void
RotateTransform::SetCenterX (double value)
{
	SetValue (RotateTransform::CenterXProperty, Value (value));
}

double
RotateTransform::GetCenterY ()
{
	Value *value = GetValue (RotateTransform::CenterYProperty);
	return value->AsDouble ();
}

void
RotateTransform::SetCenterY (double value)
{
	SetValue (RotateTransform::CenterYProperty, Value (value));
}

GridLength *
RowDefinition::GetHeight ()
{
	Value *value = GetValue (RowDefinition::HeightProperty);
	return value ? value->AsGridLength () : NULL;
}

void
RowDefinition::SetHeight (GridLength *value)
{
	if (!value) return;
	SetValue (RowDefinition::HeightProperty, Value (*value));
}

double
RowDefinition::GetMaxHeight ()
{
	Value *value = GetValue (RowDefinition::MaxHeightProperty);
	return value->AsDouble ();
}

void
RowDefinition::SetMaxHeight (double value)
{
	SetValue (RowDefinition::MaxHeightProperty, Value (value));
}

double
RowDefinition::GetMinHeight ()
{
	Value *value = GetValue (RowDefinition::MinHeightProperty);
	return value->AsDouble ();
}

void
RowDefinition::SetMinHeight (double value)
{
	SetValue (RowDefinition::MinHeightProperty, Value (value));
}

const char *
Run::GetText ()
{
	Value *value = GetValue (Run::TextProperty);
	return value ? value->AsString () : NULL;
}

void
Run::SetText (const char *value)
{
	SetValue (Run::TextProperty, Value (value));
}

double
ScaleTransform::GetCenterX ()
{
	Value *value = GetValue (ScaleTransform::CenterXProperty);
	return value->AsDouble ();
}

void
ScaleTransform::SetCenterX (double value)
{
	SetValue (ScaleTransform::CenterXProperty, Value (value));
}

double
ScaleTransform::GetCenterY ()
{
	Value *value = GetValue (ScaleTransform::CenterYProperty);
	return value->AsDouble ();
}

void
ScaleTransform::SetCenterY (double value)
{
	SetValue (ScaleTransform::CenterYProperty, Value (value));
}

double
ScaleTransform::GetScaleX ()
{
	Value *value = GetValue (ScaleTransform::ScaleXProperty);
	return value->AsDouble ();
}

void
ScaleTransform::SetScaleX (double value)
{
	SetValue (ScaleTransform::ScaleXProperty, Value (value));
}

double
ScaleTransform::GetScaleY ()
{
	Value *value = GetValue (ScaleTransform::ScaleYProperty);
	return value->AsDouble ();
}

void
ScaleTransform::SetScaleY (double value)
{
	SetValue (ScaleTransform::ScaleYProperty, Value (value));
}

bool
SetterBase::GetIsSealed ()
{
	Value *value = GetValue (SetterBase::IsSealedProperty);
	return value->AsBool ();
}

void
SetterBase::SetIsSealed (bool value)
{
	SetValue (SetterBase::IsSealedProperty, Value (value));
}

bool
SetterBaseCollection::GetIsSealed ()
{
	Value *value = GetValue (SetterBaseCollection::IsSealedProperty);
	return value->AsBool ();
}

void
SetterBaseCollection::SetIsSealed (bool value)
{
	SetValue (SetterBaseCollection::IsSealedProperty, Value (value));
}

Brush *
Shape::GetFill ()
{
	Value *value = GetValue (Shape::FillProperty);
	return value ? value->AsBrush () : NULL;
}

void
Shape::SetFill (Brush *value)
{
	SetValue (Shape::FillProperty, Value (value));
}

Stretch
Shape::GetStretch ()
{
	Value *value = GetValue (Shape::StretchProperty);
	return (Stretch) value->AsInt32 ();
}

void
Shape::SetStretch (Stretch value)
{
	SetValue (Shape::StretchProperty, Value (value));
}

DoubleCollection *
Shape::GetStrokeDashArray ()
{
	Value *value = GetValue (Shape::StrokeDashArrayProperty);
	return value ? value->AsDoubleCollection () : NULL;
}

void
Shape::SetStrokeDashArray (DoubleCollection *value)
{
	SetValue (Shape::StrokeDashArrayProperty, Value (value));
}

PenLineCap
Shape::GetStrokeDashCap ()
{
	Value *value = GetValue (Shape::StrokeDashCapProperty);
	return (PenLineCap) value->AsInt32 ();
}

void
Shape::SetStrokeDashCap (PenLineCap value)
{
	SetValue (Shape::StrokeDashCapProperty, Value (value));
}

double
Shape::GetStrokeDashOffset ()
{
	Value *value = GetValue (Shape::StrokeDashOffsetProperty);
	return value->AsDouble ();
}

void
Shape::SetStrokeDashOffset (double value)
{
	SetValue (Shape::StrokeDashOffsetProperty, Value (value));
}

PenLineCap
Shape::GetStrokeEndLineCap ()
{
	Value *value = GetValue (Shape::StrokeEndLineCapProperty);
	return (PenLineCap) value->AsInt32 ();
}

void
Shape::SetStrokeEndLineCap (PenLineCap value)
{
	SetValue (Shape::StrokeEndLineCapProperty, Value (value));
}

PenLineJoin
Shape::GetStrokeLineJoin ()
{
	Value *value = GetValue (Shape::StrokeLineJoinProperty);
	return (PenLineJoin) value->AsInt32 ();
}

void
Shape::SetStrokeLineJoin (PenLineJoin value)
{
	SetValue (Shape::StrokeLineJoinProperty, Value (value));
}

double
Shape::GetStrokeMiterLimit ()
{
	Value *value = GetValue (Shape::StrokeMiterLimitProperty);
	return value->AsDouble ();
}

void
Shape::SetStrokeMiterLimit (double value)
{
	SetValue (Shape::StrokeMiterLimitProperty, Value (value));
}

Brush *
Shape::GetStroke ()
{
	Value *value = GetValue (Shape::StrokeProperty);
	return value ? value->AsBrush () : NULL;
}

void
Shape::SetStroke (Brush *value)
{
	SetValue (Shape::StrokeProperty, Value (value));
}

PenLineCap
Shape::GetStrokeStartLineCap ()
{
	Value *value = GetValue (Shape::StrokeStartLineCapProperty);
	return (PenLineCap) value->AsInt32 ();
}

void
Shape::SetStrokeStartLineCap (PenLineCap value)
{
	SetValue (Shape::StrokeStartLineCapProperty, Value (value));
}

double
Shape::GetStrokeThickness ()
{
	Value *value = GetValue (Shape::StrokeThicknessProperty);
	return value->AsDouble ();
}

void
Shape::SetStrokeThickness (double value)
{
	SetValue (Shape::StrokeThicknessProperty, Value (value));
}

double
SkewTransform::GetAngleX ()
{
	Value *value = GetValue (SkewTransform::AngleXProperty);
	return value->AsDouble ();
}

void
SkewTransform::SetAngleX (double value)
{
	SetValue (SkewTransform::AngleXProperty, Value (value));
}

double
SkewTransform::GetAngleY ()
{
	Value *value = GetValue (SkewTransform::AngleYProperty);
	return value->AsDouble ();
}

void
SkewTransform::SetAngleY (double value)
{
	SetValue (SkewTransform::AngleYProperty, Value (value));
}

double
SkewTransform::GetCenterX ()
{
	Value *value = GetValue (SkewTransform::CenterXProperty);
	return value->AsDouble ();
}

void
SkewTransform::SetCenterX (double value)
{
	SetValue (SkewTransform::CenterXProperty, Value (value));
}

double
SkewTransform::GetCenterY ()
{
	Value *value = GetValue (SkewTransform::CenterYProperty);
	return value->AsDouble ();
}

void
SkewTransform::SetCenterY (double value)
{
	SetValue (SkewTransform::CenterYProperty, Value (value));
}

Color *
SolidColorBrush::GetColor ()
{
	Value *value = GetValue (SolidColorBrush::ColorProperty);
	return value ? value->AsColor () : NULL;
}

void
SolidColorBrush::SetColor (Color *value)
{
	if (!value) return;
	SetValue (SolidColorBrush::ColorProperty, Value (*value));
}

KeySpline *
SplineColorKeyFrame::GetKeySpline ()
{
	Value *value = DependencyObject::GetValue (SplineColorKeyFrame::KeySplineProperty);
	return value ? value->AsKeySpline () : NULL;
}

void
SplineColorKeyFrame::SetKeySpline (KeySpline *value)
{
	DependencyObject::SetValue (SplineColorKeyFrame::KeySplineProperty, Value (value));
}

KeySpline *
SplineDoubleKeyFrame::GetKeySpline ()
{
	Value *value = DependencyObject::GetValue (SplineDoubleKeyFrame::KeySplineProperty);
	return value ? value->AsKeySpline () : NULL;
}

void
SplineDoubleKeyFrame::SetKeySpline (KeySpline *value)
{
	DependencyObject::SetValue (SplineDoubleKeyFrame::KeySplineProperty, Value (value));
}

KeySpline *
SplinePointKeyFrame::GetKeySpline ()
{
	Value *value = DependencyObject::GetValue (SplinePointKeyFrame::KeySplineProperty);
	return value ? value->AsKeySpline () : NULL;
}

void
SplinePointKeyFrame::SetKeySpline (KeySpline *value)
{
	DependencyObject::SetValue (SplinePointKeyFrame::KeySplineProperty, Value (value));
}

const char *
Storyboard::GetTargetName (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Storyboard::TargetNameProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Storyboard::TargetNameProperty)->GetDefaultValue();
	return value ? value->AsString () : NULL;
}

void
Storyboard::SetTargetName (DependencyObject *obj, const char *value)
{
	if (!obj) return;
	obj->SetValue (Storyboard::TargetNameProperty, Value (value));
}

PropertyPath *
Storyboard::GetTargetProperty (DependencyObject *obj)
{
	Value *value = (!obj) ? NULL : obj->GetValue (Storyboard::TargetPropertyProperty);
	if (!value) value = Deployment::GetCurrent ()->GetTypes ()->GetProperty (Storyboard::TargetPropertyProperty)->GetDefaultValue();
	return value ? value->AsPropertyPath () : NULL;
}

void
Storyboard::SetTargetProperty (DependencyObject *obj, PropertyPath *value)
{
	if (!obj) return;
	if (!value) return;
	obj->SetValue (Storyboard::TargetPropertyProperty, Value (*value));
}

DrawingAttributes *
Stroke::GetDrawingAttributes ()
{
	Value *value = GetValue (Stroke::DrawingAttributesProperty);
	return value ? value->AsDrawingAttributes () : NULL;
}

void
Stroke::SetDrawingAttributes (DrawingAttributes *value)
{
	SetValue (Stroke::DrawingAttributesProperty, Value (value));
}

StylusPointCollection *
Stroke::GetStylusPoints ()
{
	Value *value = GetValue (Stroke::StylusPointsProperty);
	return value ? value->AsStylusPointCollection () : NULL;
}

void
Stroke::SetStylusPoints (StylusPointCollection *value)
{
	SetValue (Stroke::StylusPointsProperty, Value (value));
}

bool
Style::GetIsSealed ()
{
	Value *value = GetValue (Style::IsSealedProperty);
	return value->AsBool ();
}

void
Style::SetIsSealed (bool value)
{
	SetValue (Style::IsSealedProperty, Value (value));
}

SetterBaseCollection *
Style::GetSetters ()
{
	Value *value = GetValue (Style::SettersProperty);
	return value ? value->AsSetterBaseCollection () : NULL;
}

void
Style::SetSetters (SetterBaseCollection *value)
{
	SetValue (Style::SettersProperty, Value (value));
}

TabletDeviceType
StylusInfo::GetDeviceType ()
{
	Value *value = GetValue (StylusInfo::DeviceTypeProperty);
	return (TabletDeviceType) value->AsInt32 ();
}

void
StylusInfo::SetDeviceType (TabletDeviceType value)
{
	SetValue (StylusInfo::DeviceTypeProperty, Value (value));
}

bool
StylusInfo::GetIsInverted ()
{
	Value *value = GetValue (StylusInfo::IsInvertedProperty);
	return value->AsBool ();
}

void
StylusInfo::SetIsInverted (bool value)
{
	SetValue (StylusInfo::IsInvertedProperty, Value (value));
}

double
StylusPoint::GetPressureFactor ()
{
	Value *value = GetValue (StylusPoint::PressureFactorProperty);
	return value->AsDouble ();
}

void
StylusPoint::SetPressureFactor (double value)
{
	SetValue (StylusPoint::PressureFactorProperty, Value (value));
}

double
StylusPoint::GetX ()
{
	Value *value = GetValue (StylusPoint::XProperty);
	return value->AsDouble ();
}

void
StylusPoint::SetX (double value)
{
	SetValue (StylusPoint::XProperty, Value (value));
}

double
StylusPoint::GetY ()
{
	Value *value = GetValue (StylusPoint::YProperty);
	return value->AsDouble ();
}

void
StylusPoint::SetY (double value)
{
	SetValue (StylusPoint::YProperty, Value (value));
}

FontFamily *
TextBlock::GetFontFamily ()
{
	Value *value = GetValue (TextBlock::FontFamilyProperty);
	return value ? value->AsFontFamily () : NULL;
}

void
TextBlock::SetFontFamily (FontFamily *value)
{
	if (!value) return;
	SetValue (TextBlock::FontFamilyProperty, Value (*value));
}

const char *
TextBlock::GetFontFilename ()
{
	Value *value = GetValue (TextBlock::FontFilenameProperty);
	return value ? value->AsString () : NULL;
}

void
TextBlock::SetFontFilename (const char *value)
{
	SetValue (TextBlock::FontFilenameProperty, Value (value));
}

double
TextBlock::GetFontSize ()
{
	Value *value = GetValue (TextBlock::FontSizeProperty);
	return value->AsDouble ();
}

void
TextBlock::SetFontSize (double value)
{
	SetValue (TextBlock::FontSizeProperty, Value (value));
}

FontStretches
TextBlock::GetFontStretch ()
{
	Value *value = GetValue (TextBlock::FontStretchProperty);
	return (FontStretches) value->AsInt32 ();
}

void
TextBlock::SetFontStretch (FontStretches value)
{
	SetValue (TextBlock::FontStretchProperty, Value (value));
}

FontStyles
TextBlock::GetFontStyle ()
{
	Value *value = GetValue (TextBlock::FontStyleProperty);
	return (FontStyles) value->AsInt32 ();
}

void
TextBlock::SetFontStyle (FontStyles value)
{
	SetValue (TextBlock::FontStyleProperty, Value (value));
}

FontWeights
TextBlock::GetFontWeight ()
{
	Value *value = GetValue (TextBlock::FontWeightProperty);
	return (FontWeights) value->AsInt32 ();
}

void
TextBlock::SetFontWeight (FontWeights value)
{
	SetValue (TextBlock::FontWeightProperty, Value (value));
}

Brush *
TextBlock::GetForeground ()
{
	Value *value = GetValue (TextBlock::ForegroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
TextBlock::SetForeground (Brush *value)
{
	SetValue (TextBlock::ForegroundProperty, Value (value));
}

InlineCollection *
TextBlock::GetInlines ()
{
	Value *value = GetValue (TextBlock::InlinesProperty);
	return value ? value->AsInlineCollection () : NULL;
}

void
TextBlock::SetInlines (InlineCollection *value)
{
	SetValue (TextBlock::InlinesProperty, Value (value));
}

double
TextBlock::GetLineHeight ()
{
	Value *value = GetValue (TextBlock::LineHeightProperty);
	return value->AsDouble ();
}

void
TextBlock::SetLineHeight (double value)
{
	SetValue (TextBlock::LineHeightProperty, Value (value));
}

LineStackingStrategy
TextBlock::GetLineStackingStrategy ()
{
	Value *value = GetValue (TextBlock::LineStackingStrategyProperty);
	return (LineStackingStrategy) value->AsInt32 ();
}

void
TextBlock::SetLineStackingStrategy (LineStackingStrategy value)
{
	SetValue (TextBlock::LineStackingStrategyProperty, Value (value));
}

Thickness *
TextBlock::GetPadding ()
{
	Value *value = GetValue (TextBlock::PaddingProperty);
	return value ? value->AsThickness () : NULL;
}

void
TextBlock::SetPadding (Thickness *value)
{
	if (!value) return;
	SetValue (TextBlock::PaddingProperty, Value (*value));
}

TextAlignment
TextBlock::GetTextAlignment ()
{
	Value *value = GetValue (TextBlock::TextAlignmentProperty);
	return (TextAlignment) value->AsInt32 ();
}

void
TextBlock::SetTextAlignment (TextAlignment value)
{
	SetValue (TextBlock::TextAlignmentProperty, Value (value));
}

TextDecorations
TextBlock::GetTextDecorations ()
{
	Value *value = GetValue (TextBlock::TextDecorationsProperty);
	return (TextDecorations) value->AsInt32 ();
}

void
TextBlock::SetTextDecorations (TextDecorations value)
{
	SetValue (TextBlock::TextDecorationsProperty, Value (value));
}

const char *
TextBlock::GetText ()
{
	Value *value = GetValue (TextBlock::TextProperty);
	return value ? value->AsString () : NULL;
}

void
TextBlock::SetText (const char *value)
{
	SetValue (TextBlock::TextProperty, Value (value));
}

TextWrapping
TextBlock::GetTextWrapping ()
{
	Value *value = GetValue (TextBlock::TextWrappingProperty);
	return (TextWrapping) value->AsInt32 ();
}

void
TextBlock::SetTextWrapping (TextWrapping value)
{
	SetValue (TextBlock::TextWrappingProperty, Value (value));
}

bool
TextBox::GetAcceptsReturn ()
{
	Value *value = GetValue (TextBox::AcceptsReturnProperty);
	return value->AsBool ();
}

void
TextBox::SetAcceptsReturn (bool value)
{
	SetValue (TextBox::AcceptsReturnProperty, Value (value));
}

ScrollBarVisibility
TextBox::GetHorizontalScrollBarVisibility ()
{
	Value *value = GetValue (TextBox::HorizontalScrollBarVisibilityProperty);
	return (ScrollBarVisibility) value->AsInt32 ();
}

void
TextBox::SetHorizontalScrollBarVisibility (ScrollBarVisibility value)
{
	SetValue (TextBox::HorizontalScrollBarVisibilityProperty, Value (value));
}

bool
TextBox::GetIsReadOnly ()
{
	Value *value = GetValue (TextBox::IsReadOnlyProperty);
	return value->AsBool ();
}

void
TextBox::SetIsReadOnly (bool value)
{
	SetValue (TextBox::IsReadOnlyProperty, Value (value));
}

gint32
TextBox::GetMaxLength ()
{
	Value *value = GetValue (TextBox::MaxLengthProperty);
	return value->AsInt32 ();
}

void
TextBox::SetMaxLength (gint32 value)
{
	SetValue (TextBox::MaxLengthProperty, Value (value));
}

const char *
TextBox::GetSelectedText ()
{
	Value *value = GetValue (TextBox::SelectedTextProperty);
	return value ? value->AsString () : NULL;
}

void
TextBox::SetSelectedText (const char *value)
{
	SetValue (TextBox::SelectedTextProperty, Value (value));
}

Brush *
TextBox::GetSelectionBackground ()
{
	Value *value = GetValue (TextBox::SelectionBackgroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
TextBox::SetSelectionBackground (Brush *value)
{
	SetValue (TextBox::SelectionBackgroundProperty, Value (value));
}

Brush *
TextBox::GetSelectionForeground ()
{
	Value *value = GetValue (TextBox::SelectionForegroundProperty);
	return value ? value->AsBrush () : NULL;
}

void
TextBox::SetSelectionForeground (Brush *value)
{
	SetValue (TextBox::SelectionForegroundProperty, Value (value));
}

gint32
TextBox::GetSelectionLength ()
{
	Value *value = GetValue (TextBox::SelectionLengthProperty);
	return value->AsInt32 ();
}

void
TextBox::SetSelectionLength (gint32 value)
{
	SetValue (TextBox::SelectionLengthProperty, Value (value));
}

gint32
TextBox::GetSelectionStart ()
{
	Value *value = GetValue (TextBox::SelectionStartProperty);
	return value->AsInt32 ();
}

void
TextBox::SetSelectionStart (gint32 value)
{
	SetValue (TextBox::SelectionStartProperty, Value (value));
}

TextAlignment
TextBox::GetTextAlignment ()
{
	Value *value = GetValue (TextBox::TextAlignmentProperty);
	return (TextAlignment) value->AsInt32 ();
}

void
TextBox::SetTextAlignment (TextAlignment value)
{
	SetValue (TextBox::TextAlignmentProperty, Value (value));
}

const char *
TextBox::GetText ()
{
	Value *value = GetValue (TextBox::TextProperty);
	return value ? value->AsString () : NULL;
}

void
TextBox::SetText (const char *value)
{
	SetValue (TextBox::TextProperty, Value (value));
}

TextWrapping
TextBox::GetTextWrapping ()
{
	Value *value = GetValue (TextBox::TextWrappingProperty);
	return (TextWrapping) value->AsInt32 ();
}

void
TextBox::SetTextWrapping (TextWrapping value)
{
	SetValue (TextBox::TextWrappingProperty, Value (value));
}

ScrollBarVisibility
TextBox::GetVerticalScrollBarVisibility ()
{
	Value *value = GetValue (TextBox::VerticalScrollBarVisibilityProperty);
	return (ScrollBarVisibility) value->AsInt32 ();
}

void
TextBox::SetVerticalScrollBarVisibility (ScrollBarVisibility value)
{
	SetValue (TextBox::VerticalScrollBarVisibilityProperty, Value (value));
}

AlignmentX
TileBrush::GetAlignmentX ()
{
	Value *value = GetValue (TileBrush::AlignmentXProperty);
	return (AlignmentX) value->AsInt32 ();
}

void
TileBrush::SetAlignmentX (AlignmentX value)
{
	SetValue (TileBrush::AlignmentXProperty, Value (value));
}

AlignmentY
TileBrush::GetAlignmentY ()
{
	Value *value = GetValue (TileBrush::AlignmentYProperty);
	return (AlignmentY) value->AsInt32 ();
}

void
TileBrush::SetAlignmentY (AlignmentY value)
{
	SetValue (TileBrush::AlignmentYProperty, Value (value));
}

Stretch
TileBrush::GetStretch ()
{
	Value *value = GetValue (TileBrush::StretchProperty);
	return (Stretch) value->AsInt32 ();
}

void
TileBrush::SetStretch (Stretch value)
{
	SetValue (TileBrush::StretchProperty, Value (value));
}

bool
Timeline::GetAutoReverse ()
{
	Value *value = GetValue (Timeline::AutoReverseProperty);
	return value->AsBool ();
}

void
Timeline::SetAutoReverse (bool value)
{
	SetValue (Timeline::AutoReverseProperty, Value (value));
}

FillBehavior
Timeline::GetFillBehavior ()
{
	Value *value = GetValue (Timeline::FillBehaviorProperty);
	return (FillBehavior) value->AsInt32 ();
}

void
Timeline::SetFillBehavior (FillBehavior value)
{
	SetValue (Timeline::FillBehaviorProperty, Value (value));
}

double
Timeline::GetSpeedRatio ()
{
	Value *value = GetValue (Timeline::SpeedRatioProperty);
	return value->AsDouble ();
}

void
Timeline::SetSpeedRatio (double value)
{
	SetValue (Timeline::SpeedRatioProperty, Value (value));
}

TimelineCollection *
TimelineGroup::GetChildren ()
{
	Value *value = GetValue (TimelineGroup::ChildrenProperty);
	return value ? value->AsTimelineCollection () : NULL;
}

void
TimelineGroup::SetChildren (TimelineCollection *value)
{
	SetValue (TimelineGroup::ChildrenProperty, Value (value));
}

const char *
TimelineMarker::GetText ()
{
	Value *value = GetValue (TimelineMarker::TextProperty);
	return value ? value->AsString () : NULL;
}

void
TimelineMarker::SetText (const char *value)
{
	SetValue (TimelineMarker::TextProperty, Value (value));
}

TimeSpan
TimelineMarker::GetTime ()
{
	Value *value = GetValue (TimelineMarker::TimeProperty);
	return value->AsTimeSpan ();
}

void
TimelineMarker::SetTime (TimeSpan value)
{
	SetValue (TimelineMarker::TimeProperty, Value (value, Type::TIMESPAN));
}

const char *
TimelineMarker::GetType ()
{
	Value *value = GetValue (TimelineMarker::TypeProperty);
	return value ? value->AsString () : NULL;
}

void
TimelineMarker::SetType (const char *value)
{
	SetValue (TimelineMarker::TypeProperty, Value (value));
}

TransformCollection *
TransformGroup::GetChildren ()
{
	Value *value = GetValue (TransformGroup::ChildrenProperty);
	return value ? value->AsTransformCollection () : NULL;
}

void
TransformGroup::SetChildren (TransformCollection *value)
{
	SetValue (TransformGroup::ChildrenProperty, Value (value));
}

double
TranslateTransform::GetX ()
{
	Value *value = GetValue (TranslateTransform::XProperty);
	return value->AsDouble ();
}

void
TranslateTransform::SetX (double value)
{
	SetValue (TranslateTransform::XProperty, Value (value));
}

double
TranslateTransform::GetY ()
{
	Value *value = GetValue (TranslateTransform::YProperty);
	return value->AsDouble ();
}

void
TranslateTransform::SetY (double value)
{
	SetValue (TranslateTransform::YProperty, Value (value));
}

Geometry *
UIElement::GetClip ()
{
	Value *value = GetValue (UIElement::ClipProperty);
	return value ? value->AsGeometry () : NULL;
}

void
UIElement::SetClip (Geometry *value)
{
	SetValue (UIElement::ClipProperty, Value (value));
}

MouseCursor
UIElement::GetCursor ()
{
	Value *value = GetValue (UIElement::CursorProperty);
	return (MouseCursor) value->AsInt32 ();
}

void
UIElement::SetCursor (MouseCursor value)
{
	SetValue (UIElement::CursorProperty, Value (value));
}

bool
UIElement::GetIsHitTestVisible ()
{
	Value *value = GetValue (UIElement::IsHitTestVisibleProperty);
	return value->AsBool ();
}

void
UIElement::SetIsHitTestVisible (bool value)
{
	SetValue (UIElement::IsHitTestVisibleProperty, Value (value));
}

Brush *
UIElement::GetOpacityMask ()
{
	Value *value = GetValue (UIElement::OpacityMaskProperty);
	return value ? value->AsBrush () : NULL;
}

void
UIElement::SetOpacityMask (Brush *value)
{
	SetValue (UIElement::OpacityMaskProperty, Value (value));
}

double
UIElement::GetOpacity ()
{
	Value *value = GetValue (UIElement::OpacityProperty);
	return value->AsDouble ();
}

void
UIElement::SetOpacity (double value)
{
	SetValue (UIElement::OpacityProperty, Value (value));
}

Point *
UIElement::GetRenderTransformOrigin ()
{
	Value *value = GetValue (UIElement::RenderTransformOriginProperty);
	return value ? value->AsPoint () : NULL;
}

void
UIElement::SetRenderTransformOrigin (Point *value)
{
	if (!value) return;
	SetValue (UIElement::RenderTransformOriginProperty, Value (*value));
}

Transform *
UIElement::GetRenderTransform ()
{
	Value *value = GetValue (UIElement::RenderTransformProperty);
	return value ? value->AsTransform () : NULL;
}

void
UIElement::SetRenderTransform (Transform *value)
{
	SetValue (UIElement::RenderTransformProperty, Value (value));
}

ResourceDictionary *
UIElement::GetResources ()
{
	Value *value = GetValue (UIElement::ResourcesProperty);
	return value ? value->AsResourceDictionary () : NULL;
}

void
UIElement::SetResources (ResourceDictionary *value)
{
	SetValue (UIElement::ResourcesProperty, Value (value));
}

const char *
UIElement::GetTag ()
{
	Value *value = GetValue (UIElement::TagProperty);
	return value ? value->AsString () : NULL;
}

void
UIElement::SetTag (const char *value)
{
	SetValue (UIElement::TagProperty, Value (value));
}

TriggerCollection *
UIElement::GetTriggers ()
{
	Value *value = GetValue (UIElement::TriggersProperty);
	return value ? value->AsTriggerCollection () : NULL;
}

void
UIElement::SetTriggers (TriggerCollection *value)
{
	SetValue (UIElement::TriggersProperty, Value (value));
}

bool
UIElement::GetUseLayoutRounding ()
{
	Value *value = GetValue (UIElement::UseLayoutRoundingProperty);
	return value->AsBool ();
}

void
UIElement::SetUseLayoutRounding (bool value)
{
	SetValue (UIElement::UseLayoutRoundingProperty, Value (value));
}

Visibility
UIElement::GetVisibility ()
{
	Value *value = GetValue (UIElement::VisibilityProperty);
	return (Visibility) value->AsInt32 ();
}

void
UIElement::SetVisibility (Visibility value)
{
	SetValue (UIElement::VisibilityProperty, Value (value));
}

const char *
VideoBrush::GetSourceName ()
{
	Value *value = GetValue (VideoBrush::SourceNameProperty);
	return value ? value->AsString () : NULL;
}

void
VideoBrush::SetSourceName (const char *value)
{
	SetValue (VideoBrush::SourceNameProperty, Value (value));
}

UIElement *
VisualBrush::GetVisual ()
{
	Value *value = GetValue (VisualBrush::VisualProperty);
	return value ? value->AsUIElement () : NULL;
}

void
VisualBrush::SetVisual (UIElement *value)
{
	SetValue (VisualBrush::VisualProperty, Value (value));
}

