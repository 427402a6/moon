using System;
using System.Windows;
using System.Windows.Automation.Peers;
using System.Windows.Browser;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Resources;
using System.Windows.Shapes;
using System.Windows.Threading;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mono.Moonlight.UnitTesting;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace MoonTest.System.Windows.Controls
{
	[TestClass]
	public class DefaultValueTests
	{
		[TestMethod]
		public void EventTrigger_PropertyGetter ()
		{
			EventTrigger widget = new EventTrigger ();

			Assert.IsNotNull(widget.Actions, "Actions should not have returned null");
			Assert.IsTrue(widget.Actions is TriggerActionCollection, "Actions is not of the correct type");

			Assert.IsNull(widget.RoutedEvent, "RoutedEvent should have returned null");
		}

		[TestMethod]
		public void TriggerActionCollection_PropertyGetter ()
		{
			TriggerActionCollection widget = new TriggerActionCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is TriggerActionCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void AssemblyPart_ReadLocalValue ()
		{
			AssemblyPart widget = new AssemblyPart ();
			object retval;

			retval = widget.ReadLocalValue(AssemblyPart.SourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(AssemblyPart.SourceProperty) should not have a value by default");
		}

		[TestMethod]
		public void AssemblyPart_GetValue ()
		{
			AssemblyPart widget = new AssemblyPart ();
			object retval;

			retval = widget.GetValue(AssemblyPart.SourceProperty);
			Assert.IsNotNull(retval, "GetValue(AssemblyPart.SourceProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(AssemblyPart.SourceProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(AssemblyPart.SourceProperty) does not match the default value");
		}

		[TestMethod]
		public void AssemblyPart_PropertyGetter ()
		{
			AssemblyPart widget = new AssemblyPart ();

			Assert.IsNotNull(widget.Source, "Source should not have returned null");
			Assert.AreEqual("", widget.Source, "Source does not match the default value");
		}

		[TestMethod]
		public void AssemblyPartCollection_PropertyGetter ()
		{
			AssemblyPartCollection widget = new AssemblyPartCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is AssemblyPartCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void Style_PropertyGetter ()
		{
			Style widget = new Style ();

			Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");

			Assert.IsNotNull(widget.Setters, "Setters should not have returned null");
			Assert.IsTrue(widget.Setters is SetterBaseCollection, "Setters is not of the correct type");

			Assert.IsNull(widget.TargetType, "TargetType should have returned null");
		}

		[TestMethod]
		public void Setter_PropertyGetter ()
		{
			Setter widget = new Setter ();

			Assert.IsNull(widget.Value, "Value should have returned null");

			Assert.IsNull(widget.Property, "Property should have returned null");

			Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");
		}

		[TestMethod]
		public void SetterBaseCollection_PropertyGetter ()
		{
			SetterBaseCollection widget = new SetterBaseCollection ();

			Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is SetterBaseCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void VisualState_PropertyGetter ()
		{
			VisualState widget = new VisualState ();

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Storyboard, "Storyboard should have returned null");
		}

		[TestMethod]
		public void StrokeCollection_PropertyGetter ()
		{
			StrokeCollection widget = new StrokeCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is StrokeCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void DrawingAttributes_PropertyGetter ()
		{
			DrawingAttributes widget = new DrawingAttributes ();

			Assert.AreEqual("#FF000000", widget.Color.ToString (), "Color does not match the default value");

			Assert.AreEqual("#00000000", widget.OutlineColor.ToString (), "OutlineColor does not match the default value");

			Assert.AreEqual((double) 3, widget.Width, "Width does not match the default value");

			Assert.AreEqual((double) 3, widget.Height, "Height does not match the default value");
		}

		[TestMethod]
		public void DoubleCollection_PropertyGetter ()
		{
			DoubleCollection widget = new DoubleCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is DoubleCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void PointCollection_PropertyGetter ()
		{
			PointCollection widget = new PointCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is PointCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void RotateTransform_ReadLocalValue ()
		{
			RotateTransform widget = new RotateTransform ();
			object retval;

			retval = widget.ReadLocalValue(RotateTransform.CenterXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.CenterXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RotateTransform.CenterYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.CenterYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RotateTransform.AngleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.AngleProperty) should not have a value by default");
		}

		[TestMethod]
		public void RotateTransform_GetValue ()
		{
			RotateTransform widget = new RotateTransform ();
			object retval;

			retval = widget.GetValue(RotateTransform.CenterXProperty);
			Assert.IsNotNull(retval, "GetValue(RotateTransform.CenterXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RotateTransform.CenterXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.CenterXProperty) does not match the default value");

			retval = widget.GetValue(RotateTransform.CenterYProperty);
			Assert.IsNotNull(retval, "GetValue(RotateTransform.CenterYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RotateTransform.CenterYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.CenterYProperty) does not match the default value");

			retval = widget.GetValue(RotateTransform.AngleProperty);
			Assert.IsNotNull(retval, "GetValue(RotateTransform.AngleProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RotateTransform.AngleProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.AngleProperty) does not match the default value");
		}

		[TestMethod]
		public void RotateTransform_PropertyGetter ()
		{
			RotateTransform widget = new RotateTransform ();

			Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");

			Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");

			Assert.AreEqual((double) 0, widget.Angle, "Angle does not match the default value");
		}

		[TestMethod]
		public void ScaleTransform_ReadLocalValue ()
		{
			ScaleTransform widget = new ScaleTransform ();
			object retval;

			retval = widget.ReadLocalValue(ScaleTransform.CenterXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.CenterXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScaleTransform.CenterYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.CenterYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScaleTransform.ScaleXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.ScaleXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScaleTransform.ScaleYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.ScaleYProperty) should not have a value by default");
		}

		[TestMethod]
		public void ScaleTransform_GetValue ()
		{
			ScaleTransform widget = new ScaleTransform ();
			object retval;

			retval = widget.GetValue(ScaleTransform.CenterXProperty);
			Assert.IsNotNull(retval, "GetValue(ScaleTransform.CenterXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScaleTransform.CenterXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScaleTransform.CenterXProperty) does not match the default value");

			retval = widget.GetValue(ScaleTransform.CenterYProperty);
			Assert.IsNotNull(retval, "GetValue(ScaleTransform.CenterYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScaleTransform.CenterYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScaleTransform.CenterYProperty) does not match the default value");

			retval = widget.GetValue(ScaleTransform.ScaleXProperty);
			Assert.IsNotNull(retval, "GetValue(ScaleTransform.ScaleXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScaleTransform.ScaleXProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(ScaleTransform.ScaleXProperty) does not match the default value");

			retval = widget.GetValue(ScaleTransform.ScaleYProperty);
			Assert.IsNotNull(retval, "GetValue(ScaleTransform.ScaleYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScaleTransform.ScaleYProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(ScaleTransform.ScaleYProperty) does not match the default value");
		}

		[TestMethod]
		public void ScaleTransform_PropertyGetter ()
		{
			ScaleTransform widget = new ScaleTransform ();

			Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");

			Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");

			Assert.AreEqual((double) 1, widget.ScaleX, "ScaleX does not match the default value");

			Assert.AreEqual((double) 1, widget.ScaleY, "ScaleY does not match the default value");
		}

		[TestMethod]
		public void SkewTransform_ReadLocalValue ()
		{
			SkewTransform widget = new SkewTransform ();
			object retval;

			retval = widget.ReadLocalValue(SkewTransform.CenterXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.CenterXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(SkewTransform.CenterYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.CenterYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(SkewTransform.AngleXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.AngleXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(SkewTransform.AngleYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.AngleYProperty) should not have a value by default");
		}

		[TestMethod]
		public void SkewTransform_GetValue ()
		{
			SkewTransform widget = new SkewTransform ();
			object retval;

			retval = widget.GetValue(SkewTransform.CenterXProperty);
			Assert.IsNotNull(retval, "GetValue(SkewTransform.CenterXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(SkewTransform.CenterXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.CenterXProperty) does not match the default value");

			retval = widget.GetValue(SkewTransform.CenterYProperty);
			Assert.IsNotNull(retval, "GetValue(SkewTransform.CenterYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(SkewTransform.CenterYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.CenterYProperty) does not match the default value");

			retval = widget.GetValue(SkewTransform.AngleXProperty);
			Assert.IsNotNull(retval, "GetValue(SkewTransform.AngleXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(SkewTransform.AngleXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.AngleXProperty) does not match the default value");

			retval = widget.GetValue(SkewTransform.AngleYProperty);
			Assert.IsNotNull(retval, "GetValue(SkewTransform.AngleYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(SkewTransform.AngleYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.AngleYProperty) does not match the default value");
		}

		[TestMethod]
		public void SkewTransform_PropertyGetter ()
		{
			SkewTransform widget = new SkewTransform ();

			Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");

			Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");

			Assert.AreEqual((double) 0, widget.AngleX, "AngleX does not match the default value");

			Assert.AreEqual((double) 0, widget.AngleY, "AngleY does not match the default value");
		}

		[TestMethod]
		public void TranslateTransform_ReadLocalValue ()
		{
			TranslateTransform widget = new TranslateTransform ();
			object retval;

			retval = widget.ReadLocalValue(TranslateTransform.XProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TranslateTransform.XProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TranslateTransform.YProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TranslateTransform.YProperty) should not have a value by default");
		}

		[TestMethod]
		public void TranslateTransform_GetValue ()
		{
			TranslateTransform widget = new TranslateTransform ();
			object retval;

			retval = widget.GetValue(TranslateTransform.XProperty);
			Assert.IsNotNull(retval, "GetValue(TranslateTransform.XProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(TranslateTransform.XProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(TranslateTransform.XProperty) does not match the default value");

			retval = widget.GetValue(TranslateTransform.YProperty);
			Assert.IsNotNull(retval, "GetValue(TranslateTransform.YProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(TranslateTransform.YProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(TranslateTransform.YProperty) does not match the default value");
		}

		[TestMethod]
		public void TranslateTransform_PropertyGetter ()
		{
			TranslateTransform widget = new TranslateTransform ();

			Assert.AreEqual((double) 0, widget.X, "X does not match the default value");

			Assert.AreEqual((double) 0, widget.Y, "Y does not match the default value");
		}

		[TestMethod]
		public void TransformCollection_PropertyGetter ()
		{
			TransformCollection widget = new TransformCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is TransformCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void TransformGroup_ReadLocalValue ()
		{
			TransformGroup widget = new TransformGroup ();
			object retval;

			retval = widget.ReadLocalValue(TransformGroup.ChildrenProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TransformGroup.ChildrenProperty) should not have a value by default");
		}

		[TestMethod]
		public void TransformGroup_GetValue ()
		{
			TransformGroup widget = new TransformGroup ();
			object retval;

			retval = widget.GetValue(TransformGroup.ChildrenProperty);
			Assert.IsNotNull(retval, "GetValue(TransformGroup.ChildrenProperty) should not have returned null");
			Assert.IsTrue(retval is TransformCollection, "GetValue(TransformGroup.ChildrenProperty) is not of the correct type");
		}

		[TestMethod]
		public void TransformGroup_PropertyGetter ()
		{
			TransformGroup widget = new TransformGroup ();

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is TransformCollection, "Children is not of the correct type");

			Assert.AreEqual("Identity", widget.Value.ToString (), "Value does not match the default value");
		}

		[TestMethod]
		public void MatrixTransform_ReadLocalValue ()
		{
			MatrixTransform widget = new MatrixTransform ();
			object retval;

			retval = widget.ReadLocalValue(MatrixTransform.MatrixProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MatrixTransform.MatrixProperty) should not have a value by default");
		}

		[TestMethod]
		public void MatrixTransform_GetValue ()
		{
			MatrixTransform widget = new MatrixTransform ();
			object retval;

			retval = widget.GetValue(MatrixTransform.MatrixProperty);
			Assert.IsNotNull(retval, "GetValue(MatrixTransform.MatrixProperty) should not have returned null");
			Assert.IsTrue(retval is Matrix, "GetValue(MatrixTransform.MatrixProperty) is not of the correct type");
			Assert.AreEqual("Identity", retval.ToString (), "GetValue(MatrixTransform.MatrixProperty) does not match the default value");
		}

		[TestMethod]
		public void MatrixTransform_PropertyGetter ()
		{
			MatrixTransform widget = new MatrixTransform ();

			Assert.AreEqual("Identity", widget.Matrix.ToString (), "Matrix does not match the default value");
		}

		[TestMethod]
		public void LineSegment_ReadLocalValue ()
		{
			LineSegment widget = new LineSegment ();
			object retval;

			retval = widget.ReadLocalValue(LineSegment.PointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineSegment.PointProperty) should not have a value by default");
		}

		[TestMethod]
		public void LineSegment_GetValue ()
		{
			LineSegment widget = new LineSegment ();
			object retval;

			retval = widget.GetValue(LineSegment.PointProperty);
			Assert.IsNotNull(retval, "GetValue(LineSegment.PointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(LineSegment.PointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineSegment.PointProperty) does not match the default value");
		}

		[TestMethod]
		public void LineSegment_PropertyGetter ()
		{
			LineSegment widget = new LineSegment ();

			Assert.AreEqual("0,0", widget.Point.ToString (), "Point does not match the default value");
		}

		[TestMethod]
		public void BezierSegment_ReadLocalValue ()
		{
			BezierSegment widget = new BezierSegment ();
			object retval;

			retval = widget.ReadLocalValue(BezierSegment.Point1Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point1Property) should not have a value by default");

			retval = widget.ReadLocalValue(BezierSegment.Point2Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point2Property) should not have a value by default");

			retval = widget.ReadLocalValue(BezierSegment.Point3Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point3Property) should not have a value by default");
		}

		[TestMethod]
		public void BezierSegment_GetValue ()
		{
			BezierSegment widget = new BezierSegment ();
			object retval;

			retval = widget.GetValue(BezierSegment.Point1Property);
			Assert.IsNotNull(retval, "GetValue(BezierSegment.Point1Property) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(BezierSegment.Point1Property) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point1Property) does not match the default value");

			retval = widget.GetValue(BezierSegment.Point2Property);
			Assert.IsNotNull(retval, "GetValue(BezierSegment.Point2Property) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(BezierSegment.Point2Property) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point2Property) does not match the default value");

			retval = widget.GetValue(BezierSegment.Point3Property);
			Assert.IsNotNull(retval, "GetValue(BezierSegment.Point3Property) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(BezierSegment.Point3Property) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point3Property) does not match the default value");
		}

		[TestMethod]
		public void BezierSegment_PropertyGetter ()
		{
			BezierSegment widget = new BezierSegment ();

			Assert.AreEqual("0,0", widget.Point1.ToString (), "Point1 does not match the default value");

			Assert.AreEqual("0,0", widget.Point2.ToString (), "Point2 does not match the default value");

			Assert.AreEqual("0,0", widget.Point3.ToString (), "Point3 does not match the default value");
		}

		[TestMethod]
		public void QuadraticBezierSegment_ReadLocalValue ()
		{
			QuadraticBezierSegment widget = new QuadraticBezierSegment ();
			object retval;

			retval = widget.ReadLocalValue(QuadraticBezierSegment.Point1Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(QuadraticBezierSegment.Point1Property) should not have a value by default");

			retval = widget.ReadLocalValue(QuadraticBezierSegment.Point2Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(QuadraticBezierSegment.Point2Property) should not have a value by default");
		}

		[TestMethod]
		public void QuadraticBezierSegment_GetValue ()
		{
			QuadraticBezierSegment widget = new QuadraticBezierSegment ();
			object retval;

			retval = widget.GetValue(QuadraticBezierSegment.Point1Property);
			Assert.IsNotNull(retval, "GetValue(QuadraticBezierSegment.Point1Property) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(QuadraticBezierSegment.Point1Property) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(QuadraticBezierSegment.Point1Property) does not match the default value");

			retval = widget.GetValue(QuadraticBezierSegment.Point2Property);
			Assert.IsNotNull(retval, "GetValue(QuadraticBezierSegment.Point2Property) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(QuadraticBezierSegment.Point2Property) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(QuadraticBezierSegment.Point2Property) does not match the default value");
		}

		[TestMethod]
		public void QuadraticBezierSegment_PropertyGetter ()
		{
			QuadraticBezierSegment widget = new QuadraticBezierSegment ();

			Assert.AreEqual("0,0", widget.Point1.ToString (), "Point1 does not match the default value");

			Assert.AreEqual("0,0", widget.Point2.ToString (), "Point2 does not match the default value");
		}

		[TestMethod]
		public void ArcSegment_ReadLocalValue ()
		{
			ArcSegment widget = new ArcSegment ();
			object retval;

			retval = widget.ReadLocalValue(ArcSegment.PointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.PointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ArcSegment.SizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.SizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ArcSegment.RotationAngleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.RotationAngleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ArcSegment.IsLargeArcProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.IsLargeArcProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ArcSegment.SweepDirectionProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.SweepDirectionProperty) should not have a value by default");
		}

		[TestMethod]
		public void ArcSegment_GetValue ()
		{
			ArcSegment widget = new ArcSegment ();
			object retval;

			retval = widget.GetValue(ArcSegment.PointProperty);
			Assert.IsNotNull(retval, "GetValue(ArcSegment.PointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(ArcSegment.PointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(ArcSegment.PointProperty) does not match the default value");

			retval = widget.GetValue(ArcSegment.SizeProperty);
			Assert.IsNotNull(retval, "GetValue(ArcSegment.SizeProperty) should not have returned null");
			Assert.IsTrue(retval is Size, "GetValue(ArcSegment.SizeProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(ArcSegment.SizeProperty) does not match the default value");

			retval = widget.GetValue(ArcSegment.RotationAngleProperty);
			Assert.IsNotNull(retval, "GetValue(ArcSegment.RotationAngleProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ArcSegment.RotationAngleProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ArcSegment.RotationAngleProperty) does not match the default value");

			retval = widget.GetValue(ArcSegment.IsLargeArcProperty);
			Assert.IsNotNull(retval, "GetValue(ArcSegment.IsLargeArcProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ArcSegment.IsLargeArcProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ArcSegment.IsLargeArcProperty) does not match the default value");

			retval = widget.GetValue(ArcSegment.SweepDirectionProperty);
			Assert.IsNotNull(retval, "GetValue(ArcSegment.SweepDirectionProperty) should not have returned null");
			Assert.IsTrue(retval is SweepDirection, "GetValue(ArcSegment.SweepDirectionProperty) is not of the correct type");
			Assert.AreEqual(SweepDirection.Counterclockwise, retval, "GetValue(ArcSegment.SweepDirectionProperty) does not match the default value");
		}

		[TestMethod]
		public void ArcSegment_PropertyGetter ()
		{
			ArcSegment widget = new ArcSegment ();

			Assert.AreEqual("0,0", widget.Point.ToString (), "Point does not match the default value");

			Assert.AreEqual((double) 0, widget.RotationAngle, "RotationAngle does not match the default value");

			Assert.AreEqual(false, widget.IsLargeArc, "IsLargeArc does not match the default value");

			Assert.AreEqual(SweepDirection.Counterclockwise, widget.SweepDirection, "SweepDirection does not match the default value");

			Assert.AreEqual("0,0", widget.Size.ToString (), "Size does not match the default value");
		}

		[TestMethod]
		public void PolyLineSegment_ReadLocalValue ()
		{
			PolyLineSegment widget = new PolyLineSegment ();
			object retval;

			retval = widget.ReadLocalValue(PolyLineSegment.PointsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyLineSegment.PointsProperty) should not have a value by default");
		}

		[TestMethod]
		public void PolyLineSegment_GetValue ()
		{
			PolyLineSegment widget = new PolyLineSegment ();
			object retval;

			retval = widget.GetValue(PolyLineSegment.PointsProperty);
			Assert.IsNotNull(retval, "GetValue(PolyLineSegment.PointsProperty) should not have returned null");
			Assert.IsTrue(retval is PointCollection, "GetValue(PolyLineSegment.PointsProperty) is not of the correct type");
		}

		[TestMethod]
		public void PolyLineSegment_PropertyGetter ()
		{
			PolyLineSegment widget = new PolyLineSegment ();

			Assert.IsNotNull(widget.Points, "Points should not have returned null");
			Assert.IsTrue(widget.Points is PointCollection, "Points is not of the correct type");
		}

		[TestMethod]
		public void PolyBezierSegment_ReadLocalValue ()
		{
			PolyBezierSegment widget = new PolyBezierSegment ();
			object retval;

			retval = widget.ReadLocalValue(PolyBezierSegment.PointsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyBezierSegment.PointsProperty) should not have a value by default");
		}

		[TestMethod]
		public void PolyBezierSegment_GetValue ()
		{
			PolyBezierSegment widget = new PolyBezierSegment ();
			object retval;

			retval = widget.GetValue(PolyBezierSegment.PointsProperty);
			Assert.IsNotNull(retval, "GetValue(PolyBezierSegment.PointsProperty) should not have returned null");
			Assert.IsTrue(retval is PointCollection, "GetValue(PolyBezierSegment.PointsProperty) is not of the correct type");
		}

		[TestMethod]
		public void PolyBezierSegment_PropertyGetter ()
		{
			PolyBezierSegment widget = new PolyBezierSegment ();

			Assert.IsNotNull(widget.Points, "Points should not have returned null");
			Assert.IsTrue(widget.Points is PointCollection, "Points is not of the correct type");
		}

		[TestMethod]
		public void PolyQuadraticBezierSegment_ReadLocalValue ()
		{
			PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();
			object retval;

			retval = widget.ReadLocalValue(PolyQuadraticBezierSegment.PointsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyQuadraticBezierSegment.PointsProperty) should not have a value by default");
		}

		[TestMethod]
		public void PolyQuadraticBezierSegment_GetValue ()
		{
			PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();
			object retval;

			retval = widget.GetValue(PolyQuadraticBezierSegment.PointsProperty);
			Assert.IsNotNull(retval, "GetValue(PolyQuadraticBezierSegment.PointsProperty) should not have returned null");
			Assert.IsTrue(retval is PointCollection, "GetValue(PolyQuadraticBezierSegment.PointsProperty) is not of the correct type");
		}

		[TestMethod]
		public void PolyQuadraticBezierSegment_PropertyGetter ()
		{
			PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();

			Assert.IsNotNull(widget.Points, "Points should not have returned null");
			Assert.IsTrue(widget.Points is PointCollection, "Points is not of the correct type");
		}

		[TestMethod]
		public void PathSegmentCollection_PropertyGetter ()
		{
			PathSegmentCollection widget = new PathSegmentCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is PathSegmentCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void PathFigure_ReadLocalValue ()
		{
			PathFigure widget = new PathFigure ();
			object retval;

			retval = widget.ReadLocalValue(PathFigure.SegmentsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.SegmentsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PathFigure.StartPointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.StartPointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PathFigure.IsClosedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.IsClosedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PathFigure.IsFilledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.IsFilledProperty) should not have a value by default");
		}

		[TestMethod]
		public void PathFigure_GetValue ()
		{
			PathFigure widget = new PathFigure ();
			object retval;

			retval = widget.GetValue(PathFigure.SegmentsProperty);
			Assert.IsNotNull(retval, "GetValue(PathFigure.SegmentsProperty) should not have returned null");
			Assert.IsTrue(retval is PathSegmentCollection, "GetValue(PathFigure.SegmentsProperty) is not of the correct type");

			retval = widget.GetValue(PathFigure.StartPointProperty);
			Assert.IsNotNull(retval, "GetValue(PathFigure.StartPointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(PathFigure.StartPointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(PathFigure.StartPointProperty) does not match the default value");

			retval = widget.GetValue(PathFigure.IsClosedProperty);
			Assert.IsNotNull(retval, "GetValue(PathFigure.IsClosedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(PathFigure.IsClosedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(PathFigure.IsClosedProperty) does not match the default value");

			retval = widget.GetValue(PathFigure.IsFilledProperty);
			Assert.IsNotNull(retval, "GetValue(PathFigure.IsFilledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(PathFigure.IsFilledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(PathFigure.IsFilledProperty) does not match the default value");
		}

		[TestMethod]
		public void PathFigure_PropertyGetter ()
		{
			PathFigure widget = new PathFigure ();

			Assert.IsNotNull(widget.Segments, "Segments should not have returned null");
			Assert.IsTrue(widget.Segments is PathSegmentCollection, "Segments is not of the correct type");

			Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");

			Assert.AreEqual(false, widget.IsClosed, "IsClosed does not match the default value");

			Assert.AreEqual(true, widget.IsFilled, "IsFilled does not match the default value");
		}

		[TestMethod]
		public void PathFigureCollection_PropertyGetter ()
		{
			PathFigureCollection widget = new PathFigureCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is PathFigureCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void PathGeometry_ReadLocalValue ()
		{
			PathGeometry widget = new PathGeometry ();
			object retval;

			retval = widget.ReadLocalValue(PathGeometry.FillRuleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathGeometry.FillRuleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PathGeometry.FiguresProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathGeometry.FiguresProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Geometry.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void PathGeometry_GetValue ()
		{
			PathGeometry widget = new PathGeometry ();
			object retval;

			retval = widget.GetValue(PathGeometry.FillRuleProperty);
			Assert.IsNotNull(retval, "GetValue(PathGeometry.FillRuleProperty) should not have returned null");
			Assert.IsTrue(retval is FillRule, "GetValue(PathGeometry.FillRuleProperty) is not of the correct type");
			Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(PathGeometry.FillRuleProperty) does not match the default value");

			//retval = widget.GetValue(PathGeometry.FiguresProperty);
			//Assert.IsNotNull(retval, "GetValue(PathGeometry.FiguresProperty) should not have returned null");
			//Assert.IsTrue(retval is PathFigureCollection, "GetValue(PathGeometry.FiguresProperty) is not of the correct type");

			retval = widget.GetValue(Geometry.TransformProperty);
			Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
		}

		[TestMethod]
		public void PathGeometry_PropertyGetter ()
		{
			PathGeometry widget = new PathGeometry ();

			Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");

			//Assert.IsNotNull(widget.Figures, "Figures should not have returned null");
			//Assert.IsTrue(widget.Figures is PathFigureCollection, "Figures is not of the correct type");

			Assert.IsNull(widget.Transform, "Transform should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
		}

		[TestMethod]
		public void EllipseGeometry_ReadLocalValue ()
		{
			EllipseGeometry widget = new EllipseGeometry ();
			object retval;

			retval = widget.ReadLocalValue(EllipseGeometry.CenterProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.CenterProperty) should not have a value by default");

			retval = widget.ReadLocalValue(EllipseGeometry.RadiusXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.RadiusXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(EllipseGeometry.RadiusYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.RadiusYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Geometry.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void EllipseGeometry_GetValue ()
		{
			EllipseGeometry widget = new EllipseGeometry ();
			object retval;

			retval = widget.GetValue(EllipseGeometry.CenterProperty);
			Assert.IsNotNull(retval, "GetValue(EllipseGeometry.CenterProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(EllipseGeometry.CenterProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(EllipseGeometry.CenterProperty) does not match the default value");

			retval = widget.GetValue(EllipseGeometry.RadiusXProperty);
			Assert.IsNotNull(retval, "GetValue(EllipseGeometry.RadiusXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(EllipseGeometry.RadiusXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(EllipseGeometry.RadiusXProperty) does not match the default value");

			retval = widget.GetValue(EllipseGeometry.RadiusYProperty);
			Assert.IsNotNull(retval, "GetValue(EllipseGeometry.RadiusYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(EllipseGeometry.RadiusYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(EllipseGeometry.RadiusYProperty) does not match the default value");

			retval = widget.GetValue(Geometry.TransformProperty);
			Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
		}

		[TestMethod]
		public void EllipseGeometry_PropertyGetter ()
		{
			EllipseGeometry widget = new EllipseGeometry ();

			Assert.AreEqual("0,0", widget.Center.ToString (), "Center does not match the default value");

			Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");

			Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");

			Assert.IsNull(widget.Transform, "Transform should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
		}

		[TestMethod]
		public void RectangleGeometry_ReadLocalValue ()
		{
			RectangleGeometry widget = new RectangleGeometry ();
			object retval;

			retval = widget.ReadLocalValue(RectangleGeometry.RectProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RectProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RectangleGeometry.RadiusXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RadiusXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RectangleGeometry.RadiusYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RadiusYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Geometry.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void RectangleGeometry_GetValue ()
		{
			RectangleGeometry widget = new RectangleGeometry ();
			object retval;

			retval = widget.GetValue(RectangleGeometry.RectProperty);
			Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RectProperty) should not have returned null");
			Assert.IsTrue(retval is Rect, "GetValue(RectangleGeometry.RectProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(RectangleGeometry.RectProperty) does not match the default value");

			retval = widget.GetValue(RectangleGeometry.RadiusXProperty);
			Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RadiusXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RectangleGeometry.RadiusXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RectangleGeometry.RadiusXProperty) does not match the default value");

			retval = widget.GetValue(RectangleGeometry.RadiusYProperty);
			Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RadiusYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RectangleGeometry.RadiusYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RectangleGeometry.RadiusYProperty) does not match the default value");

			retval = widget.GetValue(Geometry.TransformProperty);
			Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
		}

		[TestMethod]
		public void RectangleGeometry_PropertyGetter ()
		{
			RectangleGeometry widget = new RectangleGeometry ();

			Assert.AreEqual("0,0,0,0", widget.Rect.ToString (), "Rect does not match the default value");

			Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");

			Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");

			Assert.IsNull(widget.Transform, "Transform should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
		}

		[TestMethod]
		public void LineGeometry_ReadLocalValue ()
		{
			LineGeometry widget = new LineGeometry ();
			object retval;

			retval = widget.ReadLocalValue(LineGeometry.StartPointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineGeometry.StartPointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(LineGeometry.EndPointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineGeometry.EndPointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Geometry.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void LineGeometry_GetValue ()
		{
			LineGeometry widget = new LineGeometry ();
			object retval;

			retval = widget.GetValue(LineGeometry.StartPointProperty);
			Assert.IsNotNull(retval, "GetValue(LineGeometry.StartPointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(LineGeometry.StartPointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineGeometry.StartPointProperty) does not match the default value");

			retval = widget.GetValue(LineGeometry.EndPointProperty);
			Assert.IsNotNull(retval, "GetValue(LineGeometry.EndPointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(LineGeometry.EndPointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineGeometry.EndPointProperty) does not match the default value");

			retval = widget.GetValue(Geometry.TransformProperty);
			Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
		}

		[TestMethod]
		public void LineGeometry_PropertyGetter ()
		{
			LineGeometry widget = new LineGeometry ();

			Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");

			Assert.AreEqual("0,0", widget.EndPoint.ToString (), "EndPoint does not match the default value");

			Assert.IsNull(widget.Transform, "Transform should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
		}

		[TestMethod]
		public void GeometryCollection_PropertyGetter ()
		{
			GeometryCollection widget = new GeometryCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is GeometryCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void GeometryGroup_ReadLocalValue ()
		{
			GeometryGroup widget = new GeometryGroup ();
			object retval;

			retval = widget.ReadLocalValue(GeometryGroup.FillRuleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GeometryGroup.FillRuleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GeometryGroup.ChildrenProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GeometryGroup.ChildrenProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Geometry.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void GeometryGroup_GetValue ()
		{
			GeometryGroup widget = new GeometryGroup ();
			object retval;

			retval = widget.GetValue(GeometryGroup.FillRuleProperty);
			Assert.IsNotNull(retval, "GetValue(GeometryGroup.FillRuleProperty) should not have returned null");
			Assert.IsTrue(retval is FillRule, "GetValue(GeometryGroup.FillRuleProperty) is not of the correct type");
			Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(GeometryGroup.FillRuleProperty) does not match the default value");

			retval = widget.GetValue(GeometryGroup.ChildrenProperty);
			Assert.IsNotNull(retval, "GetValue(GeometryGroup.ChildrenProperty) should not have returned null");
			Assert.IsTrue(retval is GeometryCollection, "GetValue(GeometryGroup.ChildrenProperty) is not of the correct type");

			retval = widget.GetValue(Geometry.TransformProperty);
			Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
		}

		[TestMethod]
		public void GeometryGroup_PropertyGetter ()
		{
			GeometryGroup widget = new GeometryGroup ();

			Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is GeometryCollection, "Children is not of the correct type");

			Assert.IsNull(widget.Transform, "Transform should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
		}

		[TestMethod]
		public void SolidColorBrush_ReadLocalValue ()
		{
			SolidColorBrush widget = new SolidColorBrush ();
			object retval;

			retval = widget.ReadLocalValue(SolidColorBrush.ColorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SolidColorBrush.ColorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void SolidColorBrush_GetValue ()
		{
			SolidColorBrush widget = new SolidColorBrush ();
			object retval;

			retval = widget.GetValue(SolidColorBrush.ColorProperty);
			Assert.IsNotNull(retval, "GetValue(SolidColorBrush.ColorProperty) should not have returned null");
			Assert.IsTrue(retval is Color, "GetValue(SolidColorBrush.ColorProperty) is not of the correct type");
			Assert.AreEqual("#00000000", retval.ToString (), "GetValue(SolidColorBrush.ColorProperty) does not match the default value");

			retval = widget.GetValue(Brush.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Brush.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");

			retval = widget.GetValue(Brush.TransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.TransformProperty) is not of the correct type");

			retval = widget.GetValue(Brush.RelativeTransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
		}

		[TestMethod]
		public void SolidColorBrush_PropertyGetter ()
		{
			SolidColorBrush widget = new SolidColorBrush ();

			Assert.AreEqual("#00000000", widget.Color.ToString (), "Color does not match the default value");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
			Assert.IsTrue(widget.Transform is MatrixTransform, "Transform is not of the correct type");

			Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
			Assert.IsTrue(widget.RelativeTransform is MatrixTransform, "RelativeTransform is not of the correct type");
		}

		[TestMethod]
		public void GradientStop_ReadLocalValue ()
		{
			GradientStop widget = new GradientStop ();
			object retval;

			retval = widget.ReadLocalValue(GradientStop.ColorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientStop.ColorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientStop.OffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientStop.OffsetProperty) should not have a value by default");
		}

		[TestMethod]
		public void GradientStop_GetValue ()
		{
			GradientStop widget = new GradientStop ();
			object retval;

			retval = widget.GetValue(GradientStop.ColorProperty);
			Assert.IsNotNull(retval, "GetValue(GradientStop.ColorProperty) should not have returned null");
			Assert.IsTrue(retval is Color, "GetValue(GradientStop.ColorProperty) is not of the correct type");
			Assert.AreEqual("#00000000", retval.ToString (), "GetValue(GradientStop.ColorProperty) does not match the default value");

			retval = widget.GetValue(GradientStop.OffsetProperty);
			Assert.IsNotNull(retval, "GetValue(GradientStop.OffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(GradientStop.OffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(GradientStop.OffsetProperty) does not match the default value");
		}

		[TestMethod]
		public void GradientStop_PropertyGetter ()
		{
			GradientStop widget = new GradientStop ();

			Assert.AreEqual("#00000000", widget.Color.ToString (), "Color does not match the default value");

			Assert.AreEqual((double) 0, widget.Offset, "Offset does not match the default value");
		}

		[TestMethod]
		public void GradientStopCollection_PropertyGetter ()
		{
			GradientStopCollection widget = new GradientStopCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is GradientStopCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void LinearGradientBrush_ReadLocalValue ()
		{
			LinearGradientBrush widget = new LinearGradientBrush ();
			object retval;

			retval = widget.ReadLocalValue(LinearGradientBrush.StartPointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LinearGradientBrush.StartPointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(LinearGradientBrush.EndPointProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LinearGradientBrush.EndPointProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.SpreadMethodProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.SpreadMethodProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.MappingModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.MappingModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.ColorInterpolationModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.ColorInterpolationModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.GradientStopsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.GradientStopsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void LinearGradientBrush_GetValue ()
		{
			LinearGradientBrush widget = new LinearGradientBrush ();
			object retval;

			retval = widget.GetValue(LinearGradientBrush.StartPointProperty);
			Assert.IsNotNull(retval, "GetValue(LinearGradientBrush.StartPointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(LinearGradientBrush.StartPointProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(LinearGradientBrush.StartPointProperty) does not match the default value");

			retval = widget.GetValue(LinearGradientBrush.EndPointProperty);
			Assert.IsNotNull(retval, "GetValue(LinearGradientBrush.EndPointProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(LinearGradientBrush.EndPointProperty) is not of the correct type");
			Assert.AreEqual("1,1", retval.ToString (), "GetValue(LinearGradientBrush.EndPointProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.SpreadMethodProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.SpreadMethodProperty) should not have returned null");
			Assert.IsTrue(retval is GradientSpreadMethod, "GetValue(GradientBrush.SpreadMethodProperty) is not of the correct type");
			Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GetValue(GradientBrush.SpreadMethodProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.MappingModeProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.MappingModeProperty) should not have returned null");
			Assert.IsTrue(retval is BrushMappingMode, "GetValue(GradientBrush.MappingModeProperty) is not of the correct type");
			Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GetValue(GradientBrush.MappingModeProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.ColorInterpolationModeProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) should not have returned null");
			Assert.IsTrue(retval is ColorInterpolationMode, "GetValue(GradientBrush.ColorInterpolationModeProperty) is not of the correct type");
			Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.GradientStopsProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.GradientStopsProperty) should not have returned null");
			Assert.IsTrue(retval is GradientStopCollection, "GetValue(GradientBrush.GradientStopsProperty) is not of the correct type");

			retval = widget.GetValue(Brush.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Brush.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");

			retval = widget.GetValue(Brush.TransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.TransformProperty) is not of the correct type");

			retval = widget.GetValue(Brush.RelativeTransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
		}

		[TestMethod]
		public void LinearGradientBrush_PropertyGetter ()
		{
			LinearGradientBrush widget = new LinearGradientBrush ();

			Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");

			Assert.AreEqual("1,1", widget.EndPoint.ToString (), "EndPoint does not match the default value");

			Assert.AreEqual(GradientSpreadMethod.Pad, widget.SpreadMethod, "SpreadMethod does not match the default value");

			Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, widget.MappingMode, "MappingMode does not match the default value");

			Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, widget.ColorInterpolationMode, "ColorInterpolationMode does not match the default value");

			Assert.IsNotNull(widget.GradientStops, "GradientStops should not have returned null");
			Assert.IsTrue(widget.GradientStops is GradientStopCollection, "GradientStops is not of the correct type");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
			Assert.IsTrue(widget.Transform is MatrixTransform, "Transform is not of the correct type");

			Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
			Assert.IsTrue(widget.RelativeTransform is MatrixTransform, "RelativeTransform is not of the correct type");
		}

		[TestMethod]
		public void RadialGradientBrush_ReadLocalValue ()
		{
			RadialGradientBrush widget = new RadialGradientBrush ();
			object retval;

			retval = widget.ReadLocalValue(RadialGradientBrush.CenterProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.CenterProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RadialGradientBrush.GradientOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.GradientOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RadialGradientBrush.RadiusXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.RadiusXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RadialGradientBrush.RadiusYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.RadiusYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.SpreadMethodProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.SpreadMethodProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.MappingModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.MappingModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.ColorInterpolationModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.ColorInterpolationModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(GradientBrush.GradientStopsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.GradientStopsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void RadialGradientBrush_GetValue ()
		{
			RadialGradientBrush widget = new RadialGradientBrush ();
			object retval;

			retval = widget.GetValue(RadialGradientBrush.CenterProperty);
			Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.CenterProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(RadialGradientBrush.CenterProperty) is not of the correct type");
			Assert.AreEqual("0.5,0.5", retval.ToString (), "GetValue(RadialGradientBrush.CenterProperty) does not match the default value");

			retval = widget.GetValue(RadialGradientBrush.GradientOriginProperty);
			Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.GradientOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(RadialGradientBrush.GradientOriginProperty) is not of the correct type");
			Assert.AreEqual("0.5,0.5", retval.ToString (), "GetValue(RadialGradientBrush.GradientOriginProperty) does not match the default value");

			retval = widget.GetValue(RadialGradientBrush.RadiusXProperty);
			Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.RadiusXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RadialGradientBrush.RadiusXProperty) is not of the correct type");
			Assert.AreEqual((double) 0.5, retval, "GetValue(RadialGradientBrush.RadiusXProperty) does not match the default value");

			retval = widget.GetValue(RadialGradientBrush.RadiusYProperty);
			Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.RadiusYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RadialGradientBrush.RadiusYProperty) is not of the correct type");
			Assert.AreEqual((double) 0.5, retval, "GetValue(RadialGradientBrush.RadiusYProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.SpreadMethodProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.SpreadMethodProperty) should not have returned null");
			Assert.IsTrue(retval is GradientSpreadMethod, "GetValue(GradientBrush.SpreadMethodProperty) is not of the correct type");
			Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GetValue(GradientBrush.SpreadMethodProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.MappingModeProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.MappingModeProperty) should not have returned null");
			Assert.IsTrue(retval is BrushMappingMode, "GetValue(GradientBrush.MappingModeProperty) is not of the correct type");
			Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GetValue(GradientBrush.MappingModeProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.ColorInterpolationModeProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) should not have returned null");
			Assert.IsTrue(retval is ColorInterpolationMode, "GetValue(GradientBrush.ColorInterpolationModeProperty) is not of the correct type");
			Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) does not match the default value");

			retval = widget.GetValue(GradientBrush.GradientStopsProperty);
			Assert.IsNotNull(retval, "GetValue(GradientBrush.GradientStopsProperty) should not have returned null");
			Assert.IsTrue(retval is GradientStopCollection, "GetValue(GradientBrush.GradientStopsProperty) is not of the correct type");

			retval = widget.GetValue(Brush.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Brush.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");

			retval = widget.GetValue(Brush.TransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.TransformProperty) is not of the correct type");

			retval = widget.GetValue(Brush.RelativeTransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
		}

		[TestMethod]
		public void RadialGradientBrush_PropertyGetter ()
		{
			RadialGradientBrush widget = new RadialGradientBrush ();

			Assert.AreEqual("0.5,0.5", widget.Center.ToString (), "Center does not match the default value");

			Assert.AreEqual("0.5,0.5", widget.GradientOrigin.ToString (), "GradientOrigin does not match the default value");

			Assert.AreEqual((double) 0.5, widget.RadiusX, "RadiusX does not match the default value");

			Assert.AreEqual((double) 0.5, widget.RadiusY, "RadiusY does not match the default value");

			Assert.AreEqual(GradientSpreadMethod.Pad, widget.SpreadMethod, "SpreadMethod does not match the default value");

			Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, widget.MappingMode, "MappingMode does not match the default value");

			Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, widget.ColorInterpolationMode, "ColorInterpolationMode does not match the default value");

			Assert.IsNotNull(widget.GradientStops, "GradientStops should not have returned null");
			Assert.IsTrue(widget.GradientStops is GradientStopCollection, "GradientStops is not of the correct type");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
			Assert.IsTrue(widget.Transform is MatrixTransform, "Transform is not of the correct type");

			Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
			Assert.IsTrue(widget.RelativeTransform is MatrixTransform, "RelativeTransform is not of the correct type");
		}

		[TestMethod]
		public void ImageBrush_ReadLocalValue ()
		{
			ImageBrush widget = new ImageBrush ();
			object retval;

			retval = widget.ReadLocalValue(ImageBrush.ImageSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ImageBrush.ImageSourceProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.AlignmentXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.AlignmentYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void ImageBrush_GetValue ()
		{
			ImageBrush widget = new ImageBrush ();
			object retval;

			retval = widget.GetValue(ImageBrush.ImageSourceProperty);
			Assert.IsNull(retval, "GetValue(ImageBrush.ImageSourceProperty) should have returned null");

			retval = widget.GetValue(TileBrush.AlignmentXProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentXProperty) should not have returned null");
			Assert.IsTrue(retval is AlignmentX, "GetValue(TileBrush.AlignmentXProperty) is not of the correct type");
			Assert.AreEqual(AlignmentX.Center, retval, "GetValue(TileBrush.AlignmentXProperty) does not match the default value");

			retval = widget.GetValue(TileBrush.AlignmentYProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentYProperty) should not have returned null");
			Assert.IsTrue(retval is AlignmentY, "GetValue(TileBrush.AlignmentYProperty) is not of the correct type");
			Assert.AreEqual(AlignmentY.Center, retval, "GetValue(TileBrush.AlignmentYProperty) does not match the default value");

			retval = widget.GetValue(TileBrush.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(TileBrush.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Fill, retval, "GetValue(TileBrush.StretchProperty) does not match the default value");

			retval = widget.GetValue(Brush.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Brush.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");

			//retval = widget.GetValue(Brush.TransformProperty);
			//Assert.IsNull(retval, "GetValue(Brush.TransformProperty) should have returned null");

			//retval = widget.GetValue(Brush.RelativeTransformProperty);
			//Assert.IsNull(retval, "GetValue(Brush.RelativeTransformProperty) should have returned null");
		}

		[TestMethod]
		public void ImageBrush_PropertyGetter ()
		{
			ImageBrush widget = new ImageBrush ();

			//Assert.IsNotNull(widget.ImageSource, "ImageSource should not have returned null");
			//Assert.IsTrue(widget.ImageSource is BitmapImage, "ImageSource is not of the correct type");

			Assert.AreEqual(AlignmentX.Center, widget.AlignmentX, "AlignmentX does not match the default value");

			Assert.AreEqual(AlignmentY.Center, widget.AlignmentY, "AlignmentY does not match the default value");

			Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			//Assert.IsNull(widget.Transform, "Transform should have returned null");

			//Assert.IsNull(widget.RelativeTransform, "RelativeTransform should have returned null");
		}

		[TestMethod]
		public void VideoBrush_ReadLocalValue ()
		{
			VideoBrush widget = new VideoBrush ();
			object retval;

			retval = widget.ReadLocalValue(VideoBrush.SourceNameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VideoBrush.SourceNameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.AlignmentXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.AlignmentYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TileBrush.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.TransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
		}

		[TestMethod]
		public void VideoBrush_GetValue ()
		{
			VideoBrush widget = new VideoBrush ();
			object retval;

			retval = widget.GetValue(VideoBrush.SourceNameProperty);
			Assert.IsNotNull(retval, "GetValue(VideoBrush.SourceNameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(VideoBrush.SourceNameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(VideoBrush.SourceNameProperty) does not match the default value");

			retval = widget.GetValue(TileBrush.AlignmentXProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentXProperty) should not have returned null");
			Assert.IsTrue(retval is AlignmentX, "GetValue(TileBrush.AlignmentXProperty) is not of the correct type");
			Assert.AreEqual(AlignmentX.Center, retval, "GetValue(TileBrush.AlignmentXProperty) does not match the default value");

			retval = widget.GetValue(TileBrush.AlignmentYProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentYProperty) should not have returned null");
			Assert.IsTrue(retval is AlignmentY, "GetValue(TileBrush.AlignmentYProperty) is not of the correct type");
			Assert.AreEqual(AlignmentY.Center, retval, "GetValue(TileBrush.AlignmentYProperty) does not match the default value");

			retval = widget.GetValue(TileBrush.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(TileBrush.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(TileBrush.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Fill, retval, "GetValue(TileBrush.StretchProperty) does not match the default value");

			retval = widget.GetValue(Brush.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Brush.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");

			retval = widget.GetValue(Brush.TransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.TransformProperty) is not of the correct type");

			retval = widget.GetValue(Brush.RelativeTransformProperty);
			Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
			Assert.IsTrue(retval is MatrixTransform, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
		}

		[TestMethod]
		public void VideoBrush_PropertyGetter ()
		{
			VideoBrush widget = new VideoBrush ();

			Assert.IsNotNull(widget.SourceName, "SourceName should not have returned null");
			Assert.AreEqual("", widget.SourceName, "SourceName does not match the default value");

			Assert.AreEqual(AlignmentX.Center, widget.AlignmentX, "AlignmentX does not match the default value");

			Assert.AreEqual(AlignmentY.Center, widget.AlignmentY, "AlignmentY does not match the default value");

			Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
			Assert.IsTrue(widget.Transform is MatrixTransform, "Transform is not of the correct type");

			Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
			Assert.IsTrue(widget.RelativeTransform is MatrixTransform, "RelativeTransform is not of the correct type");
		}

		[TestMethod]
		public void TimelineMarker_ReadLocalValue ()
		{
			TimelineMarker widget = new TimelineMarker ();
			object retval;

			retval = widget.ReadLocalValue(TimelineMarker.TimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TimelineMarker.TypeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TypeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TimelineMarker.TextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TextProperty) should not have a value by default");
		}

		[TestMethod]
		public void TimelineMarker_GetValue ()
		{
			TimelineMarker widget = new TimelineMarker ();
			object retval;

			retval = widget.GetValue(TimelineMarker.TimeProperty);
			Assert.IsNotNull(retval, "GetValue(TimelineMarker.TimeProperty) should not have returned null");
			Assert.IsTrue(retval is TimeSpan, "GetValue(TimelineMarker.TimeProperty) is not of the correct type");
			Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(TimelineMarker.TimeProperty) does not match the default value");

			retval = widget.GetValue(TimelineMarker.TypeProperty);
			Assert.IsNull(retval, "GetValue(TimelineMarker.TypeProperty) should have returned null");

			retval = widget.GetValue(TimelineMarker.TextProperty);
			Assert.IsNull(retval, "GetValue(TimelineMarker.TextProperty) should have returned null");
		}

		[TestMethod]
		public void TimelineMarker_PropertyGetter ()
		{
			TimelineMarker widget = new TimelineMarker ();

			Assert.AreEqual("00:00:00", widget.Time.ToString (), "Time does not match the default value");

			Assert.IsNull(widget.Type, "Type should have returned null");

			Assert.IsNull(widget.Text, "Text should have returned null");
		}

		[TestMethod]
		public void TimelineMarkerCollection_PropertyGetter ()
		{
			TimelineMarkerCollection widget = new TimelineMarkerCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is TimelineMarkerCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void BeginStoryboard_ReadLocalValue ()
		{
			BeginStoryboard widget = new BeginStoryboard ();
			object retval;

			retval = widget.ReadLocalValue(BeginStoryboard.StoryboardProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BeginStoryboard.StoryboardProperty) should not have a value by default");
		}

		[TestMethod]
		public void BeginStoryboard_GetValue ()
		{
			BeginStoryboard widget = new BeginStoryboard ();
			object retval;

			retval = widget.GetValue(BeginStoryboard.StoryboardProperty);
			Assert.IsNull(retval, "GetValue(BeginStoryboard.StoryboardProperty) should have returned null");
		}

		[TestMethod]
		public void BeginStoryboard_PropertyGetter ()
		{
			BeginStoryboard widget = new BeginStoryboard ();

			Assert.IsNull(widget.Storyboard, "Storyboard should have returned null");
		}

		[TestMethod]
		public void Storyboard_ReadLocalValue ()
		{
			Storyboard widget = new Storyboard ();
			object retval;

			retval = widget.ReadLocalValue(Storyboard.TargetPropertyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Storyboard.TargetPropertyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Storyboard.TargetNameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Storyboard.TargetNameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void Storyboard_GetValue ()
		{
			Storyboard widget = new Storyboard ();
			object retval;

			retval = widget.GetValue(Storyboard.TargetPropertyProperty);
			Assert.IsNull(retval, "GetValue(Storyboard.TargetPropertyProperty) should have returned null");

			retval = widget.GetValue(Storyboard.TargetNameProperty);
			Assert.IsNull(retval, "GetValue(Storyboard.TargetNameProperty) should have returned null");

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void Storyboard_PropertyGetter ()
		{
			Storyboard widget = new Storyboard ();

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is TimelineCollection, "Children is not of the correct type");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void DoubleAnimation_ReadLocalValue ()
		{
			DoubleAnimation widget = new DoubleAnimation ();
			object retval;

			retval = widget.ReadLocalValue(DoubleAnimation.FromProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.FromProperty) should not have a value by default");

			retval = widget.ReadLocalValue(DoubleAnimation.ToProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.ToProperty) should not have a value by default");

			retval = widget.ReadLocalValue(DoubleAnimation.ByProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.ByProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void DoubleAnimation_GetValue ()
		{
			DoubleAnimation widget = new DoubleAnimation ();
			object retval;

			retval = widget.GetValue(DoubleAnimation.FromProperty);
			Assert.IsNull(retval, "GetValue(DoubleAnimation.FromProperty) should have returned null");

			retval = widget.GetValue(DoubleAnimation.ToProperty);
			Assert.IsNull(retval, "GetValue(DoubleAnimation.ToProperty) should have returned null");

			retval = widget.GetValue(DoubleAnimation.ByProperty);
			Assert.IsNull(retval, "GetValue(DoubleAnimation.ByProperty) should have returned null");

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void DoubleAnimation_PropertyGetter ()
		{
			DoubleAnimation widget = new DoubleAnimation ();

			Assert.IsNull(widget.From, "From should have returned null");

			Assert.IsNull(widget.To, "To should have returned null");

			Assert.IsNull(widget.By, "By should have returned null");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void ColorAnimation_ReadLocalValue ()
		{
			ColorAnimation widget = new ColorAnimation ();
			object retval;

			retval = widget.ReadLocalValue(ColorAnimation.FromProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.FromProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColorAnimation.ToProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.ToProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColorAnimation.ByProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.ByProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void ColorAnimation_GetValue ()
		{
			ColorAnimation widget = new ColorAnimation ();
			object retval;

			retval = widget.GetValue(ColorAnimation.FromProperty);
			Assert.IsNull(retval, "GetValue(ColorAnimation.FromProperty) should have returned null");

			retval = widget.GetValue(ColorAnimation.ToProperty);
			Assert.IsNull(retval, "GetValue(ColorAnimation.ToProperty) should have returned null");

			retval = widget.GetValue(ColorAnimation.ByProperty);
			Assert.IsNull(retval, "GetValue(ColorAnimation.ByProperty) should have returned null");

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void ColorAnimation_PropertyGetter ()
		{
			ColorAnimation widget = new ColorAnimation ();

			Assert.IsNull(widget.From, "From should have returned null");

			Assert.IsNull(widget.To, "To should have returned null");

			Assert.IsNull(widget.By, "By should have returned null");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void PointAnimation_ReadLocalValue ()
		{
			PointAnimation widget = new PointAnimation ();
			object retval;

			retval = widget.ReadLocalValue(PointAnimation.FromProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.FromProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PointAnimation.ToProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.ToProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PointAnimation.ByProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.ByProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void PointAnimation_GetValue ()
		{
			PointAnimation widget = new PointAnimation ();
			object retval;

			retval = widget.GetValue(PointAnimation.FromProperty);
			Assert.IsNull(retval, "GetValue(PointAnimation.FromProperty) should have returned null");

			retval = widget.GetValue(PointAnimation.ToProperty);
			Assert.IsNull(retval, "GetValue(PointAnimation.ToProperty) should have returned null");

			retval = widget.GetValue(PointAnimation.ByProperty);
			Assert.IsNull(retval, "GetValue(PointAnimation.ByProperty) should have returned null");

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void PointAnimation_PropertyGetter ()
		{
			PointAnimation widget = new PointAnimation ();

			Assert.IsNull(widget.From, "From should have returned null");

			Assert.IsNull(widget.To, "To should have returned null");

			Assert.IsNull(widget.By, "By should have returned null");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void KeySpline_PropertyGetter ()
		{
			KeySpline widget = new KeySpline ();

			Assert.AreEqual("0,0", widget.ControlPoint1.ToString (), "ControlPoint1 does not match the default value");

			Assert.AreEqual("1,1", widget.ControlPoint2.ToString (), "ControlPoint2 does not match the default value");
		}

		[TestMethod]
		public void ColorKeyFrameCollection_PropertyGetter ()
		{
			ColorKeyFrameCollection widget = new ColorKeyFrameCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is ColorKeyFrameCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void DoubleKeyFrameCollection_PropertyGetter ()
		{
			DoubleKeyFrameCollection widget = new DoubleKeyFrameCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is DoubleKeyFrameCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void PointKeyFrameCollection_PropertyGetter ()
		{
			PointKeyFrameCollection widget = new PointKeyFrameCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is PointKeyFrameCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void ObjectKeyFrameCollection_PropertyGetter ()
		{
			ObjectKeyFrameCollection widget = new ObjectKeyFrameCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is ObjectKeyFrameCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void DoubleAnimationUsingKeyFrames_ReadLocalValue ()
		{
			DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();
			object retval;

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void DoubleAnimationUsingKeyFrames_GetValue ()
		{
			DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();
			object retval;

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void DoubleAnimationUsingKeyFrames_PropertyGetter ()
		{
			DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();

			Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
			Assert.IsTrue(widget.KeyFrames is DoubleKeyFrameCollection, "KeyFrames is not of the correct type");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void DiscreteDoubleKeyFrame_ReadLocalValue ()
		{
			DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void DiscreteDoubleKeyFrame_GetValue ()
		{
			DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();
			object retval;

			retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void DiscreteDoubleKeyFrame_PropertyGetter ()
		{
			DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void LinearDoubleKeyFrame_ReadLocalValue ()
		{
			LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void LinearDoubleKeyFrame_GetValue ()
		{
			LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();
			object retval;

			retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void LinearDoubleKeyFrame_PropertyGetter ()
		{
			LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void SplineDoubleKeyFrame_ReadLocalValue ()
		{
			SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
			object retval;

			retval = widget.ReadLocalValue(SplineDoubleKeyFrame.KeySplineProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplineDoubleKeyFrame.KeySplineProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void SplineDoubleKeyFrame_GetValue ()
		{
			SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
			object retval;

			retval = widget.GetValue(SplineDoubleKeyFrame.KeySplineProperty);
			Assert.IsNotNull(retval, "GetValue(SplineDoubleKeyFrame.KeySplineProperty) should not have returned null");
			Assert.IsTrue(retval is KeySpline, "GetValue(SplineDoubleKeyFrame.KeySplineProperty) is not of the correct type");

			retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void SplineDoubleKeyFrame_PropertyGetter ()
		{
			SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();

			Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
			Assert.IsTrue(widget.KeySpline is KeySpline, "KeySpline is not of the correct type");

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void ColorAnimationUsingKeyFrames_ReadLocalValue ()
		{
			ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();
			object retval;

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void ColorAnimationUsingKeyFrames_GetValue ()
		{
			ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();
			object retval;

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void ColorAnimationUsingKeyFrames_PropertyGetter ()
		{
			ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();

			Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
			Assert.IsTrue(widget.KeyFrames is ColorKeyFrameCollection, "KeyFrames is not of the correct type");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void DiscreteColorKeyFrame_ReadLocalValue ()
		{
			DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void DiscreteColorKeyFrame_GetValue ()
		{
			DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();
			object retval;

			retval = widget.GetValue(ColorKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Color, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void DiscreteColorKeyFrame_PropertyGetter ()
		{
			DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();

			Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void LinearColorKeyFrame_ReadLocalValue ()
		{
			LinearColorKeyFrame widget = new LinearColorKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void LinearColorKeyFrame_GetValue ()
		{
			LinearColorKeyFrame widget = new LinearColorKeyFrame ();
			object retval;

			retval = widget.GetValue(ColorKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Color, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void LinearColorKeyFrame_PropertyGetter ()
		{
			LinearColorKeyFrame widget = new LinearColorKeyFrame ();

			Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void SplineColorKeyFrame_ReadLocalValue ()
		{
			SplineColorKeyFrame widget = new SplineColorKeyFrame ();
			object retval;

			retval = widget.ReadLocalValue(SplineColorKeyFrame.KeySplineProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplineColorKeyFrame.KeySplineProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void SplineColorKeyFrame_GetValue ()
		{
			SplineColorKeyFrame widget = new SplineColorKeyFrame ();
			object retval;

			retval = widget.GetValue(SplineColorKeyFrame.KeySplineProperty);
			Assert.IsNotNull(retval, "GetValue(SplineColorKeyFrame.KeySplineProperty) should not have returned null");
			Assert.IsTrue(retval is KeySpline, "GetValue(SplineColorKeyFrame.KeySplineProperty) is not of the correct type");

			retval = widget.GetValue(ColorKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Color, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void SplineColorKeyFrame_PropertyGetter ()
		{
			SplineColorKeyFrame widget = new SplineColorKeyFrame ();

			Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
			Assert.IsTrue(widget.KeySpline is KeySpline, "KeySpline is not of the correct type");

			Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void PointAnimationUsingKeyFrames_ReadLocalValue ()
		{
			PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();
			object retval;

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void PointAnimationUsingKeyFrames_GetValue ()
		{
			PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();
			object retval;

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void PointAnimationUsingKeyFrames_PropertyGetter ()
		{
			PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();

			Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
			Assert.IsTrue(widget.KeyFrames is PointKeyFrameCollection, "KeyFrames is not of the correct type");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void DiscretePointKeyFrame_ReadLocalValue ()
		{
			DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void DiscretePointKeyFrame_GetValue ()
		{
			DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();
			object retval;

			retval = widget.GetValue(PointKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void DiscretePointKeyFrame_PropertyGetter ()
		{
			DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();

			Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void LinearPointKeyFrame_ReadLocalValue ()
		{
			LinearPointKeyFrame widget = new LinearPointKeyFrame ();
			object retval;

			//retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void LinearPointKeyFrame_GetValue ()
		{
			LinearPointKeyFrame widget = new LinearPointKeyFrame ();
			object retval;

			retval = widget.GetValue(PointKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void LinearPointKeyFrame_PropertyGetter ()
		{
			LinearPointKeyFrame widget = new LinearPointKeyFrame ();

			Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void SplinePointKeyFrame_ReadLocalValue ()
		{
			SplinePointKeyFrame widget = new SplinePointKeyFrame ();
			object retval;

			retval = widget.ReadLocalValue(SplinePointKeyFrame.KeySplineProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplinePointKeyFrame.KeySplineProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
		}

		[TestMethod]
		public void SplinePointKeyFrame_GetValue ()
		{
			SplinePointKeyFrame widget = new SplinePointKeyFrame ();
			object retval;

			retval = widget.GetValue(SplinePointKeyFrame.KeySplineProperty);
			Assert.IsNotNull(retval, "GetValue(SplinePointKeyFrame.KeySplineProperty) should not have returned null");
			Assert.IsTrue(retval is KeySpline, "GetValue(SplinePointKeyFrame.KeySplineProperty) is not of the correct type");

			retval = widget.GetValue(PointKeyFrame.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");

			retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
		}

		[TestMethod]
		public void SplinePointKeyFrame_PropertyGetter ()
		{
			SplinePointKeyFrame widget = new SplinePointKeyFrame ();

			Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
			Assert.IsTrue(widget.KeySpline is KeySpline, "KeySpline is not of the correct type");

			Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
		}

		[TestMethod]
		public void ObjectAnimationUsingKeyFrames_ReadLocalValue ()
		{
			ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();
			object retval;

			retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.DurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
		}

		[TestMethod]
		public void ObjectAnimationUsingKeyFrames_GetValue ()
		{
			ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();
			object retval;

			retval = widget.GetValue(Timeline.AutoReverseProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");

			//retval = widget.GetValue(Timeline.BeginTimeProperty);
			//Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");

			retval = widget.GetValue(Timeline.DurationProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(Timeline.DurationProperty) is not of the correct type");
			Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");

			retval = widget.GetValue(Timeline.SpeedRatioProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");

			retval = widget.GetValue(Timeline.FillBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is FillBehavior, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
			Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");

			retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
			Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
			Assert.IsTrue(retval is RepeatBehavior, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
			Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
		}

		[TestMethod]
		public void ObjectAnimationUsingKeyFrames_PropertyGetter ()
		{
			ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();

			//Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
			//Assert.IsTrue(widget.KeyFrames is ObjectKeyFrameCollection, "KeyFrames is not of the correct type");

			Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");

			//Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");

			Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");

			Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");

			Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");

			Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
		}

		[TestMethod]
		public void DiscreteObjectKeyFrame_ReadLocalValue ()
		{
			DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();
			object retval;

			retval = widget.ReadLocalValue(ObjectKeyFrame.KeyTimeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ObjectKeyFrame.KeyTimeProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(ObjectKeyFrame.ValueProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ObjectKeyFrame.ValueProperty) should not have a value by default");
		}

		[TestMethod]
		public void DiscreteObjectKeyFrame_GetValue ()
		{
			DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();
			object retval;

			retval = widget.GetValue(ObjectKeyFrame.KeyTimeProperty);
			Assert.IsNotNull(retval, "GetValue(ObjectKeyFrame.KeyTimeProperty) should not have returned null");
			Assert.IsTrue(retval is KeyTime, "GetValue(ObjectKeyFrame.KeyTimeProperty) is not of the correct type");
			Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ObjectKeyFrame.KeyTimeProperty) does not match the default value");

			retval = widget.GetValue(ObjectKeyFrame.ValueProperty);
			Assert.IsNull(retval, "GetValue(ObjectKeyFrame.ValueProperty) should have returned null");
		}

		[TestMethod]
		public void DiscreteObjectKeyFrame_PropertyGetter ()
		{
			DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();

			Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");

			Assert.IsNull(widget.Value, "Value should have returned null");
		}

		[TestMethod]
		public void TimelineCollection_PropertyGetter ()
		{
			TimelineCollection widget = new TimelineCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is TimelineCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void StylusPointCollection_PropertyGetter ()
		{
			StylusPointCollection widget = new StylusPointCollection ();

			Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");

			Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");

			Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
			Assert.IsTrue(widget.SyncRoot is StylusPointCollection, "SyncRoot is not of the correct type");
		}

		[TestMethod]
		public void Path_ReadLocalValue ()
		{
			Path widget = new Path ();
			object retval;

			retval = widget.ReadLocalValue(Path.DataProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Path.DataProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Path_GetValue ()
		{
			Path widget = new Path ();
			object retval;

			retval = widget.GetValue(Path.DataProperty);
			Assert.IsNull(retval, "GetValue(Path.DataProperty) should have returned null");

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Path_PropertyGetter ()
		{
			Path widget = new Path ();

			Assert.IsNull(widget.Data, "Data should have returned null");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Ellipse_ReadLocalValue ()
		{
			Ellipse widget = new Ellipse ();
			object retval;

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StretchProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Ellipse_GetValue ()
		{
			Ellipse widget = new Ellipse ();
			object retval;

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Fill, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Ellipse_PropertyGetter ()
		{
			Ellipse widget = new Ellipse ();

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Line_ReadLocalValue ()
		{
			Line widget = new Line ();
			object retval;

			retval = widget.ReadLocalValue(Line.X1Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.X1Property) should not have a value by default");

			retval = widget.ReadLocalValue(Line.Y1Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.Y1Property) should not have a value by default");

			retval = widget.ReadLocalValue(Line.X2Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.X2Property) should not have a value by default");

			retval = widget.ReadLocalValue(Line.Y2Property);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.Y2Property) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Line_GetValue ()
		{
			Line widget = new Line ();
			object retval;

			retval = widget.GetValue(Line.X1Property);
			Assert.IsNotNull(retval, "GetValue(Line.X1Property) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Line.X1Property) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Line.X1Property) does not match the default value");

			retval = widget.GetValue(Line.Y1Property);
			Assert.IsNotNull(retval, "GetValue(Line.Y1Property) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Line.Y1Property) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Line.Y1Property) does not match the default value");

			retval = widget.GetValue(Line.X2Property);
			Assert.IsNotNull(retval, "GetValue(Line.X2Property) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Line.X2Property) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Line.X2Property) does not match the default value");

			retval = widget.GetValue(Line.Y2Property);
			Assert.IsNotNull(retval, "GetValue(Line.Y2Property) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Line.Y2Property) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Line.Y2Property) does not match the default value");

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Line_PropertyGetter ()
		{
			Line widget = new Line ();

			Assert.AreEqual((double) 0, widget.X1, "X1 does not match the default value");

			Assert.AreEqual((double) 0, widget.Y1, "Y1 does not match the default value");

			Assert.AreEqual((double) 0, widget.X2, "X2 does not match the default value");

			Assert.AreEqual((double) 0, widget.Y2, "Y2 does not match the default value");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Polygon_ReadLocalValue ()
		{
			Polygon widget = new Polygon ();
			object retval;

			retval = widget.ReadLocalValue(Polygon.FillRuleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polygon.FillRuleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Polygon.PointsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polygon.PointsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Polygon_GetValue ()
		{
			Polygon widget = new Polygon ();
			object retval;

			retval = widget.GetValue(Polygon.FillRuleProperty);
			Assert.IsNotNull(retval, "GetValue(Polygon.FillRuleProperty) should not have returned null");
			Assert.IsTrue(retval is FillRule, "GetValue(Polygon.FillRuleProperty) is not of the correct type");
			Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(Polygon.FillRuleProperty) does not match the default value");

			retval = widget.GetValue(Polygon.PointsProperty);
			Assert.IsNotNull(retval, "GetValue(Polygon.PointsProperty) should not have returned null");
			Assert.IsTrue(retval is PointCollection, "GetValue(Polygon.PointsProperty) is not of the correct type");

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Polygon_PropertyGetter ()
		{
			Polygon widget = new Polygon ();

			Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");

			Assert.IsNotNull(widget.Points, "Points should not have returned null");
			Assert.IsTrue(widget.Points is PointCollection, "Points is not of the correct type");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Polyline_ReadLocalValue ()
		{
			Polyline widget = new Polyline ();
			object retval;

			retval = widget.ReadLocalValue(Polyline.FillRuleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polyline.FillRuleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Polyline.PointsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polyline.PointsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Polyline_GetValue ()
		{
			Polyline widget = new Polyline ();
			object retval;

			retval = widget.GetValue(Polyline.FillRuleProperty);
			Assert.IsNotNull(retval, "GetValue(Polyline.FillRuleProperty) should not have returned null");
			Assert.IsTrue(retval is FillRule, "GetValue(Polyline.FillRuleProperty) is not of the correct type");
			Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(Polyline.FillRuleProperty) does not match the default value");

			retval = widget.GetValue(Polyline.PointsProperty);
			Assert.IsNotNull(retval, "GetValue(Polyline.PointsProperty) should not have returned null");
			Assert.IsTrue(retval is PointCollection, "GetValue(Polyline.PointsProperty) is not of the correct type");

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Polyline_PropertyGetter ()
		{
			Polyline widget = new Polyline ();

			Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");

			Assert.IsNotNull(widget.Points, "Points should not have returned null");
			Assert.IsTrue(widget.Points is PointCollection, "Points is not of the correct type");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Rectangle_ReadLocalValue ()
		{
			Rectangle widget = new Rectangle ();
			object retval;

			retval = widget.ReadLocalValue(Rectangle.RadiusXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Rectangle.RadiusXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Rectangle.RadiusYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Rectangle.RadiusYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Shape.StretchProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Rectangle_GetValue ()
		{
			Rectangle widget = new Rectangle ();
			object retval;

			retval = widget.GetValue(Rectangle.RadiusXProperty);
			Assert.IsNotNull(retval, "GetValue(Rectangle.RadiusXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Rectangle.RadiusXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Rectangle.RadiusXProperty) does not match the default value");

			retval = widget.GetValue(Rectangle.RadiusYProperty);
			Assert.IsNotNull(retval, "GetValue(Rectangle.RadiusYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Rectangle.RadiusYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Rectangle.RadiusYProperty) does not match the default value");

			retval = widget.GetValue(Shape.FillProperty);
			Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeProperty);
			Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");

			retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
			Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeLineJoinProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineJoin, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
			Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashCapProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
			Assert.IsTrue(retval is PenLineCap, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
			Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");

			retval = widget.GetValue(Shape.StrokeDashArrayProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
			Assert.IsTrue(retval is DoubleCollection, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");

			retval = widget.GetValue(Shape.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Shape.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Fill, retval, "GetValue(Shape.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Rectangle_PropertyGetter ()
		{
			Rectangle widget = new Rectangle ();

			Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");

			Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNull(widget.Stroke, "Stroke should have returned null");

			Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");

			Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");

			Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");

			Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");

			Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");

			Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
			Assert.IsTrue(widget.StrokeDashArray is DoubleCollection, "StrokeDashArray is not of the correct type");

			Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");

			//Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
			//Assert.IsTrue(widget.GeometryTransform is MatrixTransform, "GeometryTransform is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Glyphs_ReadLocalValue ()
		{
			Glyphs widget = new Glyphs ();
			object retval;

			retval = widget.ReadLocalValue(Glyphs.UnicodeStringProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.UnicodeStringProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.IndicesProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.IndicesProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.FontUriProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FontUriProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.StyleSimulationsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.StyleSimulationsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.FontRenderingEmSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FontRenderingEmSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.OriginXProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.OriginXProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.OriginYProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.OriginYProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Glyphs.FillProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FillProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Glyphs_GetValue ()
		{
			Glyphs widget = new Glyphs ();
			object retval;

			retval = widget.GetValue(Glyphs.UnicodeStringProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.UnicodeStringProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(Glyphs.UnicodeStringProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(Glyphs.UnicodeStringProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.IndicesProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.IndicesProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(Glyphs.IndicesProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(Glyphs.IndicesProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.FontUriProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.FontUriProperty) should not have returned null");
			Assert.IsTrue(retval is Uri, "GetValue(Glyphs.FontUriProperty) is not of the correct type");
			Assert.AreEqual("", retval.ToString (), "GetValue(Glyphs.FontUriProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.StyleSimulationsProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.StyleSimulationsProperty) should not have returned null");
			Assert.IsTrue(retval is StyleSimulations, "GetValue(Glyphs.StyleSimulationsProperty) is not of the correct type");
			Assert.AreEqual(StyleSimulations.None, retval, "GetValue(Glyphs.StyleSimulationsProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.FontRenderingEmSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.FontRenderingEmSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Glyphs.FontRenderingEmSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Glyphs.FontRenderingEmSizeProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.OriginXProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.OriginXProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Glyphs.OriginXProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Glyphs.OriginXProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.OriginYProperty);
			Assert.IsNotNull(retval, "GetValue(Glyphs.OriginYProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Glyphs.OriginYProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Glyphs.OriginYProperty) does not match the default value");

			retval = widget.GetValue(Glyphs.FillProperty);
			Assert.IsNull(retval, "GetValue(Glyphs.FillProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Glyphs_PropertyGetter ()
		{
			Glyphs widget = new Glyphs ();

			Assert.IsNotNull(widget.UnicodeString, "UnicodeString should not have returned null");
			Assert.AreEqual("", widget.UnicodeString, "UnicodeString does not match the default value");

			Assert.IsNotNull(widget.Indices, "Indices should not have returned null");
			Assert.AreEqual("", widget.Indices, "Indices does not match the default value");

			Assert.IsNotNull(widget.FontUri, "FontUri should not have returned null");
			Assert.AreEqual("", widget.FontUri.ToString (), "FontUri does not match the default value");

			Assert.AreEqual(StyleSimulations.None, widget.StyleSimulations, "StyleSimulations does not match the default value");

			Assert.AreEqual((double) 0, widget.FontRenderingEmSize, "FontRenderingEmSize does not match the default value");

			Assert.AreEqual((double) 0, widget.OriginX, "OriginX does not match the default value");

			Assert.AreEqual((double) 0, widget.OriginY, "OriginY does not match the default value");

			Assert.IsNull(widget.Fill, "Fill should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Run_ReadLocalValue ()
		{
			Run widget = new Run ();
			object retval;

			retval = widget.ReadLocalValue(Inline.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
		}

		[TestMethod]
		public void Run_GetValue ()
		{
			Run widget = new Run ();
			object retval;

			retval = widget.GetValue(Inline.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Inline.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Inline.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Inline.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Inline.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Inline.ForegroundProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
			Assert.IsTrue(retval is SolidColorBrush, "GetValue(Inline.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Inline.TextDecorationsProperty);
			Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");

			retval = widget.GetValue(Inline.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(Inline.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
		}

		[TestMethod]
		public void Run_PropertyGetter ()
		{
			Run widget = new Run ();

			Assert.IsNull(widget.Text, "Text should have returned null");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
		}

		[TestMethod]
		public void LineBreak_ReadLocalValue ()
		{
			LineBreak widget = new LineBreak ();
			object retval;

			retval = widget.ReadLocalValue(Inline.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Inline.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
		}

		[TestMethod]
		public void LineBreak_GetValue ()
		{
			LineBreak widget = new LineBreak ();
			object retval;

			retval = widget.GetValue(Inline.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Inline.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Inline.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Inline.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Inline.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Inline.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Inline.ForegroundProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
			Assert.IsTrue(retval is SolidColorBrush, "GetValue(Inline.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Inline.TextDecorationsProperty);
			Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");

			retval = widget.GetValue(Inline.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(Inline.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
		}

		[TestMethod]
		public void LineBreak_PropertyGetter ()
		{
			LineBreak widget = new LineBreak ();

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
		}

		[TestMethod]
		public void Image_ReadLocalValue ()
		{
			Image widget = new Image ();
			object retval;

			retval = widget.ReadLocalValue(Image.SourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Image.SourceProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Image.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Image.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Image_GetValue ()
		{
			Image widget = new Image ();
			object retval;

			retval = widget.GetValue(Image.SourceProperty);
			Assert.IsNotNull(retval, "GetValue(Image.SourceProperty) should not have returned null");
			Assert.IsTrue(retval is BitmapImage, "GetValue(Image.SourceProperty) is not of the correct type");

			retval = widget.GetValue(Image.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(Image.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(Image.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Uniform, retval, "GetValue(Image.StretchProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Image_PropertyGetter ()
		{
			Image widget = new Image ();

			Assert.AreEqual(Stretch.Uniform, widget.Stretch, "Stretch does not match the default value");

			Assert.IsNotNull(widget.Source, "Source should not have returned null");
			Assert.IsTrue(widget.Source is BitmapImage, "Source is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Canvas_ReadLocalValue ()
		{
			Canvas widget = new Canvas ();
			object retval;

			retval = widget.ReadLocalValue(Canvas.LeftProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.LeftProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Canvas.TopProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.TopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Canvas.ZIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.ZIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Panel.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Canvas_GetValue ()
		{
			Canvas widget = new Canvas ();
			object retval;

			retval = widget.GetValue(Canvas.LeftProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.LeftProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Canvas.LeftProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Canvas.LeftProperty) does not match the default value");

			retval = widget.GetValue(Canvas.TopProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.TopProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Canvas.TopProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Canvas.TopProperty) does not match the default value");

			retval = widget.GetValue(Canvas.ZIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.ZIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Canvas.ZIndexProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(Canvas.ZIndexProperty) does not match the default value");

			retval = widget.GetValue(Panel.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Canvas_PropertyGetter ()
		{
			Canvas widget = new Canvas ();

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is UIElementCollection, "Children is not of the correct type");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void TextBlock_ReadLocalValue ()
		{
			TextBlock widget = new TextBlock ();
			object retval;

			retval = widget.ReadLocalValue(TextBlock.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.TextDecorationsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextDecorationsProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.TextWrappingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextWrappingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.TextAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.TextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.LineHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.LineHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBlock.LineStackingStrategyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.LineStackingStrategyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void TextBlock_GetValue ()
		{
			TextBlock widget = new TextBlock ();
			object retval;

			retval = widget.GetValue(TextBlock.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(TextBlock.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(TextBlock.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(TextBlock.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextBlock.FontFamilyProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(TextBlock.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(TextBlock.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(TextBlock.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontStretchProperty) does not match the default value");

			//retval = widget.GetValue(TextBlock.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(TextBlock.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(TextBlock.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(TextBlock.TextDecorationsProperty);
			Assert.IsNull(retval, "GetValue(TextBlock.TextDecorationsProperty) should have returned null");

			retval = widget.GetValue(TextBlock.TextWrappingProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.TextWrappingProperty) should not have returned null");
			Assert.IsTrue(retval is TextWrapping, "GetValue(TextBlock.TextWrappingProperty) is not of the correct type");
			Assert.AreEqual(TextWrapping.NoWrap, retval, "GetValue(TextBlock.TextWrappingProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.TextAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.TextAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is TextAlignment, "GetValue(TextBlock.TextAlignmentProperty) is not of the correct type");
			Assert.AreEqual(TextAlignment.Left, retval, "GetValue(TextBlock.TextAlignmentProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.TextProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.TextProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(TextBlock.TextProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(TextBlock.TextProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(TextBlock.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(TextBlock.PaddingProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.LineHeightProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.LineHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(TextBlock.LineHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(TextBlock.LineHeightProperty) does not match the default value");

			retval = widget.GetValue(TextBlock.LineStackingStrategyProperty);
			Assert.IsNotNull(retval, "GetValue(TextBlock.LineStackingStrategyProperty) should not have returned null");
			Assert.IsTrue(retval is LineStackingStrategy, "GetValue(TextBlock.LineStackingStrategyProperty) is not of the correct type");
			Assert.AreEqual(LineStackingStrategy.MaxHeight, retval, "GetValue(TextBlock.LineStackingStrategyProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			//retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			//Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			//Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			//Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void TextBlock_PropertyGetter ()
		{
			TextBlock widget = new TextBlock ();

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.AreEqual(TextWrapping.NoWrap, widget.TextWrapping, "TextWrapping does not match the default value");

			Assert.AreEqual(TextAlignment.Left, widget.TextAlignment, "TextAlignment does not match the default value");

			Assert.IsNotNull(widget.Text, "Text should not have returned null");
			Assert.AreEqual("", widget.Text, "Text does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual((double) 0, widget.LineHeight, "LineHeight does not match the default value");

			Assert.AreEqual(LineStackingStrategy.MaxHeight, widget.LineStackingStrategy, "LineStackingStrategy does not match the default value");

			Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");

			Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
			Assert.IsTrue(widget.Inlines is InlineCollection, "Inlines is not of the correct type");

			Assert.IsNull(widget.FontSource, "FontSource should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			//Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void MediaElement_ReadLocalValue ()
		{
			MediaElement widget = new MediaElement ();
			object retval;

			retval = widget.ReadLocalValue(MediaElement.SourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.SourceProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.StretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.StretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.IsMutedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.IsMutedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.AutoPlayProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AutoPlayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.VolumeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.VolumeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.BalanceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.BalanceProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.NaturalVideoHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalVideoHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.NaturalVideoWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalVideoWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.NaturalDurationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalDurationProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(MediaElement.PositionProperty);
			//Assert.IsNotNull(retval, "ReadLocalValue(MediaElement.PositionProperty) should not have returned null");
			//Assert.IsTrue(retval is TimeSpan, "ReadLocalValue(MediaElement.PositionProperty) is not of the correct type");
			//Assert.AreEqual("00:00:00", retval.ToString (), "ReadLocalValue(MediaElement.PositionProperty) does not match the default value");

			retval = widget.ReadLocalValue(MediaElement.DownloadProgressProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DownloadProgressProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.BufferingProgressProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.BufferingProgressProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.DownloadProgressOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DownloadProgressOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.CurrentStateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CurrentStateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.BufferingTimeProperty);
			Assert.IsNotNull(retval, "ReadLocalValue(MediaElement.BufferingTimeProperty) should not have returned null");
			Assert.IsTrue(retval is TimeSpan, "ReadLocalValue(MediaElement.BufferingTimeProperty) is not of the correct type");
			Assert.AreEqual("00:00:05", retval.ToString (), "ReadLocalValue(MediaElement.BufferingTimeProperty) does not match the default value");

			retval = widget.ReadLocalValue(MediaElement.CanSeekProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CanSeekProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.CanPauseProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CanPauseProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.AudioStreamCountProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AudioStreamCountProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.AudioStreamIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AudioStreamIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.RenderedFramesPerSecondProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.RenderedFramesPerSecondProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MediaElement.DroppedFramesPerSecondProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DroppedFramesPerSecondProperty) should not have a value by default");

			// [MoonlightBug] - Moonlight needs to be fixed to throw on some ReadLocalValue invocations
			//Assert.Throws<Exception>(delegate {
			//	retval = widget.ReadLocalValue(MediaElement.AttributesProperty);
			//}, "ReadLocalValue(MediaElement.AttributesProperty) should thow an exception");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void MediaElement_GetValue ()
		{
			MediaElement widget = new MediaElement ();
			object retval;

			retval = widget.GetValue(MediaElement.SourceProperty);
			Assert.IsNull(retval, "GetValue(MediaElement.SourceProperty) should have returned null");

			retval = widget.GetValue(MediaElement.StretchProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.StretchProperty) should not have returned null");
			Assert.IsTrue(retval is Stretch, "GetValue(MediaElement.StretchProperty) is not of the correct type");
			Assert.AreEqual(Stretch.Uniform, retval, "GetValue(MediaElement.StretchProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.IsMutedProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.IsMutedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(MediaElement.IsMutedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(MediaElement.IsMutedProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.AutoPlayProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.AutoPlayProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(MediaElement.AutoPlayProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(MediaElement.AutoPlayProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.VolumeProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.VolumeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.VolumeProperty) is not of the correct type");
			Assert.AreEqual((double) 0.5, retval, "GetValue(MediaElement.VolumeProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.BalanceProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.BalanceProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.BalanceProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.BalanceProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.NaturalVideoHeightProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalVideoHeightProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(MediaElement.NaturalVideoHeightProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(MediaElement.NaturalVideoHeightProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.NaturalVideoWidthProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalVideoWidthProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(MediaElement.NaturalVideoWidthProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(MediaElement.NaturalVideoWidthProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.NaturalDurationProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalDurationProperty) should not have returned null");
			Assert.IsTrue(retval is Duration, "GetValue(MediaElement.NaturalDurationProperty) is not of the correct type");
			Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(MediaElement.NaturalDurationProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.PositionProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.PositionProperty) should not have returned null");
			Assert.IsTrue(retval is TimeSpan, "GetValue(MediaElement.PositionProperty) is not of the correct type");
			Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(MediaElement.PositionProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.DownloadProgressProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.DownloadProgressProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.DownloadProgressProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DownloadProgressProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.BufferingProgressProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.BufferingProgressProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.BufferingProgressProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.BufferingProgressProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.DownloadProgressOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.DownloadProgressOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.DownloadProgressOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DownloadProgressOffsetProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.CurrentStateProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.CurrentStateProperty) should not have returned null");
			Assert.IsTrue(retval is MediaElementState, "GetValue(MediaElement.CurrentStateProperty) is not of the correct type");
			Assert.AreEqual(MediaElementState.Closed, retval, "GetValue(MediaElement.CurrentStateProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.BufferingTimeProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.BufferingTimeProperty) should not have returned null");
			Assert.IsTrue(retval is TimeSpan, "GetValue(MediaElement.BufferingTimeProperty) is not of the correct type");
			Assert.AreEqual("00:00:05", retval.ToString (), "GetValue(MediaElement.BufferingTimeProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.CanSeekProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.CanSeekProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(MediaElement.CanSeekProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(MediaElement.CanSeekProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.CanPauseProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.CanPauseProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(MediaElement.CanPauseProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(MediaElement.CanPauseProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.AudioStreamCountProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.AudioStreamCountProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(MediaElement.AudioStreamCountProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(MediaElement.AudioStreamCountProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.AudioStreamIndexProperty);
			Assert.IsNull(retval, "GetValue(MediaElement.AudioStreamIndexProperty) should have returned null");

			retval = widget.GetValue(MediaElement.RenderedFramesPerSecondProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.RenderedFramesPerSecondProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.RenderedFramesPerSecondProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.RenderedFramesPerSecondProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.DroppedFramesPerSecondProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.DroppedFramesPerSecondProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MediaElement.DroppedFramesPerSecondProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DroppedFramesPerSecondProperty) does not match the default value");

			retval = widget.GetValue(MediaElement.AttributesProperty);
			Assert.IsNotNull(retval, "GetValue(MediaElement.AttributesProperty) should not have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void MediaElement_PropertyGetter ()
		{
			MediaElement widget = new MediaElement ();

			Assert.IsNull(widget.Source, "Source should have returned null");

			Assert.AreEqual(Stretch.Uniform, widget.Stretch, "Stretch does not match the default value");

			Assert.AreEqual(false, widget.IsMuted, "IsMuted does not match the default value");

			Assert.AreEqual(true, widget.AutoPlay, "AutoPlay does not match the default value");

			Assert.AreEqual((double) 0.5, widget.Volume, "Volume does not match the default value");

			Assert.AreEqual((double) 0, widget.Balance, "Balance does not match the default value");

			Assert.AreEqual(0, widget.NaturalVideoHeight, "NaturalVideoHeight does not match the default value");

			Assert.AreEqual(0, widget.NaturalVideoWidth, "NaturalVideoWidth does not match the default value");

			Assert.AreEqual("00:00:00", widget.NaturalDuration.ToString (), "NaturalDuration does not match the default value");

			Assert.AreEqual("00:00:00", widget.Position.ToString (), "Position does not match the default value");

			Assert.AreEqual((double) 0, widget.DownloadProgress, "DownloadProgress does not match the default value");

			Assert.AreEqual((double) 0, widget.BufferingProgress, "BufferingProgress does not match the default value");

			Assert.AreEqual((double) 0, widget.DownloadProgressOffset, "DownloadProgressOffset does not match the default value");

			Assert.AreEqual(MediaElementState.Closed, widget.CurrentState, "CurrentState does not match the default value");

			Assert.AreEqual("00:00:05", widget.BufferingTime.ToString (), "BufferingTime does not match the default value");

			Assert.IsNotNull(widget.Markers, "Markers should not have returned null");
			Assert.IsTrue(widget.Markers is TimelineMarkerCollection, "Markers is not of the correct type");

			Assert.AreEqual(false, widget.CanSeek, "CanSeek does not match the default value");

			Assert.AreEqual(false, widget.CanPause, "CanPause does not match the default value");

			Assert.AreEqual(0, widget.AudioStreamCount, "AudioStreamCount does not match the default value");

			Assert.IsNull(widget.AudioStreamIndex, "AudioStreamIndex should have returned null");

			Assert.AreEqual((double) 0, widget.RenderedFramesPerSecond, "RenderedFramesPerSecond does not match the default value");

			Assert.AreEqual((double) 0, widget.DroppedFramesPerSecond, "DroppedFramesPerSecond does not match the default value");

			Assert.IsNotNull(widget.Attributes, "Attributes should not have returned null");

			//Assert.IsNotNull(widget.LicenseAcquirer, "LicenseAcquirer should not have returned null");
			//Assert.AreEqual("System.Windows.Media.LicenseAcquirer", widget.LicenseAcquirer.ToString (), "LicenseAcquirer does not match the default value");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void InkPresenter_ReadLocalValue ()
		{
			InkPresenter widget = new InkPresenter ();
			object retval;

			retval = widget.ReadLocalValue(InkPresenter.StrokesProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(InkPresenter.StrokesProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Canvas.LeftProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.LeftProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Canvas.TopProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.TopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Canvas.ZIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.ZIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Panel.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void InkPresenter_GetValue ()
		{
			InkPresenter widget = new InkPresenter ();
			object retval;

			retval = widget.GetValue(InkPresenter.StrokesProperty);
			Assert.IsNotNull(retval, "GetValue(InkPresenter.StrokesProperty) should not have returned null");
			Assert.IsTrue(retval is StrokeCollection, "GetValue(InkPresenter.StrokesProperty) is not of the correct type");

			retval = widget.GetValue(Canvas.LeftProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.LeftProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Canvas.LeftProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Canvas.LeftProperty) does not match the default value");

			retval = widget.GetValue(Canvas.TopProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.TopProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Canvas.TopProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Canvas.TopProperty) does not match the default value");

			retval = widget.GetValue(Canvas.ZIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Canvas.ZIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Canvas.ZIndexProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(Canvas.ZIndexProperty) does not match the default value");

			retval = widget.GetValue(Panel.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void InkPresenter_PropertyGetter ()
		{
			InkPresenter widget = new InkPresenter ();

			Assert.IsNotNull(widget.Strokes, "Strokes should not have returned null");
			Assert.IsTrue(widget.Strokes is StrokeCollection, "Strokes is not of the correct type");

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is UIElementCollection, "Children is not of the correct type");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void MultiScaleImage_ReadLocalValue ()
		{
			MultiScaleImage widget = new MultiScaleImage ();
			object retval;

			retval = widget.ReadLocalValue(MultiScaleImage.SourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.SourceProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleImage.ViewportOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.ViewportOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleImage.ViewportWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.ViewportWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleImage.AspectRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.AspectRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleImage.UseSpringsProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.UseSpringsProperty) should not have a value by default");

			// [MoonlightBug] - Moonlight needs to be fixed to throw on some ReadLocalValue invocations
			//Assert.Throws<Exception>(delegate {
			//	retval = widget.ReadLocalValue(MultiScaleImage.SubImagesProperty);
			//}, "ReadLocalValue(MultiScaleImage.SubImagesProperty) should thow an exception");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void MultiScaleImage_GetValue ()
		{
			MultiScaleImage widget = new MultiScaleImage ();
			object retval;

			retval = widget.GetValue(MultiScaleImage.SourceProperty);
			Assert.IsNull(retval, "GetValue(MultiScaleImage.SourceProperty) should have returned null");

			retval = widget.GetValue(MultiScaleImage.ViewportOriginProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleImage.ViewportOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(MultiScaleImage.ViewportOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(MultiScaleImage.ViewportOriginProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleImage.ViewportWidthProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleImage.ViewportWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MultiScaleImage.ViewportWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleImage.ViewportWidthProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleImage.AspectRatioProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleImage.AspectRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MultiScaleImage.AspectRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleImage.AspectRatioProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleImage.UseSpringsProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleImage.UseSpringsProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(MultiScaleImage.UseSpringsProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(MultiScaleImage.UseSpringsProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleImage.SubImagesProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleImage.SubImagesProperty) should not have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void MultiScaleImage_PropertyGetter ()
		{
			MultiScaleImage widget = new MultiScaleImage ();

			Assert.IsNull(widget.Source, "Source should have returned null");

			Assert.AreEqual("0,0", widget.ViewportOrigin.ToString (), "ViewportOrigin does not match the default value");

			Assert.AreEqual((double) 1, widget.ViewportWidth, "ViewportWidth does not match the default value");

			Assert.AreEqual((double) 1, widget.AspectRatio, "AspectRatio does not match the default value");

			Assert.AreEqual(true, widget.UseSprings, "UseSprings does not match the default value");

			Assert.IsNotNull(widget.SubImages, "SubImages should not have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void MultiScaleSubImage_ReadLocalValue ()
		{
			MultiScaleSubImage widget = new MultiScaleSubImage ();
			object retval;

			retval = widget.ReadLocalValue(MultiScaleSubImage.ViewportOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ViewportOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleSubImage.ViewportWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ViewportWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleSubImage.AspectRatioProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.AspectRatioProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleSubImage.ZIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ZIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(MultiScaleSubImage.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.OpacityProperty) should not have a value by default");
		}

		[TestMethod]
		public void MultiScaleSubImage_GetValue ()
		{
			MultiScaleSubImage widget = new MultiScaleSubImage ();
			object retval;

			retval = widget.GetValue(MultiScaleSubImage.ViewportOriginProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ViewportOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(MultiScaleSubImage.ViewportOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(MultiScaleSubImage.ViewportOriginProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleSubImage.ViewportWidthProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ViewportWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MultiScaleSubImage.ViewportWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.ViewportWidthProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleSubImage.AspectRatioProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.AspectRatioProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MultiScaleSubImage.AspectRatioProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.AspectRatioProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleSubImage.ZIndexProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ZIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(MultiScaleSubImage.ZIndexProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(MultiScaleSubImage.ZIndexProperty) does not match the default value");

			retval = widget.GetValue(MultiScaleSubImage.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(MultiScaleSubImage.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.OpacityProperty) does not match the default value");
		}

		[TestMethod]
		public void MultiScaleSubImage_PropertyGetter ()
		{
			MultiScaleSubImage widget = new MultiScaleSubImage ();

			Assert.AreEqual("0,0", widget.ViewportOrigin.ToString (), "ViewportOrigin does not match the default value");

			Assert.AreEqual((double) 1, widget.ViewportWidth, "ViewportWidth does not match the default value");

			Assert.AreEqual((double) 1, widget.AspectRatio, "AspectRatio does not match the default value");

			Assert.AreEqual(0, widget.ZIndex, "ZIndex does not match the default value");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
		}

		[TestMethod]
		public void StackPanel_ReadLocalValue ()
		{
			StackPanel widget = new StackPanel ();
			object retval;

			retval = widget.ReadLocalValue(StackPanel.OrientationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(StackPanel.OrientationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Panel.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void StackPanel_GetValue ()
		{
			StackPanel widget = new StackPanel ();
			object retval;

			retval = widget.GetValue(StackPanel.OrientationProperty);
			Assert.IsNotNull(retval, "GetValue(StackPanel.OrientationProperty) should not have returned null");
			Assert.IsTrue(retval is Orientation, "GetValue(StackPanel.OrientationProperty) is not of the correct type");
			Assert.AreEqual(Orientation.Vertical, retval, "GetValue(StackPanel.OrientationProperty) does not match the default value");

			retval = widget.GetValue(Panel.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void StackPanel_PropertyGetter ()
		{
			StackPanel widget = new StackPanel ();

			Assert.AreEqual(Orientation.Vertical, widget.Orientation, "Orientation does not match the default value");

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is UIElementCollection, "Children is not of the correct type");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void TextBox_ReadLocalValue ()
		{
			TextBox widget = new TextBox ();
			object retval;

			retval = widget.ReadLocalValue(TextBox.TextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.MaxLengthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.MaxLengthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.IsReadOnlyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.IsReadOnlyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.AcceptsReturnProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.AcceptsReturnProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.SelectionBackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.SelectionBackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.SelectionForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.SelectionForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.TextAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(TextBox.TextWrappingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextWrappingProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void TextBox_GetValue ()
		{
			TextBox widget = new TextBox ();
			object retval;

			retval = widget.GetValue(TextBox.TextProperty);
			Assert.IsNull(retval, "GetValue(TextBox.TextProperty) should have returned null");

			retval = widget.GetValue(TextBox.MaxLengthProperty);
			Assert.IsNotNull(retval, "GetValue(TextBox.MaxLengthProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(TextBox.MaxLengthProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(TextBox.MaxLengthProperty) does not match the default value");

			retval = widget.GetValue(TextBox.IsReadOnlyProperty);
			Assert.IsNotNull(retval, "GetValue(TextBox.IsReadOnlyProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(TextBox.IsReadOnlyProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(TextBox.IsReadOnlyProperty) does not match the default value");

			retval = widget.GetValue(TextBox.AcceptsReturnProperty);
			Assert.IsNotNull(retval, "GetValue(TextBox.AcceptsReturnProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(TextBox.AcceptsReturnProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(TextBox.AcceptsReturnProperty) does not match the default value");

			retval = widget.GetValue(TextBox.SelectionBackgroundProperty);
			Assert.IsNull(retval, "GetValue(TextBox.SelectionBackgroundProperty) should have returned null");

			retval = widget.GetValue(TextBox.SelectionForegroundProperty);
			Assert.IsNull(retval, "GetValue(TextBox.SelectionForegroundProperty) should have returned null");

			retval = widget.GetValue(TextBox.TextAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(TextBox.TextAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is TextAlignment, "GetValue(TextBox.TextAlignmentProperty) is not of the correct type");
			Assert.AreEqual(TextAlignment.Left, retval, "GetValue(TextBox.TextAlignmentProperty) does not match the default value");

			retval = widget.GetValue(TextBox.TextWrappingProperty);
			Assert.IsNotNull(retval, "GetValue(TextBox.TextWrappingProperty) should not have returned null");
			Assert.IsTrue(retval is TextWrapping, "GetValue(TextBox.TextWrappingProperty) is not of the correct type");
			Assert.AreEqual(TextWrapping.NoWrap, retval, "GetValue(TextBox.TextWrappingProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void TextBox_PropertyGetter ()
		{
			TextBox widget = new TextBox ();

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(false, widget.AcceptsReturn, "AcceptsReturn does not match the default value");

			Assert.IsNull(widget.SelectionBackground, "SelectionBackground should have returned null");

			Assert.IsNull(widget.SelectionForeground, "SelectionForeground should have returned null");

			Assert.AreEqual(TextAlignment.Left, widget.TextAlignment, "TextAlignment does not match the default value");

			Assert.AreEqual(TextWrapping.NoWrap, widget.TextWrapping, "TextWrapping does not match the default value");

			Assert.IsNull(widget.FontSource, "FontSource should have returned null");

			//Assert.IsNotNull(widget.Text, "Text should not have returned null");
			//Assert.AreEqual("", widget.Text, "Text does not match the default value");

			Assert.IsNotNull(widget.SelectedText, "SelectedText should not have returned null");
			Assert.AreEqual("", widget.SelectedText, "SelectedText does not match the default value");

			Assert.AreEqual(0, widget.SelectionLength, "SelectionLength does not match the default value");

			Assert.AreEqual(0, widget.SelectionStart, "SelectionStart does not match the default value");

			Assert.AreEqual(0, widget.MaxLength, "MaxLength does not match the default value");

			Assert.AreEqual(ScrollBarVisibility.Hidden, widget.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility does not match the default value");

			Assert.AreEqual(ScrollBarVisibility.Hidden, widget.VerticalScrollBarVisibility, "VerticalScrollBarVisibility does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void PasswordBox_ReadLocalValue ()
		{
			PasswordBox widget = new PasswordBox ();
			object retval;

			retval = widget.ReadLocalValue(PasswordBox.MaxLengthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.MaxLengthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PasswordBox.SelectionBackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.SelectionBackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PasswordBox.SelectionForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.SelectionForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(PasswordBox.PasswordCharProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.PasswordCharProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void PasswordBox_GetValue ()
		{
			PasswordBox widget = new PasswordBox ();
			object retval;

			retval = widget.GetValue(PasswordBox.MaxLengthProperty);
			Assert.IsNotNull(retval, "GetValue(PasswordBox.MaxLengthProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(PasswordBox.MaxLengthProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(PasswordBox.MaxLengthProperty) does not match the default value");

			retval = widget.GetValue(PasswordBox.SelectionBackgroundProperty);
			Assert.IsNull(retval, "GetValue(PasswordBox.SelectionBackgroundProperty) should have returned null");

			retval = widget.GetValue(PasswordBox.SelectionForegroundProperty);
			Assert.IsNull(retval, "GetValue(PasswordBox.SelectionForegroundProperty) should have returned null");

			retval = widget.GetValue(PasswordBox.PasswordCharProperty);
			Assert.IsNotNull(retval, "GetValue(PasswordBox.PasswordCharProperty) should not have returned null");
			Assert.IsTrue(retval is char, "GetValue(PasswordBox.PasswordCharProperty) is not of the correct type");
			Assert.AreEqual("●", retval.ToString (), "GetValue(PasswordBox.PasswordCharProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void PasswordBox_PropertyGetter ()
		{
			PasswordBox widget = new PasswordBox ();

			Assert.IsNull(widget.SelectionBackground, "SelectionBackground should have returned null");

			Assert.IsNull(widget.SelectionForeground, "SelectionForeground should have returned null");

			//Assert.IsNull(widget.FontSource, "FontSource should have returned null");

			Assert.IsNotNull(widget.Password, "Password should not have returned null");
			Assert.AreEqual("", widget.Password, "Password does not match the default value");

			Assert.AreEqual("●", widget.PasswordChar.ToString (), "PasswordChar does not match the default value");

			Assert.AreEqual(0, widget.MaxLength, "MaxLength does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void RowDefinition_ReadLocalValue ()
		{
			RowDefinition widget = new RowDefinition ();
			object retval;

			retval = widget.ReadLocalValue(RowDefinition.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RowDefinition.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RowDefinition.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.MinHeightProperty) should not have a value by default");
		}

		[TestMethod]
		public void RowDefinition_GetValue ()
		{
			RowDefinition widget = new RowDefinition ();
			object retval;

			retval = widget.GetValue(RowDefinition.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(RowDefinition.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is GridLength, "GetValue(RowDefinition.HeightProperty) is not of the correct type");
			Assert.AreEqual("1*", retval.ToString (), "GetValue(RowDefinition.HeightProperty) does not match the default value");

			retval = widget.GetValue(RowDefinition.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(RowDefinition.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RowDefinition.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(RowDefinition.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(RowDefinition.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(RowDefinition.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RowDefinition.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RowDefinition.MinHeightProperty) does not match the default value");
		}

		[TestMethod]
		public void RowDefinition_PropertyGetter ()
		{
			RowDefinition widget = new RowDefinition ();

			Assert.AreEqual("1*", widget.Height.ToString (), "Height does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
		}

		[TestMethod]
		public void ColumnDefinition_ReadLocalValue ()
		{
			ColumnDefinition widget = new ColumnDefinition ();
			object retval;

			retval = widget.ReadLocalValue(ColumnDefinition.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColumnDefinition.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ColumnDefinition.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.MinWidthProperty) should not have a value by default");
		}

		[TestMethod]
		public void ColumnDefinition_GetValue ()
		{
			ColumnDefinition widget = new ColumnDefinition ();
			object retval;

			retval = widget.GetValue(ColumnDefinition.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(ColumnDefinition.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is GridLength, "GetValue(ColumnDefinition.WidthProperty) is not of the correct type");
			Assert.AreEqual("1*", retval.ToString (), "GetValue(ColumnDefinition.WidthProperty) does not match the default value");

			retval = widget.GetValue(ColumnDefinition.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(ColumnDefinition.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ColumnDefinition.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(ColumnDefinition.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(ColumnDefinition.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(ColumnDefinition.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ColumnDefinition.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ColumnDefinition.MinWidthProperty) does not match the default value");
		}

		[TestMethod]
		public void ColumnDefinition_PropertyGetter ()
		{
			ColumnDefinition widget = new ColumnDefinition ();

			Assert.AreEqual("1*", widget.Width.ToString (), "Width does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
		}

		[TestMethod]
		public void Grid_ReadLocalValue ()
		{
			Grid widget = new Grid ();
			object retval;

			retval = widget.ReadLocalValue(Grid.ShowGridLinesProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ShowGridLinesProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Grid.RowProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.RowProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Grid.ColumnProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ColumnProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Grid.RowSpanProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.RowSpanProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Grid.ColumnSpanProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ColumnSpanProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Panel.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Grid_GetValue ()
		{
			Grid widget = new Grid ();
			object retval;

			retval = widget.GetValue(Grid.ShowGridLinesProperty);
			Assert.IsNotNull(retval, "GetValue(Grid.ShowGridLinesProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Grid.ShowGridLinesProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Grid.ShowGridLinesProperty) does not match the default value");

			retval = widget.GetValue(Grid.RowProperty);
			Assert.IsNotNull(retval, "GetValue(Grid.RowProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Grid.RowProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(Grid.RowProperty) does not match the default value");

			retval = widget.GetValue(Grid.ColumnProperty);
			Assert.IsNotNull(retval, "GetValue(Grid.ColumnProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Grid.ColumnProperty) is not of the correct type");
			Assert.AreEqual(0, retval, "GetValue(Grid.ColumnProperty) does not match the default value");

			retval = widget.GetValue(Grid.RowSpanProperty);
			Assert.IsNotNull(retval, "GetValue(Grid.RowSpanProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Grid.RowSpanProperty) is not of the correct type");
			Assert.AreEqual(1, retval, "GetValue(Grid.RowSpanProperty) does not match the default value");

			retval = widget.GetValue(Grid.ColumnSpanProperty);
			Assert.IsNotNull(retval, "GetValue(Grid.ColumnSpanProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Grid.ColumnSpanProperty) is not of the correct type");
			Assert.AreEqual(1, retval, "GetValue(Grid.ColumnSpanProperty) does not match the default value");

			retval = widget.GetValue(Panel.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Grid_PropertyGetter ()
		{
			Grid widget = new Grid ();

			Assert.IsNotNull(widget.RowDefinitions, "RowDefinitions should not have returned null");
			Assert.IsTrue(widget.RowDefinitions is RowDefinitionCollection, "RowDefinitions is not of the correct type");

			Assert.IsNotNull(widget.ColumnDefinitions, "ColumnDefinitions should not have returned null");
			Assert.IsTrue(widget.ColumnDefinitions is ColumnDefinitionCollection, "ColumnDefinitions is not of the correct type");

			Assert.AreEqual(true, widget.ShowGridLines, "ShowGridLines does not match the default value");

			Assert.IsNotNull(widget.Children, "Children should not have returned null");
			Assert.IsTrue(widget.Children is UIElementCollection, "Children is not of the correct type");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ControlTemplate_PropertyGetter ()
		{
			ControlTemplate widget = new ControlTemplate ();

			Assert.IsNull(widget.TargetType, "TargetType should have returned null");
		}

		[TestMethod]
		public void ItemsControl_ReadLocalValue ()
		{
			ItemsControl widget = new ItemsControl ();
			object retval;

			retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ItemsControl_GetValue ()
		{
			ItemsControl widget = new ItemsControl ();
			object retval;

			retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ItemsControl_PropertyGetter ()
		{
			ItemsControl widget = new ItemsControl ();

			Assert.IsNotNull(widget.Items, "Items should not have returned null");
			Assert.IsTrue(widget.Items is ItemCollection, "Items is not of the correct type");

			Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");

			Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");

			Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");

			Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Border_ReadLocalValue ()
		{
			Border widget = new Border ();
			object retval;

			retval = widget.ReadLocalValue(Border.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Border.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Border.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Border.CornerRadiusProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.CornerRadiusProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Border.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Border_GetValue ()
		{
			Border widget = new Border ();
			object retval;

			retval = widget.GetValue(Border.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Border.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Border.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Border.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Border.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Border.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Border.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Border.CornerRadiusProperty);
			Assert.IsNotNull(retval, "GetValue(Border.CornerRadiusProperty) should not have returned null");
			Assert.IsTrue(retval is CornerRadius, "GetValue(Border.CornerRadiusProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.CornerRadiusProperty) does not match the default value");

			retval = widget.GetValue(Border.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Border.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Border.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.PaddingProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Border_PropertyGetter ()
		{
			Border widget = new Border ();

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.AreEqual("0,0,0,0", widget.CornerRadius.ToString (), "CornerRadius does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.IsNull(widget.Child, "Child should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ContentControl_ReadLocalValue ()
		{
			ContentControl widget = new ContentControl ();
			object retval;

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ContentControl_GetValue ()
		{
			ContentControl widget = new ContentControl ();
			object retval;

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ContentControl_PropertyGetter ()
		{
			ContentControl widget = new ContentControl ();

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ContentPresenter_ReadLocalValue ()
		{
			ContentPresenter widget = new ContentPresenter ();
			object retval;

			retval = widget.ReadLocalValue(ContentPresenter.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentPresenter.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ContentPresenter_GetValue ()
		{
			ContentPresenter widget = new ContentPresenter ();
			object retval;

			retval = widget.GetValue(ContentPresenter.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentPresenter.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentPresenter.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentPresenter.ContentProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ContentPresenter_PropertyGetter ()
		{
			ContentPresenter widget = new ContentPresenter ();

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ItemsPresenter_ReadLocalValue ()
		{
			ItemsPresenter widget = new ItemsPresenter ();
			object retval;

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ItemsPresenter_GetValue ()
		{
			ItemsPresenter widget = new ItemsPresenter ();
			object retval;

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ItemsPresenter_PropertyGetter ()
		{
			ItemsPresenter widget = new ItemsPresenter ();

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void BitmapImage_ReadLocalValue ()
		{
			BitmapImage widget = new BitmapImage ();
			object retval;

			retval = widget.ReadLocalValue(BitmapImage.UriSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapImage.UriSourceProperty) should not have a value by default");
		}

		[TestMethod]
		public void BitmapImage_GetValue ()
		{
			BitmapImage widget = new BitmapImage ();
			object retval;

			retval = widget.GetValue(BitmapImage.UriSourceProperty);
			Assert.IsNotNull(retval, "GetValue(BitmapImage.UriSourceProperty) should not have returned null");
			Assert.IsTrue(retval is Uri, "GetValue(BitmapImage.UriSourceProperty) is not of the correct type");
			Assert.AreEqual("", retval.ToString (), "GetValue(BitmapImage.UriSourceProperty) does not match the default value");
		}

		[TestMethod]
		public void BitmapImage_PropertyGetter ()
		{
			BitmapImage widget = new BitmapImage ();

			Assert.IsNotNull(widget.UriSource, "UriSource should not have returned null");
			Assert.AreEqual("", widget.UriSource.ToString (), "UriSource does not match the default value");
		}

		[TestMethod]
		public void Popup_ReadLocalValue ()
		{
			Popup widget = new Popup ();
			object retval;

			retval = widget.ReadLocalValue(Popup.ChildProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.ChildProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Popup.IsOpenProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.IsOpenProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Popup.HorizontalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.HorizontalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Popup.VerticalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.VerticalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Popup_GetValue ()
		{
			Popup widget = new Popup ();
			object retval;

			retval = widget.GetValue(Popup.ChildProperty);
			Assert.IsNull(retval, "GetValue(Popup.ChildProperty) should have returned null");

			retval = widget.GetValue(Popup.IsOpenProperty);
			Assert.IsNotNull(retval, "GetValue(Popup.IsOpenProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Popup.IsOpenProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Popup.IsOpenProperty) does not match the default value");

			retval = widget.GetValue(Popup.HorizontalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Popup.HorizontalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Popup.HorizontalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Popup.HorizontalOffsetProperty) does not match the default value");

			retval = widget.GetValue(Popup.VerticalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(Popup.VerticalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Popup.VerticalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(Popup.VerticalOffsetProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Popup_PropertyGetter ()
		{
			Popup widget = new Popup ();

			Assert.IsNull(widget.Child, "Child should have returned null");

			Assert.AreEqual(false, widget.IsOpen, "IsOpen does not match the default value");

			Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");

			Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void UserControl_ReadLocalValue ()
		{
			UserControl widget = new UserControl ();
			object retval;

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void UserControl_GetValue ()
		{
			UserControl widget = new UserControl ();
			object retval;

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void UserControl_PropertyGetter ()
		{
			UserControl widget = new UserControl ();

			Assert.AreEqual(false, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Button_ReadLocalValue ()
		{
			Button widget = new Button ();
			object retval;

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Button_GetValue ()
		{
			Button widget = new Button ();
			object retval;

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Button_PropertyGetter ()
		{
			Button widget = new Button ();

			Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ToggleButton_ReadLocalValue ()
		{
			ToggleButton widget = new ToggleButton ();
			object retval;

			retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ToggleButton_GetValue ()
		{
			ToggleButton widget = new ToggleButton ();
			object retval;

			retval = widget.GetValue(ToggleButton.IsCheckedProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");

			retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ToggleButton_PropertyGetter ()
		{
			ToggleButton widget = new ToggleButton ();

			Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");

			Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");

			Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void CheckBox_ReadLocalValue ()
		{
			CheckBox widget = new CheckBox ();
			object retval;

			retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void CheckBox_GetValue ()
		{
			CheckBox widget = new CheckBox ();
			object retval;

			retval = widget.GetValue(ToggleButton.IsCheckedProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");

			retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void CheckBox_PropertyGetter ()
		{
			CheckBox widget = new CheckBox ();

			Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");

			Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");

			Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ComboBox_ReadLocalValue ()
		{
			ComboBox widget = new ComboBox ();
			object retval;

			retval = widget.ReadLocalValue(ComboBox.IsDropDownOpenProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.IsDropDownOpenProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ComboBox.IsSelectionActiveProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.IsSelectionActiveProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ComboBox.ItemContainerStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.ItemContainerStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ComboBox.MaxDropDownHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.MaxDropDownHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Selector.SelectedIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Selector.SelectedItemProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedItemProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ComboBox_GetValue ()
		{
			ComboBox widget = new ComboBox ();
			object retval;

			retval = widget.GetValue(ComboBox.IsDropDownOpenProperty);
			Assert.IsNotNull(retval, "GetValue(ComboBox.IsDropDownOpenProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ComboBox.IsDropDownOpenProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ComboBox.IsDropDownOpenProperty) does not match the default value");

			retval = widget.GetValue(ComboBox.IsSelectionActiveProperty);
			Assert.IsNotNull(retval, "GetValue(ComboBox.IsSelectionActiveProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ComboBox.IsSelectionActiveProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ComboBox.IsSelectionActiveProperty) does not match the default value");

			retval = widget.GetValue(ComboBox.ItemContainerStyleProperty);
			Assert.IsNull(retval, "GetValue(ComboBox.ItemContainerStyleProperty) should have returned null");

			retval = widget.GetValue(ComboBox.MaxDropDownHeightProperty);
			Assert.IsNotNull(retval, "GetValue(ComboBox.MaxDropDownHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ComboBox.MaxDropDownHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(ComboBox.MaxDropDownHeightProperty) does not match the default value");

			//retval = widget.GetValue(Selector.SelectedIndexProperty);
			//Assert.IsNotNull(retval, "GetValue(Selector.SelectedIndexProperty) should not have returned null");
			//Assert.IsTrue(retval is int, "GetValue(Selector.SelectedIndexProperty) is not of the correct type");
			//Assert.AreEqual(-1, retval, "GetValue(Selector.SelectedIndexProperty) does not match the default value");

			retval = widget.GetValue(Selector.SelectedItemProperty);
			Assert.IsNull(retval, "GetValue(Selector.SelectedItemProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ComboBox_PropertyGetter ()
		{
			ComboBox widget = new ComboBox ();

			Assert.AreEqual(false, widget.IsEditable, "IsEditable does not match the default value");

			Assert.AreEqual(false, widget.IsDropDownOpen, "IsDropDownOpen does not match the default value");

			Assert.AreEqual(false, widget.IsSelectionBoxHighlighted, "IsSelectionBoxHighlighted does not match the default value");

			Assert.IsNull(widget.ItemContainerStyle, "ItemContainerStyle should have returned null");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxDropDownHeight), "MaxDropDownHeight does not match the default value");

			Assert.IsNull(widget.SelectionBoxItem, "SelectionBoxItem should have returned null");

			Assert.IsNull(widget.SelectionBoxItemTemplate, "SelectionBoxItemTemplate should have returned null");

			//Assert.AreEqual(-1, widget.SelectedIndex, "SelectedIndex does not match the default value");

			Assert.IsNull(widget.SelectedItem, "SelectedItem should have returned null");

			Assert.IsNotNull(widget.Items, "Items should not have returned null");
			Assert.IsTrue(widget.Items is ItemCollection, "Items is not of the correct type");

			Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");

			Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");

			Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");

			Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ListBoxItem_ReadLocalValue ()
		{
			ListBoxItem widget = new ListBoxItem ();
			object retval;

			retval = widget.ReadLocalValue(ListBoxItem.IsSelectedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBoxItem.IsSelectedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ListBoxItem_GetValue ()
		{
			ListBoxItem widget = new ListBoxItem ();
			object retval;

			retval = widget.GetValue(ListBoxItem.IsSelectedProperty);
			Assert.IsNotNull(retval, "GetValue(ListBoxItem.IsSelectedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ListBoxItem.IsSelectedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ListBoxItem.IsSelectedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ListBoxItem_PropertyGetter ()
		{
			ListBoxItem widget = new ListBoxItem ();

			Assert.AreEqual(false, widget.IsSelected, "IsSelected does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ComboBoxItem_ReadLocalValue ()
		{
			ComboBoxItem widget = new ComboBoxItem ();
			object retval;

			retval = widget.ReadLocalValue(ListBoxItem.IsSelectedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBoxItem.IsSelectedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ComboBoxItem_GetValue ()
		{
			ComboBoxItem widget = new ComboBoxItem ();
			object retval;

			retval = widget.GetValue(ListBoxItem.IsSelectedProperty);
			Assert.IsNotNull(retval, "GetValue(ListBoxItem.IsSelectedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ListBoxItem.IsSelectedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ListBoxItem.IsSelectedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ComboBoxItem_PropertyGetter ()
		{
			ComboBoxItem widget = new ComboBoxItem ();

			Assert.AreEqual(false, widget.IsSelected, "IsSelected does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void HyperlinkButton_ReadLocalValue ()
		{
			HyperlinkButton widget = new HyperlinkButton ();
			object retval;

			retval = widget.ReadLocalValue(HyperlinkButton.NavigateUriProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(HyperlinkButton.NavigateUriProperty) should not have a value by default");

			retval = widget.ReadLocalValue(HyperlinkButton.TargetNameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(HyperlinkButton.TargetNameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void HyperlinkButton_GetValue ()
		{
			HyperlinkButton widget = new HyperlinkButton ();
			object retval;

			retval = widget.GetValue(HyperlinkButton.NavigateUriProperty);
			Assert.IsNull(retval, "GetValue(HyperlinkButton.NavigateUriProperty) should have returned null");

			retval = widget.GetValue(HyperlinkButton.TargetNameProperty);
			Assert.IsNull(retval, "GetValue(HyperlinkButton.TargetNameProperty) should have returned null");

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void HyperlinkButton_PropertyGetter ()
		{
			HyperlinkButton widget = new HyperlinkButton ();

			Assert.IsNull(widget.NavigateUri, "NavigateUri should have returned null");

			Assert.IsNull(widget.TargetName, "TargetName should have returned null");

			Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ListBox_ReadLocalValue ()
		{
			ListBox widget = new ListBox ();
			object retval;

			retval = widget.ReadLocalValue(ListBox.IsSelectionActiveProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBox.IsSelectionActiveProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ListBox.ItemContainerStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBox.ItemContainerStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Selector.SelectedIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Selector.SelectedItemProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedItemProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ListBox_GetValue ()
		{
			ListBox widget = new ListBox ();
			object retval;

			retval = widget.GetValue(ListBox.IsSelectionActiveProperty);
			Assert.IsNotNull(retval, "GetValue(ListBox.IsSelectionActiveProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ListBox.IsSelectionActiveProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ListBox.IsSelectionActiveProperty) does not match the default value");

			retval = widget.GetValue(ListBox.ItemContainerStyleProperty);
			Assert.IsNull(retval, "GetValue(ListBox.ItemContainerStyleProperty) should have returned null");

			//retval = widget.GetValue(Selector.SelectedIndexProperty);
			//Assert.IsNotNull(retval, "GetValue(Selector.SelectedIndexProperty) should not have returned null");
			//Assert.IsTrue(retval is int, "GetValue(Selector.SelectedIndexProperty) is not of the correct type");
			//Assert.AreEqual(-1, retval, "GetValue(Selector.SelectedIndexProperty) does not match the default value");

			retval = widget.GetValue(Selector.SelectedItemProperty);
			Assert.IsNull(retval, "GetValue(Selector.SelectedItemProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");

			retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
			Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");

			//retval = widget.GetValue(Control.IsTabStopProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			//Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			//Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			//retval = widget.GetValue(Control.TabNavigationProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			//Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			//Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ListBox_PropertyGetter ()
		{
			ListBox widget = new ListBox ();

			Assert.IsNull(widget.ItemContainerStyle, "ItemContainerStyle should have returned null");

			//Assert.AreEqual(-1, widget.SelectedIndex, "SelectedIndex does not match the default value");

			Assert.IsNull(widget.SelectedItem, "SelectedItem should have returned null");

			Assert.IsNotNull(widget.Items, "Items should not have returned null");
			Assert.IsTrue(widget.Items is ItemCollection, "Items is not of the correct type");

			Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");

			Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");

			Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");

			Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");

			//Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			//Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void RepeatButton_ReadLocalValue ()
		{
			RepeatButton widget = new RepeatButton ();
			object retval;

			retval = widget.ReadLocalValue(RepeatButton.DelayProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RepeatButton.DelayProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RepeatButton.IntervalProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RepeatButton.IntervalProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "ReadLocalValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Press, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void RepeatButton_GetValue ()
		{
			RepeatButton widget = new RepeatButton ();
			object retval;

			retval = widget.GetValue(RepeatButton.DelayProperty);
			Assert.IsNotNull(retval, "GetValue(RepeatButton.DelayProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(RepeatButton.DelayProperty) is not of the correct type");
			Assert.AreEqual(500, retval, "GetValue(RepeatButton.DelayProperty) does not match the default value");

			retval = widget.GetValue(RepeatButton.IntervalProperty);
			Assert.IsNotNull(retval, "GetValue(RepeatButton.IntervalProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(RepeatButton.IntervalProperty) is not of the correct type");
			Assert.AreEqual(33, retval, "GetValue(RepeatButton.IntervalProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Press, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void RepeatButton_PropertyGetter ()
		{
			RepeatButton widget = new RepeatButton ();

			Assert.AreEqual(500, widget.Delay, "Delay does not match the default value");

			Assert.AreEqual(33, widget.Interval, "Interval does not match the default value");

			Assert.AreEqual(ClickMode.Press, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ScrollBar_ReadLocalValue ()
		{
			ScrollBar widget = new ScrollBar ();
			object retval;

			retval = widget.ReadLocalValue(ScrollBar.OrientationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollBar.OrientationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollBar.ViewportSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollBar.ViewportSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.ValueProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ScrollBar_GetValue ()
		{
			ScrollBar widget = new ScrollBar ();
			object retval;

			retval = widget.GetValue(ScrollBar.OrientationProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollBar.OrientationProperty) should not have returned null");
			Assert.IsTrue(retval is Orientation, "GetValue(ScrollBar.OrientationProperty) is not of the correct type");
			Assert.AreEqual(Orientation.Vertical, retval, "GetValue(ScrollBar.OrientationProperty) does not match the default value");

			retval = widget.GetValue(ScrollBar.ViewportSizeProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollBar.ViewportSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollBar.ViewportSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollBar.ViewportSizeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MinimumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MaximumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.LargeChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.SmallChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ScrollBar_PropertyGetter ()
		{
			ScrollBar widget = new ScrollBar ();

			Assert.AreEqual(Orientation.Vertical, widget.Orientation, "Orientation does not match the default value");

			Assert.AreEqual((double) 0, widget.ViewportSize, "ViewportSize does not match the default value");

			Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");

			Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");

			Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");

			Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Thumb_ReadLocalValue ()
		{
			Thumb widget = new Thumb ();
			object retval;

			retval = widget.ReadLocalValue(Thumb.IsDraggingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Thumb.IsDraggingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Thumb.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Thumb.IsFocusedProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Thumb_GetValue ()
		{
			Thumb widget = new Thumb ();
			object retval;

			retval = widget.GetValue(Thumb.IsDraggingProperty);
			Assert.IsNotNull(retval, "GetValue(Thumb.IsDraggingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Thumb.IsDraggingProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Thumb.IsDraggingProperty) does not match the default value");

			retval = widget.GetValue(Thumb.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(Thumb.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Thumb.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Thumb.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Thumb_PropertyGetter ()
		{
			Thumb widget = new Thumb ();

			Assert.AreEqual(false, widget.IsDragging, "IsDragging does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void RadioButton_ReadLocalValue ()
		{
			RadioButton widget = new RadioButton ();
			object retval;

			retval = widget.ReadLocalValue(RadioButton.GroupNameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadioButton.GroupNameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void RadioButton_GetValue ()
		{
			RadioButton widget = new RadioButton ();
			object retval;

			retval = widget.GetValue(RadioButton.GroupNameProperty);
			Assert.IsNull(retval, "GetValue(RadioButton.GroupNameProperty) should have returned null");

			retval = widget.GetValue(ToggleButton.IsCheckedProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");

			retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
			Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.ClickModeProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
			Assert.IsTrue(retval is ClickMode, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
			Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");

			retval = widget.GetValue(ButtonBase.IsPressedProperty);
			Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void RadioButton_PropertyGetter ()
		{
			RadioButton widget = new RadioButton ();

			Assert.IsNull(widget.GroupName, "GroupName should have returned null");

			Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");

			Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");

			Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");

			Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ScrollContentPresenter_ReadLocalValue ()
		{
			ScrollContentPresenter widget = new ScrollContentPresenter ();
			object retval;

			retval = widget.ReadLocalValue(ContentPresenter.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentPresenter.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(UIElement.ClipProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ScrollContentPresenter_GetValue ()
		{
			ScrollContentPresenter widget = new ScrollContentPresenter ();
			object retval;

			retval = widget.GetValue(ContentPresenter.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentPresenter.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentPresenter.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentPresenter.ContentProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			//retval = widget.GetValue(UIElement.ClipProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ScrollContentPresenter_PropertyGetter ()
		{
			ScrollContentPresenter widget = new ScrollContentPresenter ();

			Assert.IsNull(widget.ScrollOwner, "ScrollOwner should have returned null");

			Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");

			Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");

			Assert.AreEqual((double) 0, widget.ExtentWidth, "ExtentWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ExtentHeight, "ExtentHeight does not match the default value");

			Assert.AreEqual((double) 0, widget.ViewportWidth, "ViewportWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ViewportHeight, "ViewportHeight does not match the default value");

			Assert.AreEqual(false, widget.CanVerticallyScroll, "CanVerticallyScroll does not match the default value");

			Assert.AreEqual(false, widget.CanHorizontallyScroll, "CanHorizontallyScroll does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			//Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ScrollViewer_ReadLocalValue ()
		{
			ScrollViewer widget = new ScrollViewer ();
			object retval;

			retval = widget.ReadLocalValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.VerticalScrollBarVisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.HorizontalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.HorizontalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ViewportWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ViewportWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ScrollableWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ScrollableWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.VerticalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.VerticalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ViewportHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ViewportHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ScrollableHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ScrollableHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ExtentHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ExtentHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ScrollViewer.ExtentWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ExtentWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ScrollViewer_GetValue ()
		{
			ScrollViewer widget = new ScrollViewer ();
			object retval;

			retval = widget.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is ScrollBarVisibility, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) is not of the correct type");
			Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is ScrollBarVisibility, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) is not of the correct type");
			Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.HorizontalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.HorizontalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.HorizontalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.HorizontalOffsetProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ViewportWidthProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ViewportWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ViewportWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ViewportWidthProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ScrollableWidthProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ScrollableWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ScrollableWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ScrollableWidthProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.VerticalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.VerticalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.VerticalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.VerticalOffsetProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ViewportHeightProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ViewportHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ViewportHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ViewportHeightProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ScrollableHeightProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ScrollableHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ScrollableHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ScrollableHeightProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ExtentHeightProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ExtentHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ExtentHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ExtentHeightProperty) does not match the default value");

			retval = widget.GetValue(ScrollViewer.ExtentWidthProperty);
			Assert.IsNotNull(retval, "GetValue(ScrollViewer.ExtentWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ScrollViewer.ExtentWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ExtentWidthProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ScrollViewer_PropertyGetter ()
		{
			ScrollViewer widget = new ScrollViewer ();

			Assert.AreEqual(ScrollBarVisibility.Disabled, widget.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility does not match the default value");

			Assert.AreEqual(ScrollBarVisibility.Disabled, widget.VerticalScrollBarVisibility, "VerticalScrollBarVisibility does not match the default value");

			Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");

			Assert.AreEqual((double) 0, widget.ViewportWidth, "ViewportWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ScrollableWidth, "ScrollableWidth does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.ComputedHorizontalScrollBarVisibility, "ComputedHorizontalScrollBarVisibility does not match the default value");

			Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");

			Assert.AreEqual((double) 0, widget.ViewportHeight, "ViewportHeight does not match the default value");

			Assert.AreEqual((double) 0, widget.ScrollableHeight, "ScrollableHeight does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.ComputedVerticalScrollBarVisibility, "ComputedVerticalScrollBarVisibility does not match the default value");

			Assert.AreEqual((double) 0, widget.ExtentHeight, "ExtentHeight does not match the default value");

			Assert.AreEqual((double) 0, widget.ExtentWidth, "ExtentWidth does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void Slider_ReadLocalValue ()
		{
			Slider widget = new Slider ();
			object retval;

			retval = widget.ReadLocalValue(Slider.OrientationProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.OrientationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Slider.IsFocusedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.IsFocusedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Slider.IsDirectionReversedProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.IsDirectionReversedProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.ValueProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void Slider_GetValue ()
		{
			Slider widget = new Slider ();
			object retval;

			retval = widget.GetValue(Slider.OrientationProperty);
			Assert.IsNotNull(retval, "GetValue(Slider.OrientationProperty) should not have returned null");
			Assert.IsTrue(retval is Orientation, "GetValue(Slider.OrientationProperty) is not of the correct type");
			Assert.AreEqual(Orientation.Horizontal, retval, "GetValue(Slider.OrientationProperty) does not match the default value");

			retval = widget.GetValue(Slider.IsFocusedProperty);
			Assert.IsNotNull(retval, "GetValue(Slider.IsFocusedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Slider.IsFocusedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Slider.IsFocusedProperty) does not match the default value");

			retval = widget.GetValue(Slider.IsDirectionReversedProperty);
			Assert.IsNotNull(retval, "GetValue(Slider.IsDirectionReversedProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Slider.IsDirectionReversedProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(Slider.IsDirectionReversedProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MinimumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MaximumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.LargeChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.SmallChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void Slider_PropertyGetter ()
		{
			Slider widget = new Slider ();

			Assert.AreEqual(Orientation.Horizontal, widget.Orientation, "Orientation does not match the default value");

			Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");

			Assert.AreEqual(false, widget.IsDirectionReversed, "IsDirectionReversed does not match the default value");

			Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");

			Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");

			Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");

			Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ToolTip_ReadLocalValue ()
		{
			ToolTip widget = new ToolTip ();
			object retval;

			retval = widget.ReadLocalValue(ToolTip.HorizontalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.HorizontalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToolTip.IsOpenProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.IsOpenProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ToolTip.VerticalOffsetProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.VerticalOffsetProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(ContentControl.ContentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ToolTip_GetValue ()
		{
			ToolTip widget = new ToolTip ();
			object retval;

			retval = widget.GetValue(ToolTip.HorizontalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(ToolTip.HorizontalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ToolTip.HorizontalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ToolTip.HorizontalOffsetProperty) does not match the default value");

			retval = widget.GetValue(ToolTip.IsOpenProperty);
			Assert.IsNotNull(retval, "GetValue(ToolTip.IsOpenProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ToolTip.IsOpenProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ToolTip.IsOpenProperty) does not match the default value");

			retval = widget.GetValue(ToolTip.VerticalOffsetProperty);
			Assert.IsNotNull(retval, "GetValue(ToolTip.VerticalOffsetProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(ToolTip.VerticalOffsetProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(ToolTip.VerticalOffsetProperty) does not match the default value");

			retval = widget.GetValue(ContentControl.ContentTemplateProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");

			retval = widget.GetValue(ContentControl.ContentProperty);
			Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ToolTip_PropertyGetter ()
		{
			ToolTip widget = new ToolTip ();

			Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");

			Assert.AreEqual(false, widget.IsOpen, "IsOpen does not match the default value");

			Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");

			Assert.IsNull(widget.Content, "Content should have returned null");

			Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void ProgressBar_ReadLocalValue ()
		{
			ProgressBar widget = new ProgressBar ();
			object retval;

			retval = widget.ReadLocalValue(ProgressBar.IsIndeterminateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ProgressBar.IsIndeterminateProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(RangeBase.ValueProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.IsTabStopProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TabIndexProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.TemplateProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");

			//retval = widget.ReadLocalValue(Control.TabNavigationProperty);
			//Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.PaddingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BackgroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderBrushProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontSizeProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontFamilyProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.ForegroundProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontWeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.FontStretchProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");

			retval = widget.ReadLocalValue(Control.IsEnabledProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");

			retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.ClipProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");

			retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
		}

		[TestMethod]
		public void ProgressBar_GetValue ()
		{
			ProgressBar widget = new ProgressBar ();
			object retval;

			retval = widget.GetValue(ProgressBar.IsIndeterminateProperty);
			Assert.IsNotNull(retval, "GetValue(ProgressBar.IsIndeterminateProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(ProgressBar.IsIndeterminateProperty) is not of the correct type");
			Assert.AreEqual(false, retval, "GetValue(ProgressBar.IsIndeterminateProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MinimumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.MaximumProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.LargeChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.SmallChangeProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
			Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");

			retval = widget.GetValue(RangeBase.ValueProperty);
			Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(RangeBase.ValueProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");

			retval = widget.GetValue(Control.IsTabStopProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsTabStopProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");

			retval = widget.GetValue(Control.TabIndexProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
			Assert.IsTrue(retval is int, "GetValue(Control.TabIndexProperty) is not of the correct type");
			Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");

			retval = widget.GetValue(Control.TemplateProperty);
			Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");

			retval = widget.GetValue(Control.TabNavigationProperty);
			Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
			Assert.IsTrue(retval is KeyboardNavigationMode, "GetValue(Control.TabNavigationProperty) is not of the correct type");
			Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");

			retval = widget.GetValue(Control.PaddingProperty);
			Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.PaddingProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");

			retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");

			retval = widget.GetValue(Control.BackgroundProperty);
			Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");

			retval = widget.GetValue(Control.BorderBrushProperty);
			Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");

			retval = widget.GetValue(Control.BorderThicknessProperty);
			Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");

			retval = widget.GetValue(Control.FontSizeProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(Control.FontSizeProperty) is not of the correct type");
			Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");

			retval = widget.GetValue(Control.FontFamilyProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
			Assert.IsTrue(retval is FontFamily, "GetValue(Control.FontFamilyProperty) is not of the correct type");
			Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");

			//widget.GetValue(Control.ForegroundProperty);
			//Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
			//Assert.IsTrue(retval is SolidColorBrush, "GetValue(Control.ForegroundProperty) is not of the correct type");

			retval = widget.GetValue(Control.FontWeightProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
			Assert.IsTrue(retval is FontWeight, "GetValue(Control.FontWeightProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStyleProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
			Assert.IsTrue(retval is FontStyle, "GetValue(Control.FontStyleProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");

			retval = widget.GetValue(Control.FontStretchProperty);
			Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
			Assert.IsTrue(retval is FontStretch, "GetValue(Control.FontStretchProperty) is not of the correct type");
			Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");

			retval = widget.GetValue(Control.IsEnabledProperty);
			Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(Control.IsEnabledProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.LanguageProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
			Assert.IsTrue(retval is XmlLanguage, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
			Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.WidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MinHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
			Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
			Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is HorizontalAlignment, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
			Assert.IsTrue(retval is VerticalAlignment, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
			Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.MarginProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
			Assert.IsTrue(retval is Thickness, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
			Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.StyleProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.NameProperty);
			Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
			Assert.IsTrue(retval is string, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
			Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");

			retval = widget.GetValue(FrameworkElement.TagProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");

			retval = widget.GetValue(FrameworkElement.DataContextProperty);
			Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
			Assert.IsTrue(retval is double, "GetValue(UIElement.OpacityProperty) is not of the correct type");
			Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.ClipProperty);
			Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");

			//retval = widget.GetValue(UIElement.RenderTransformProperty);
			//Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");

			retval = widget.GetValue(UIElement.OpacityMaskProperty);
			Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");

			retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
			Assert.IsTrue(retval is Point, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
			Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");

			retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");

			retval = widget.GetValue(UIElement.VisibilityProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
			Assert.IsTrue(retval is Visibility, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
			Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");

			retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
			Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
			Assert.IsTrue(retval is bool, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
			Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
		}

		[TestMethod]
		public void ProgressBar_PropertyGetter ()
		{
			ProgressBar widget = new ProgressBar ();

			Assert.AreEqual(false, widget.IsIndeterminate, "IsIndeterminate does not match the default value");

			Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");

			Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");

			Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");

			Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");

			Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");

			Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");

			Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");

			Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");

			Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");

			Assert.IsNull(widget.Template, "Template should have returned null");

			Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");

			Assert.IsNull(widget.Background, "Background should have returned null");

			Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");

			Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
			Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");

			Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");

			Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");

			Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");

			Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");

			//Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
			//Assert.IsTrue(widget.Foreground is SolidColorBrush, "Foreground is not of the correct type");

			Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
			Assert.IsTrue(widget.Triggers is TriggerCollection, "Triggers is not of the correct type");

			Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
			Assert.IsTrue(widget.Resources is ResourceDictionary, "Resources is not of the correct type");

			Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");

			Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");

			Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");

			Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");

			Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");

			Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");

			Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");

			Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");

			Assert.IsNull(widget.Style, "Style should have returned null");

			Assert.IsNull(widget.Parent, "Parent should have returned null");

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNull(widget.Tag, "Tag should have returned null");

			Assert.IsNull(widget.Cursor, "Cursor should have returned null");

			Assert.IsNotNull(widget.Language, "Language should not have returned null");
			Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");

			Assert.IsNull(widget.DataContext, "DataContext should have returned null");

			Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");

			Assert.IsNull(widget.Clip, "Clip should have returned null");

			Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");

			Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");

			Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");

			Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");

			Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");

			Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");

			Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");

			Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
			Assert.IsTrue(widget.RenderTransform is MatrixTransform, "RenderTransform is not of the correct type");
		}

		[TestMethod]
		public void VisualStateGroup_PropertyGetter ()
		{
			VisualStateGroup widget = new VisualStateGroup ();

			Assert.IsNotNull(widget.Name, "Name should not have returned null");
			Assert.AreEqual("", widget.Name, "Name does not match the default value");

			Assert.IsNotNull(widget.States, "States should not have returned null");

			Assert.IsNotNull(widget.Transitions, "Transitions should not have returned null");
		}

		[TestMethod]
		public void VisualStateManager_ReadLocalValue ()
		{
			VisualStateManager widget = new VisualStateManager ();
			object retval;

			retval = widget.ReadLocalValue(VisualStateManager.CustomVisualStateManagerProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VisualStateManager.CustomVisualStateManagerProperty) should not have a value by default");
		}

		[TestMethod]
		public void VisualStateManager_GetValue ()
		{
			VisualStateManager widget = new VisualStateManager ();
			object retval;

			retval = widget.GetValue(VisualStateManager.CustomVisualStateManagerProperty);
			Assert.IsNull(retval, "GetValue(VisualStateManager.CustomVisualStateManagerProperty) should have returned null");
		}

		[TestMethod]
		public void Stroke_PropertyGetter ()
		{
			Stroke widget = new Stroke ();

			Assert.IsNotNull(widget.StylusPoints, "StylusPoints should not have returned null");
			Assert.IsTrue(widget.StylusPoints is StylusPointCollection, "StylusPoints is not of the correct type");

			//Assert.IsNotNull(widget.DrawingAttributes, "DrawingAttributes should not have returned null");
			//Assert.IsTrue(widget.DrawingAttributes is DrawingAttributes, "DrawingAttributes is not of the correct type");
		}

		[TestMethod]
		public void DeepZoomImageTileSource_ReadLocalValue ()
		{
			DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();
			object retval;

			retval = widget.ReadLocalValue(DeepZoomImageTileSource.UriSourceProperty);
			Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DeepZoomImageTileSource.UriSourceProperty) should not have a value by default");
		}

		[TestMethod]
		public void DeepZoomImageTileSource_GetValue ()
		{
			DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();
			object retval;

			retval = widget.GetValue(DeepZoomImageTileSource.UriSourceProperty);
			Assert.IsNull(retval, "GetValue(DeepZoomImageTileSource.UriSourceProperty) should have returned null");
		}

		[TestMethod]
		public void DeepZoomImageTileSource_PropertyGetter ()
		{
			DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();

			Assert.IsNull(widget.UriSource, "UriSource should have returned null");
		}

		[TestMethod]
		public void ResourceDictionary_PropertyGetter ()
		{
			ResourceDictionary widget = new ResourceDictionary ();

			Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");

			Assert.AreEqual(0, widget.Count, "Count does not match the default value");
		}

	}
}
