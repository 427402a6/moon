
Feel free to add items to this TODO list

* Samples:

	Although we are going to need to have API coverage through
	writing tests, a good way of getting stuff done would be to
	identify some demo applications to get working:

		* Chess program.
		* Silverlight airlines.
		* Page turner sample
		* Stock wizard-generated video players.

* Plugin

	Need to destroy the appdomain when the instance is destroyed.

	Need to track down who is calling surface_repaint after we have
	destroyed the plugin.

	Need to make sure that Downloaders get the plugin_instance pointer
	from the caller instead of the current hack that picsk the first
	available plugin from the list of plugins as the owner of the request. 

* Downloader

	Support a non-streaming mode that would still provide notifications
	but would not store the data in memory, but instead be notified at
	the end of the download.

	Currently images are not progressive, and we are just wasting memory,
	but in addition we need a file to be available if we want to provide
	ZIP-file services.

	Once we have full files transfered to disk, we can implement the ZIP
	functionality: GetResponseText (string partName).

* Managed Code:

	Write sample code to exercise every property.

* UIElement

	Need to add support for events:

	Event: Loaded
		This probably should be used instead of the current
		hack that we have, lookup what the semantics for it
		are.

	Events: Focus

		Have to investigate what it means to get "focus"
		with UIElements, there are two signals, GotFocus
		and LostFocus, but what do they mean?

	Need support for Z-axis.

* Mouse events

	Since we are going to be using the linker to thin out various
	libraries maybe we should think out AGCLR as well, and by default
	install a more capable AGCLR.

	In particular this would be interesting for handling other
	mouse events other than "button1".

* Video Player:

	Add support for seeking

	Expose properties to managed world.

	Implement Downloader

* Reference counting and destruction

	Need to properly shut down the runtime.

	Need managed runtime to:

		* Take a ref on creation (to sink the object)
		* Finalizer, to queue unrefs like Gtk#
		* Something to release the queued refs

		* Use SafeFileHandle to prevent queueing of
	  	  a destruction when we pass an object to unmanaged
		  land during a P/Invoke


* Paths

	Sam Ruby had some path tests, we could use that as test cases.
	http://intertwingly.net/stories/2007/05/06/

* Shapes

	Many shapes requires the ::getxformorigin method, the method
	is used to determine the center of the object. Some shapes (e.g.
	Lines) don't have center as their position isn't given wrt to 
	the Canvas Top and Left properties (e.g. Line supplies X1,Y1 and
	X2,Y2). Not sure ? Add a test case ;-)

* Color

	Right now the unmanaged side use 4 doubles for colors (ARGB), 
	while the managed side use an uint (4 bytes) and must also give
	float (not double) representations (ScA, ScR, ScG & ScB). All 
	this will eventually need to be merged into a single 
	representation

* Managed side

	UIElement.cs currently uses standard events, it should instead
	use something like EventList like Windows.Forms does to avoid
	wasting all that space on all those fields that are barely used.

	Also, it should probably flag when the frist event is set to
	avoid having the native code send any events when we are not
	interested in them.

	Something like on "add" we would do:

		NativeMethods.UIElement_register_interest_in_events (...)

* Mouse

	Implement mouse grabs

* Gtk Hackery

	For some reason I cant get moon/test/demo.exe program to focus the
	Silverlight widget even if I click on it and I do a
	gtk_widget_grab_focus, am probably missing something.

* Optimizing Events

	Currently we emit the mouse events to every widget, regardless
	of whether they are interested in the event.

	We should avoid doing this if the widget is not interested in them,
	this could be done like this:

		* Provide Explicit implementaiton of the add/remove event
		  handlers.

		* Notify the unmanaged API when we register our interest
		  in the event

		* Unmanaged could use the flags variable that is part of
	   	  the UIElement to store this information
	

* Visibility:

	Implement all three modes

* Text

	Find out why ligatures are not happening for certain scripts.
